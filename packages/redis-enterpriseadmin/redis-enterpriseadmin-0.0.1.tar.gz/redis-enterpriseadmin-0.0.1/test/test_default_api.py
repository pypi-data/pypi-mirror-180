# coding: utf-8

"""
    redislabs-cnm

    null  # noqa: E501

    OpenAPI spec version: 0.90
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.default_api import DefaultApi  # noqa: E501
from swagger_client.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        self.api = DefaultApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_v1_actions_action_uid_get(self):
        """Test case for v1_actions_action_uid_get

        """
        pass

    def test_v1_actions_get(self):
        """Test case for v1_actions_get

        Get the status of all currently executing, pending or completed actions on all entities (cluster, nodes and bdbs). This API is used to track every long-lived API request which returns either a task_id or an action_uid.  # noqa: E501
        """
        pass

    def test_v1_bdbs_alerts_get(self):
        """Test case for v1_bdbs_alerts_get

        Get all alert states for all bdbs.  # noqa: E501
        """
        pass

    def test_v1_bdbs_alerts_intuid_alert_get(self):
        """Test case for v1_bdbs_alerts_intuid_alert_get

        Get bdb alert state.  # noqa: E501
        """
        pass

    def test_v1_bdbs_alerts_intuid_get(self):
        """Test case for v1_bdbs_alerts_intuid_get

        Get all alert states for bdb.  # noqa: E501
        """
        pass

    def test_v1_bdbs_alerts_intuid_post(self):
        """Test case for v1_bdbs_alerts_intuid_post

        Updates database’s one or many alerts configuration  # noqa: E501
        """
        pass

    def test_v1_bdbs_bdb_uid_peer_stats_get(self):
        """Test case for v1_bdbs_bdb_uid_peer_stats_get

        Get stats for a all peer instances of a local CRDB instance.  # noqa: E501
        """
        pass

    def test_v1_bdbs_bdb_uid_peer_stats_intuid_get(self):
        """Test case for v1_bdbs_bdb_uid_peer_stats_intuid_get

        Get stats for a specific CRDB peer instance.  # noqa: E501
        """
        pass

    def test_v1_bdbs_bdb_uid_sync_source_stats_get(self):
        """Test case for v1_bdbs_bdb_uid_sync_source_stats_get

        Get stats for a all syncer sources of a local database.  # noqa: E501
        """
        pass

    def test_v1_bdbs_bdb_uid_sync_source_stats_intuid_get(self):
        """Test case for v1_bdbs_bdb_uid_sync_source_stats_intuid_get

        Get stats for a specific syncer (replica-of) instance.  # noqa: E501
        """
        pass

    def test_v1_bdbs_crdt_sources_alerts_get(self):
        """Test case for v1_bdbs_crdt_sources_alerts_get

        Get all alert states for all crdt sources of all CRDBs.  # noqa: E501
        """
        pass

    def test_v1_bdbs_crdt_sources_alerts_intuid_get(self):
        """Test case for v1_bdbs_crdt_sources_alerts_intuid_get

        Get all alert states for all crdt source for specific local bdb of CRDB.  # noqa: E501
        """
        pass

    def test_v1_bdbs_crdt_sources_alerts_intuid_intcrdt_src_id_alert_get(self):
        """Test case for v1_bdbs_crdt_sources_alerts_intuid_intcrdt_src_id_alert_get

        Get bdb alert state.  # noqa: E501
        """
        pass

    def test_v1_bdbs_crdt_sources_alerts_intuid_intcrdt_src_id_get(self):
        """Test case for v1_bdbs_crdt_sources_alerts_intuid_intcrdt_src_id_get

        Get all alert states for specific crdt source for specific local bdb of CRDB.  # noqa: E501
        """
        pass

    def test_v1_bdbs_get(self):
        """Test case for v1_bdbs_get

        Get all databases in the cluster.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_backup_reset_status_put(self):
        """Test case for v1_bdbs_intuid_actions_backup_reset_status_put

        Reset database current backup status (backup_status) to idle if not in progress. As well clear exiting backup_failure_reason if exits  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_export_post(self):
        """Test case for v1_bdbs_intuid_actions_export_post

        Initiate a database export.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_export_reset_status_put(self):
        """Test case for v1_bdbs_intuid_actions_export_reset_status_put

        Reset database current export status (export_status) to idle if not in progress. As well clear exiting export_failure_reason if exits  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_import_post(self):
        """Test case for v1_bdbs_intuid_actions_import_post

        Initiate a manual import process.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_import_reset_status_put(self):
        """Test case for v1_bdbs_intuid_actions_import_reset_status_put

        Reset database current import status (import_status) to idle if not in progress. As well clear exiting import_failure_reason if exits  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_optimize_shards_placement_get(self):
        """Test case for v1_bdbs_intuid_actions_optimize_shards_placement_get

        Get optimized shards placement for the given database.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_recover_get(self):
        """Test case for v1_bdbs_intuid_actions_recover_get

        Fetch the recovery plan for a database. The recovery plan provides information about the recovery status (if it is possible) and specific detail on which available files to recovery from have been found.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_actions_recover_post(self):
        """Test case for v1_bdbs_intuid_actions_recover_post

        Initiate recovery for a database in recovery state.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_anyaction_put(self):
        """Test case for v1_bdbs_intuid_anyaction_put

        Update the configuration of an active database.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_command_post(self):
        """Test case for v1_bdbs_intuid_command_post

        Execute a redis/memcached command, per the db type.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_delete(self):
        """Test case for v1_bdbs_intuid_delete

        Delete an active database.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_get(self):
        """Test case for v1_bdbs_intuid_get

        Get single database (bdb object) as json.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_passwords_delete(self):
        """Test case for v1_bdbs_intuid_passwords_delete

        Delete a password from the bdb’s default user (i.e., for AUTH <password> authentications).  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_passwords_post(self):
        """Test case for v1_bdbs_intuid_passwords_post

        Add a password to the bdb’s default user (i.e., for AUTH <password> authentications).  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_passwords_put(self):
        """Test case for v1_bdbs_intuid_passwords_put

        Set a (single) password to the bdb’s default user (i.e., for AUTH <password> authentications).  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_put(self):
        """Test case for v1_bdbs_intuid_put

        Update the configuration of an active database.  This is the simplified version of the update request which contains no additional action.  # noqa: E501
        """
        pass

    def test_v1_bdbs_intuid_upgrade_post(self):
        """Test case for v1_bdbs_intuid_upgrade_post

        Upgrade a BDB  # noqa: E501
        """
        pass

    def test_v1_bdbs_post(self):
        """Test case for v1_bdbs_post

        Create a new database in the cluster.  # noqa: E501
        """
        pass

    def test_v1_bdbs_replica_sources_alerts_get(self):
        """Test case for v1_bdbs_replica_sources_alerts_get

        Get all alert states for all replica sources of all BDBs.  # noqa: E501
        """
        pass

    def test_v1_bdbs_replica_sources_alerts_intuid_get(self):
        """Test case for v1_bdbs_replica_sources_alerts_intuid_get

        Get all alert states for all replica source of specific bdb.  # noqa: E501
        """
        pass

    def test_v1_bdbs_replica_sources_alerts_intuid_intreplica_src_id_alert_get(self):
        """Test case for v1_bdbs_replica_sources_alerts_intuid_intreplica_src_id_alert_get

        Get replica source alert state of specific bdb.  # noqa: E501
        """
        pass

    def test_v1_bdbs_replica_sources_alerts_intuid_intreplica_src_id_get(self):
        """Test case for v1_bdbs_replica_sources_alerts_intuid_intreplica_src_id_get

        Get all alert states for specific replica source of bdb.  # noqa: E501
        """
        pass

    def test_v1_bdbs_stats_get(self):
        """Test case for v1_bdbs_stats_get

        Get stats for all BDBs.  # noqa: E501
        """
        pass

    def test_v1_bdbs_stats_intuid_get(self):
        """Test case for v1_bdbs_stats_intuid_get

        Get stats for BDB.  # noqa: E501
        """
        pass

    def test_v1_bdbs_stats_last_get(self):
        """Test case for v1_bdbs_stats_last_get

        Get the most recent statistic information for all BDBs.  # noqa: E501
        """
        pass

    def test_v1_bdbs_stats_last_intuid_get(self):
        """Test case for v1_bdbs_stats_last_intuid_get

        Get the most recent statistic information for BDB.  # noqa: E501
        """
        pass

    def test_v1_bdbs_stringuid_modules_config_post(self):
        """Test case for v1_bdbs_stringuid_modules_config_post

        """
        pass

    def test_v1_bdbs_stringuid_modules_upgrade_post(self):
        """Test case for v1_bdbs_stringuid_modules_upgrade_post

        """
        pass

    def test_v1_bootstrap_action_post(self):
        """Test case for v1_bootstrap_action_post

        Initiate bootstrapping.  # noqa: E501
        """
        pass

    def test_v1_bootstrap_get(self):
        """Test case for v1_bootstrap_get

        Get the local node’s bootstrap status.  # noqa: E501
        """
        pass

    def test_v1_bootstrap_validate_action_post(self):
        """Test case for v1_bootstrap_validate_action_post

        Perform bootstrap validation.  # noqa: E501
        """
        pass

    def test_v1_cluster_actions_action_delete(self):
        """Test case for v1_cluster_actions_action_delete

        Cancel a queued or executing cluster action, or remove the status of a previously executed and completed action.  # noqa: E501
        """
        pass

    def test_v1_cluster_actions_action_get(self):
        """Test case for v1_cluster_actions_action_get

        """
        pass

    def test_v1_cluster_actions_action_post(self):
        """Test case for v1_cluster_actions_action_post

        Initiate a cluster-wide action.  # noqa: E501
        """
        pass

    def test_v1_cluster_actions_get(self):
        """Test case for v1_cluster_actions_get

        Get the status of a currently executing, queued or completed cluster action.  # noqa: E501
        """
        pass

    def test_v1_cluster_alerts_alert_get(self):
        """Test case for v1_cluster_alerts_alert_get

        Get cluster alert state.  # noqa: E501
        """
        pass

    def test_v1_cluster_alerts_get(self):
        """Test case for v1_cluster_alerts_get

        Get all alert states for the cluster object.  # noqa: E501
        """
        pass

    def test_v1_cluster_auditing_db_conns_delete(self):
        """Test case for v1_cluster_auditing_db_conns_delete

        Delete the Database Connections Auditing configurations.  # noqa: E501
        """
        pass

    def test_v1_cluster_auditing_db_conns_get(self):
        """Test case for v1_cluster_auditing_db_conns_get

        Get the Database Connections Auditing configuration, as JSON.  # noqa: E501
        """
        pass

    def test_v1_cluster_auditing_db_conns_put(self):
        """Test case for v1_cluster_auditing_db_conns_put

        Update the Database Connections Auditing configurations.  # noqa: E501
        """
        pass

    def test_v1_cluster_certificates_get(self):
        """Test case for v1_cluster_certificates_get

        Get the clusters certificates.  # noqa: E501
        """
        pass

    def test_v1_cluster_certificates_rotate_post(self):
        """Test case for v1_cluster_certificates_rotate_post

        Regenerates all internal cluster certificates. the certificate rotation will be performed on all nodes within the cluster. If “name” is provided, rotate only the specified certificate on all nodes within the cluster.  # noqa: E501
        """
        pass

    def test_v1_cluster_certificates_stringcertificate_name_delete(self):
        """Test case for v1_cluster_certificates_stringcertificate_name_delete

        Removes specified cluster certificate both from CCS and from disk across all nodes. Only optional certificates can be deleted through this endpoint.  # noqa: E501
        """
        pass

    def test_v1_cluster_fs_wd_config_get(self):
        """Test case for v1_cluster_fs_wd_config_get

        Get cluster-wide fs wd config.  # noqa: E501
        """
        pass

    def test_v1_cluster_fs_wd_config_put(self):
        """Test case for v1_cluster_fs_wd_config_put

        Set cluster-wide fs wd config.  # noqa: E501
        """
        pass

    def test_v1_cluster_fs_wd_fs_path_config_get(self):
        """Test case for v1_cluster_fs_wd_fs_path_config_get

        Get fs wd path config for cluster.  # noqa: E501
        """
        pass

    def test_v1_cluster_fs_wd_fs_path_config_put(self):
        """Test case for v1_cluster_fs_wd_fs_path_config_put

        Set fs wd path config for cluster.  # noqa: E501
        """
        pass

    def test_v1_cluster_get(self):
        """Test case for v1_cluster_get

        Get cluster info.  # noqa: E501
        """
        pass

    def test_v1_cluster_ldap_delete(self):
        """Test case for v1_cluster_ldap_delete

        Clear the LDAP configuration.  # noqa: E501
        """
        pass

    def test_v1_cluster_ldap_get(self):
        """Test case for v1_cluster_ldap_get

        Get the LDAP configuration, as JSON.  # noqa: E501
        """
        pass

    def test_v1_cluster_ldap_put(self):
        """Test case for v1_cluster_ldap_put

        Set or update cluster LDAP configuration.  # noqa: E501
        """
        pass

    def test_v1_cluster_module_capabilities_get(self):
        """Test case for v1_cluster_module_capabilities_get

        List possible redis module capabilities Example request:  # noqa: E501
        """
        pass

    def test_v1_cluster_put(self):
        """Test case for v1_cluster_put

        Update cluster settings.  # noqa: E501
        """
        pass

    def test_v1_cluster_services_configuration_get(self):
        """Test case for v1_cluster_services_configuration_get

        Get cluster services settings.  # noqa: E501
        """
        pass

    def test_v1_cluster_services_configuration_put(self):
        """Test case for v1_cluster_services_configuration_put

        Update the cluster services settings.  # noqa: E501
        """
        pass

    def test_v1_cluster_stats_get(self):
        """Test case for v1_cluster_stats_get

        Get cluster stats.  # noqa: E501
        """
        pass

    def test_v1_cluster_stats_last_get(self):
        """Test case for v1_cluster_stats_last_get

        Get the last cluster stat.  # noqa: E501
        """
        pass

    def test_v1_cluster_update_cert_put(self):
        """Test case for v1_cluster_update_cert_put

        Replaces specified cluster certificate with given one, the new certificate will be replaced on all nodes within the cluster. This end point will make sure given certificate is valid before actually updating the cluster.  # noqa: E501
        """
        pass

    def test_v1_debuginfo_all_bdb_intbdb_uid_get(self):
        """Test case for v1_debuginfo_all_bdb_intbdb_uid_get

        Fetch debuginfo from all nodes that are relevent to given bdb uid.  # noqa: E501
        """
        pass

    def test_v1_debuginfo_all_get(self):
        """Test case for v1_debuginfo_all_get

        Fetch debuginfo from all nodes.  # noqa: E501
        """
        pass

    def test_v1_debuginfo_node_bdb_intbdb_uid_get(self):
        """Test case for v1_debuginfo_node_bdb_intbdb_uid_get

        Fetch debuginfo tarfile which contains logs and other system information used for troubleshooting, for the given bdb.  # noqa: E501
        """
        pass

    def test_v1_debuginfo_node_get(self):
        """Test case for v1_debuginfo_node_get

        Fetch debuginfo tarfile which contains logs and other system information used for troubleshooting.  # noqa: E501
        """
        pass

    def test_v1_endpoints_stats_get(self):
        """Test case for v1_endpoints_stats_get

        Get stats for all endpoint-proxy links. Note: this method will return both endpoints and listeners stats for backwards compatability.  # noqa: E501
        """
        pass

    def test_v1_jsonschema_get(self):
        """Test case for v1_jsonschema_get

        Get the jsonschema of RLEC objects.  # noqa: E501
        """
        pass

    def test_v1_ldap_mappings_get(self):
        """Test case for v1_ldap_mappings_get

        Get all ldap_mapping objects.  # noqa: E501
        """
        pass

    def test_v1_ldap_mappings_intuid_delete(self):
        """Test case for v1_ldap_mappings_intuid_delete

        Delete an LDAP mapping object.  # noqa: E501
        """
        pass

    def test_v1_ldap_mappings_intuid_get(self):
        """Test case for v1_ldap_mappings_intuid_get

        Get a single ldap_mapping object.  # noqa: E501
        """
        pass

    def test_v1_ldap_mappings_intuid_put(self):
        """Test case for v1_ldap_mappings_intuid_put

        Update an existing ldap_mapping object.  # noqa: E501
        """
        pass

    def test_v1_ldap_mappings_post(self):
        """Test case for v1_ldap_mappings_post

        Create a new LDAP mapping.  # noqa: E501
        """
        pass

    def test_v1_license_get(self):
        """Test case for v1_license_get

        Returns the license details, including license string, expiration, and supported features.  # noqa: E501
        """
        pass

    def test_v1_license_put(self):
        """Test case for v1_license_put

        Install a new license string.  # noqa: E501
        """
        pass

    def test_v1_logs_get(self):
        """Test case for v1_logs_get

        Get cluster events log. Returns an array of events.  # noqa: E501
        """
        pass

    def test_v1_modules_config_bdb_stringuid_post(self):
        """Test case for v1_modules_config_bdb_stringuid_post

        Use module runtime configuration command (if defined) to configure new arguments for the module.  # noqa: E501
        """
        pass

    def test_v1_modules_get(self):
        """Test case for v1_modules_get

        List available modules, i.e. modules stored within the CCS Example request:  # noqa: E501
        """
        pass

    def test_v1_modules_post(self):
        """Test case for v1_modules_post

        Uploads a new module into the CCS  # noqa: E501
        """
        pass

    def test_v1_modules_stringuid_delete(self):
        """Test case for v1_modules_stringuid_delete

        Delete a Module.  # noqa: E501
        """
        pass

    def test_v1_modules_stringuid_get(self):
        """Test case for v1_modules_stringuid_get

        Get specific available modules, i.e. modules stored within the CCS Example request:  # noqa: E501
        """
        pass

    def test_v1_modules_upgrade_bdb_stringuid_post(self):
        """Test case for v1_modules_upgrade_bdb_stringuid_post

        Upgrades module version on specific BDB  # noqa: E501
        """
        pass

    def test_v1_node_intnode_id_fs_wd_fs_path_config_get(self):
        """Test case for v1_node_intnode_id_fs_wd_fs_path_config_get

        Get fs wd path config for a specific node.  # noqa: E501
        """
        pass

    def test_v1_node_intnode_id_fs_wd_fs_path_config_put(self):
        """Test case for v1_node_intnode_id_fs_wd_fs_path_config_put

        Update fs wd path config for a specific node.  # noqa: E501
        """
        pass

    def test_v1_nodes_actions_get(self):
        """Test case for v1_nodes_actions_get

        Get the status of all currently executing, pending or completed actions on all nodes.  # noqa: E501
        """
        pass

    def test_v1_nodes_alerts_get(self):
        """Test case for v1_nodes_alerts_get

        Get all alert states for all nodes.  # noqa: E501
        """
        pass

    def test_v1_nodes_alerts_intuid_alert_get(self):
        """Test case for v1_nodes_alerts_intuid_alert_get

        Get node alert state.  # noqa: E501
        """
        pass

    def test_v1_nodes_alerts_intuid_get(self):
        """Test case for v1_nodes_alerts_intuid_get

        Get all alert states for a node.  # noqa: E501
        """
        pass

    def test_v1_nodes_get(self):
        """Test case for v1_nodes_get

        Get all cluster nodes.  # noqa: E501
        """
        pass

    def test_v1_nodes_intuid_get(self):
        """Test case for v1_nodes_intuid_get

        Get single cluster node.  # noqa: E501
        """
        pass

    def test_v1_nodes_intuid_put(self):
        """Test case for v1_nodes_intuid_put

        Update a node object.  # noqa: E501
        """
        pass

    def test_v1_nodes_node_uid_actions_action_delete(self):
        """Test case for v1_nodes_node_uid_actions_action_delete

        Cancel a queued or executing node action, or remove the status of a previously executed and completed action.  # noqa: E501
        """
        pass

    def test_v1_nodes_node_uid_actions_action_get(self):
        """Test case for v1_nodes_node_uid_actions_action_get

        """
        pass

    def test_v1_nodes_node_uid_actions_action_post(self):
        """Test case for v1_nodes_node_uid_actions_action_post

        Initiate a node action.  # noqa: E501
        """
        pass

    def test_v1_nodes_node_uid_actions_get(self):
        """Test case for v1_nodes_node_uid_actions_get

        Get the status of a currently executing, queued or completed action, or all actions, on a specific node.  # noqa: E501
        """
        pass

    def test_v1_nodes_stats_get(self):
        """Test case for v1_nodes_stats_get

        Get stats for all nodes.  # noqa: E501
        """
        pass

    def test_v1_nodes_stats_intuid_get(self):
        """Test case for v1_nodes_stats_intuid_get

        Get stats for node.  # noqa: E501
        """
        pass

    def test_v1_nodes_stats_last_get(self):
        """Test case for v1_nodes_stats_last_get

        Get stats for all nodes.  # noqa: E501
        """
        pass

    def test_v1_nodes_stats_last_intuid_get(self):
        """Test case for v1_nodes_stats_last_intuid_get

        Get the last stats of a node.  # noqa: E501
        """
        pass

    def test_v1_ocsp_get(self):
        """Test case for v1_ocsp_get

        Get the OCSP configuration, as JSON.  # noqa: E501
        """
        pass

    def test_v1_ocsp_put(self):
        """Test case for v1_ocsp_put

        Set or update cluster OCSP configuration.  # noqa: E501
        """
        pass

    def test_v1_ocsp_status_get(self):
        """Test case for v1_ocsp_status_get

        Get the OCSP status, as JSON.  # noqa: E501
        """
        pass

    def test_v1_ocsp_test_post(self):
        """Test case for v1_ocsp_test_post

        Manually initiate a query to the OCSP server, and get the response as JSON. The staple is stored if the ocsp feature is enabled  # noqa: E501
        """
        pass

    def test_v1_redis_acls_get(self):
        """Test case for v1_redis_acls_get

        Get all redis_acl objects.  # noqa: E501
        """
        pass

    def test_v1_redis_acls_intuid_delete(self):
        """Test case for v1_redis_acls_intuid_delete

        Delete a redis_acl object.  # noqa: E501
        """
        pass

    def test_v1_redis_acls_intuid_get(self):
        """Test case for v1_redis_acls_intuid_get

        Get a single redis_acl object.  # noqa: E501
        """
        pass

    def test_v1_redis_acls_intuid_put(self):
        """Test case for v1_redis_acls_intuid_put

        Update an existing redis_acl object.  # noqa: E501
        """
        pass

    def test_v1_redis_acls_post(self):
        """Test case for v1_redis_acls_post

        Create a new redis_acl object (a named redis acl)  # noqa: E501
        """
        pass

    def test_v1_roles_get(self):
        """Test case for v1_roles_get

        Get all role objects.  # noqa: E501
        """
        pass

    def test_v1_roles_intuid_delete(self):
        """Test case for v1_roles_intuid_delete

        Delete a role object.  # noqa: E501
        """
        pass

    def test_v1_roles_intuid_get(self):
        """Test case for v1_roles_intuid_get

        Get a single role object.  # noqa: E501
        """
        pass

    def test_v1_roles_intuid_put(self):
        """Test case for v1_roles_intuid_put

        Update an existing role object.  # noqa: E501
        """
        pass

    def test_v1_roles_post(self):
        """Test case for v1_roles_post

        Create a new role.  # noqa: E501
        """
        pass

    def test_v1_shards_stats_get(self):
        """Test case for v1_shards_stats_get

        Get stats for all shards.  # noqa: E501
        """
        pass

    def test_v1_shards_stats_intuid_get(self):
        """Test case for v1_shards_stats_intuid_get

        Get stats for a specific shard.  # noqa: E501
        """
        pass

    def test_v1_shards_stats_last_get(self):
        """Test case for v1_shards_stats_last_get

        Get last stats for all shards.  # noqa: E501
        """
        pass

    def test_v1_shards_stats_last_intuid_get(self):
        """Test case for v1_shards_stats_last_intuid_get

        Get stats for a specific shard.  # noqa: E501
        """
        pass

    def test_v1_suffix_stringname_get(self):
        """Test case for v1_suffix_stringname_get

        Get single DNS suffix.  # noqa: E501
        """
        pass

    def test_v1_suffixes_get(self):
        """Test case for v1_suffixes_get

        Get all DNS suffixes in the cluster.  # noqa: E501
        """
        pass

    def test_v1_users_authorize_post(self):
        """Test case for v1_users_authorize_post

        Authorize a RLEC user.  # noqa: E501
        """
        pass

    def test_v1_users_get(self):
        """Test case for v1_users_get

        Get all RLEC users.  # noqa: E501
        """
        pass

    def test_v1_users_intuid_delete(self):
        """Test case for v1_users_intuid_delete

        Delete a RLEC user.  # noqa: E501
        """
        pass

    def test_v1_users_intuid_get(self):
        """Test case for v1_users_intuid_get

        Get a single RLEC user.  # noqa: E501
        """
        pass

    def test_v1_users_intuid_put(self):
        """Test case for v1_users_intuid_put

        Update a RLEC user configuration.  # noqa: E501
        """
        pass

    def test_v1_users_password_delete(self):
        """Test case for v1_users_password_delete

        Delete a password from the list of an internal user’s passwords.  # noqa: E501
        """
        pass

    def test_v1_users_password_post(self):
        """Test case for v1_users_password_post

        Add a new password to an internal user’s passwords list.  # noqa: E501
        """
        pass

    def test_v1_users_password_put(self):
        """Test case for v1_users_password_put

        Reset the password list of an internal user to include a (single) new password.  # noqa: E501
        """
        pass

    def test_v1_users_post(self):
        """Test case for v1_users_post

        Create a new RLEC user.  # noqa: E501
        """
        pass

    def test_v1_users_refresh_jwt_post(self):
        """Test case for v1_users_refresh_jwt_post

        Get a new authentication token.  # noqa: E501
        """
        pass

    def test_v2_bdbs_post(self):
        """Test case for v2_bdbs_post

        Create a new database in the cluster. See /v1/bdbs for more information. The database’s configuration should be under the “bdb” field.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
