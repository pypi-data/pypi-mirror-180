"""
Copyright (C) 2022-2023 VASTAI Technologies Co., Ltd. All Rights Reserved.
The information contained herein is confidential property of the company.
The user, copying, transfer or disclosure of such information is prohibited
except by express written agreement with VASTAI Technologies Co., Ltd.
"""
# coding: utf-8
__all__ = [
    "createModel", "destroyModel", "createDynamicModel", "setDynamicModelInputShape", "setModelBatchSize", 
    "getModelBatchSize", "getModelMaxBatchSize", "getDynamicModelMaxBatchSize", "getModelOutputSizeByIndex", 
    "getModelOutputDataTypeByIndex", "getModelInputCount", "getModelOutputCount", "getModelInputShapeByIndex", 
    "getModelOutputShapeByIndex", "VastaiModel"
]

import os
from _vaststream_pybind11 import vacl as _vacl, vacm as _vacm
from vaststream.vacm import Shape, D_TYPE
from .utils import *
from .common import *

def createModel(modLib: str, modGraph: str, modParam: str, hwConfig: str = "") -> Model:
    """
    create the vacl model\n
    --------------\n
    modLib [in]: Model library file (.so) generated by compiler.\n
    modGraph [in]: The file with the model graph description.\n
    modParam [in]: The file with the model parameter.\n
    hwConfig [in]: The config file with the hardware configuration, NULL if not available.\n
    """
    assert os.path.exists(modLib), f"Cannot find file {modLib}"
    assert os.path.exists(modGraph), f"Cannot find file {modGraph}"
    assert os.path.exists(modParam), f"Cannot find file {modParam}"
    if hwConfig: assert os.path.exists(hwConfig), f"Cannot find file {hwConfig}"
    return Model(_vacl.createModel(modLib, modGraph, modParam, hwConfig))

@err_check
def destroyModel(model:Model) -> int:
    """
    destroy the vacl model\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    """
    return _vacl.destroyModel(model.ptr)

def createDynamicModel(modSuitesConfig: str, hwConfig:str = "") -> Model:
    """
    create the vacl model\n
    --------------\n
    modSuitesConfig [in]: The JSON file with the description of a group of 3-model files for
        a dynamic model. All these files must be in the same location.\n
    hwConfig [in]: The JSON file with the hardware configuration, NULL if not available.\n
    """
    assert os.path.exists(modSuitesConfig), f"Cannot find file {modSuitesConfig}"
    if hwConfig: assert os.path.exists(hwConfig), f"Cannot find file {hwConfig}"
    return Model(_vacl.createDynamicModel(modSuitesConfig, hwConfig))

@err_check
def setDynamicModelInputShape(model:Model, shape:Shape, count:int) -> int:
    """
    Set the input shape for a dynamic model.\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    shape [in]: Input shape array for the model.\n
    count [in]: the size of the shape array.\n
    """
    return _vacl.setDynamicModelInputShape(model.ptr, shape, count)

@err_check
def setModelBatchSize(model:Model, batchSize:int) -> int:
    """"
    set the vacl model batch size\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    batchSize [in/out]: Batch size to be set. If input batch size is more than optimal batch size, it will be set\n
    """
    return _vacl.setModelBatchSize(model.ptr, batchSize)

def getModelBatchSize(model:Model) -> int:
    """"
    get the vacl model batch size\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    """
    return _vacl.getModelBatchSize(model.ptr)

def getModelMaxBatchSize(model:Model) -> int:
    """"
    get the vacl model max batch size\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    """
    return _vacl.getModelMaxBatchSize(model.ptr)

def getDynamicModelMaxBatchSize(model:Model, shape:Shape, count:int) -> int:
    """"
    get the dynamic model max batch size.\n
    --------------\n
    model  [in]: Pointer to a model instance.\n
    shapes [in]: Input shape array for the model.\n
    count [in]: Count of input shape array.\n
    """
    return _vacl.getDynamicModelMaxBatchSize(model.ptr, shape, count)

def getModelOutputSizeByIndex(model:Model, index:int) -> int:
    """
    Get the output data size by index for a model.\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    index [in]: Index of output.\n
    """
    return _vacl.getModelOutputSizeByIndex(model.ptr, index)

def getModelOutputDataTypeByIndex(model:Model, index:int) -> D_TYPE:
    """
    Get the output data type by index for a model.
    --------------\n
    model [in]: Pointer to a model instance.
    index [in]: Index of output.
    """
    return _vacl.getModelOutputDataTypeByIndex(model.ptr, index)

def getModelInputCount(model:Model) -> int:
    """
    Get the input count for a model.\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    """
    return _vacl.getModelInputCount(model.ptr)

def getModelOutputCount(model:Model) -> int:
    """
    Get the output count for a model.\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    """
    return _vacl.getModelOutputCount(model.ptr)

def getModelInputShapeByIndex(model:Model, index:int) -> Shape:
    """
    Get the input shape by index for a model.\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    index [in]: Index of input.\n
    """
    shape = _vacm.shape()
    ret = _vacl.getModelInputShapeByIndex(model.ptr, index, shape)
    if ret != _vacl.vaclER_SUCCESS:
        raise Exception(f"getModelInputShapeByIndex return error {ret}.")
    return shape

def getModelOutputShapeByIndex(model:Model, index:int) -> Shape:
    """
    Get the output shape by index for a model.\n
    --------------\n
    model [in]: Pointer to a model instance.\n
    index [in]: Index of output.\n
    """
    shape = _vacm.shape()
    ret = _vacl.getModelOutputShapeByIndex(model.ptr, index, shape)
    if ret != _vacl.vaclER_SUCCESS:
        raise Exception(f"getModelOutputShapeByIndex return error {ret}.")
    return shape


class VastaiModel():
    """
    Model tool class.
    """
    def __init__(
            self, 
            modLib: str = None, 
            modGraph: str = None, 
            modParam: str = None, 
            hwConfig: str = "", 
            modSuitesConfig: str = None
        ):
        """
        Stream tool class.\n
        --------------\n
        modLib [in]: Model library file (.so) generated by compiler.\n
        modGraph [in]: The file with the model graph description.\n
        modParam [in]: The file with the model parameter.\n
        hwConfig [in]: The config file with the hardware configuration, NULL if not available.\n
        """
        self.modLib = modLib
        self.modGraph = modGraph
        self.modParam = modParam
        self.hwConfig = hwConfig
        self.modSuitesConfig = modSuitesConfig
        self.dynamic = True if self.modSuitesConfig is not None else False
        # 非动态模型校验
        if not self.dynamic:
            assert all(arg is not None for arg in [modLib, modGraph, modParam])
        self._model = None
    
    def __enter__(self):
        self.create()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.destroy()

    @property
    def model(self) -> Model:
        return self._model
    
    @property
    def batchsize(self) -> int:
        return self.getBatchSize()
    
    @property
    def maxBatchSize(self) -> int:
        return self.getMaxBatchSize()
    
    @property
    def inputCount(self) -> int:
        return self.getInputCount()
    
    @property
    def outputCount(self) -> int:
        return self.getOutputCount()
    
    def create(self) -> None:
        """
        create the vacl model.
        """
        if self._model is None:
            if self.dynamic:
                self._model = createDynamicModel(self.modSuitesConfig, self.hwConfig)
            else:
                self._model = createModel(self.modLib, self.modGraph, self.modParam, self.hwConfig)
    
    def destroy(self) -> None:
        """
        destroy the vacl model\n
        """
        assert self._model is not None, "Please create model."
        destroyModel(self._model)
        self._model = None
    
    def setDynamicInputShape(self, shape:Shape, count:int):
        """
        Set the input shape for a dynamic model.\n
        --------------\n
        shape [in]: Input shape array for the model.\n
        count [in]: the size of the shape array.\n
        """
        assert self._model is not None, "Please create model."
        assert self.dynamic, "Only support dynamic model."
        return setDynamicModelInputShape(self._model, shape, count)
        
    def setBatchSize(self, batchSize:int) -> int:
        """"
        set the vacl model batch size\n
        --------------\n
        batchSize [in/out]: Batch size to be set. If input batch size is more than optimal batch size, it will be set\n
        """
        assert self._model is not None, "Please create model."
        return setModelBatchSize(self._model, batchSize)

    def getBatchSize(self) -> int:
        """"
        get the vacl model batch size.
        """
        assert self._model is not None, "Please create model."
        return getModelBatchSize(self._model)
    
    def getMaxBatchSize(self) -> int:
        """"
        get the vacl model max batch size.
        """
        assert self._model is not None, "Please create model."
        assert not self.dynamic, "Only support static model, please use getDynamicMaxBatchSize."
        return getModelMaxBatchSize(self._model)
    
    def getDynamicMaxBatchSize(self, shape:Shape, count:int) -> int:
        """"
        get the dynamic model max batch size.\n
        --------------\n
        shapes [in]: Input shape array for the model.\n
        count [in]: Count of input shape array.\n
        """
        assert self._model is not None, "Please create model."
        assert self.dynamic, "Only support dynamic model."
        return getDynamicModelMaxBatchSize(self._model, shape, count)
    
    def getOutputSizeByIndex(self, index: int) -> int:
        """
        Get the output data size by index for a model.\n
        --------------\n
        index [in]: Index of output.\n
        """
        assert self._model is not None, "Please create model."
        return getModelOutputSizeByIndex(self._model, index)
    
    def getOutputDataTypeByIndex(self, index: int) -> D_TYPE:
        """
        Get the output data type by index for a model.
        --------------\n
        index [in]: Index of output.
        """
        assert self._model is not None, "Please create model."
        return getModelOutputDataTypeByIndex(self._model, index)
    
    def getInputCount(self) -> int:
        """
        Get the input count for a model.
        """
        assert self._model is not None, "Please create model."
        return getModelInputCount(self._model)
    
    def getOutputCount(self) -> int:
        """
        Get the output count for a model.
        """
        assert self._model is not None, "Please create model."
        return getModelOutputCount(self._model)
    
    def getInputShapeByIndex(self, index: int) -> Shape:
        """
        Get the input shape by index for a model.\n
        --------------\n
        index [in]: Index of input.\n
        """
        assert self._model is not None, "Please create model."
        return getModelInputShapeByIndex(self._model, index) 
    
    def getOutputShapeByIndex(self, index: int) -> Shape:
        """
        Get the output shape by index for a model.\n
        --------------\n
        index [in]: Index of output.\n
        """
        assert self._model is not None, "Please create model."
        return getModelOutputShapeByIndex(self._model, index)
