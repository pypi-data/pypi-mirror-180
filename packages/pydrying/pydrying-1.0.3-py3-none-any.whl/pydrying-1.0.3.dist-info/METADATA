Metadata-Version: 2.1
Name: pydrying
Version: 1.0.3
Summary: Drying simulation of solid products
Author: Hedi ROMDHANA
Author-email: hedi.romdhana@agroparistech.fr
License: GPLv3
Keywords: drying simulation solid finte volume
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Software Development :: Testing
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Requires-Python: >=3.4
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: SALib
Requires-Dist: CoolProp

# Welcome to `pydrying` module!

`pydring` is a Python package intended to simulate the drying process. The simulation programs in this module are based on multiphysical and dynamic modeling of the drying phenomena (heat, mass & momentum transfer, and deformation of the drying product). The resolution of drying equations is based on the numerical method of finite volumes. This module calculates the drying kinetics of any solid product. The modeling of drying kinetics is essential in most transformation processes, such as the food industry (sugar industry, biomass refinery, fodder processing, etc.)

## Installation
WaterOptim runs under Python 3.6+. To install it with [pip](https://pip.pypa.io/en/stable/), run the following:
`pip install pydrying`
To upgrade it with [pip](https://pip.pypa.io/en/stable/), run the following:
`pip install --upgrade pydrying`
## Basic usage
### Thermophysical properties of drying material

    from numpy import ones,exp
	from pydrying.dry import thin_layer, material
    # diffusion coeff in the material
	def Diff(T,X):
    """
    Parameters
    ----------
    T : Temperature [째C]
    X : TYPE
        moisture content [dry basis]
    Returns
    -------
    Diffusion coefficient [m2/s]
    """
	    return 1e-9*ones(len(T))
	# sorption isotherms
	def aw(T,X):
    """
    Parameters
    ----------
    T : Temperature [째C]
    X : TYPE
        moisture content [dry basis]
    Returns
    -------
    water activity of the drying material [decimal]
    """
	    return (1.0-exp(-0.6876*(T+45.5555)*X*X))
	# thermal conductivity of the drying material
	def Lambda(T,X):
    """
    Parameters
    ----------
    T : Temperature [째C]
    X : TYPE
        moisture content [dry basis]
    Returns
    -------
    thermal conductivity [W/m/K]
    """
	    return .02
### Geometric properties

	material_shape = 0 # flat material, (1: cylinder, 2: sphere)
	caracteristic_length = 1e-2 # m

### Drying conditions

	drying_time = 3600 # s
	heat_transfer_coefficient = 25 # W/m2/K

Drying air properties (pressure, temperature and relative humidity) can be set from python calss `air`.

### Definition of drying material

	drying_material = material(Diff=Diff,aw=aw,Lambda=Lambda,
	                           m=material_shape,
	                           L=caracteristic_length,)

### Solve the problem of thin layer drying

	problem = thin_layer(material=drying_material,air={},
    h=heat_transfer_coefficient,
    tmax=drying_time)
	problem.solve()

### Water content plot

		import matplotlib.pyplot as plt
		plt.plot(tl.res.t, tl.res.Xmoy())
		plt.xlabel("drying time in s")
		plt.ylabel("moisture content in dry basis")

### Plot of material surface temperature

		plt.plot(tl.res.t, tl.res.T[-1,:])
		plt.xlabel("drying time in s")
		plt.ylabel("material temperature in 째C")
