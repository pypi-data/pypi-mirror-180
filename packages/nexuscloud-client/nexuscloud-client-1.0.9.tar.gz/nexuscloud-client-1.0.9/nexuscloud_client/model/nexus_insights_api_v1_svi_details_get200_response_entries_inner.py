"""
    Cisco Nexus Cloud API

    Cisco Nexus Cloud API is a programmatic interface that uses the REST architecture to provide access to the Nexus Cloud functionality.  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Contact: nexuscloud@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nexuscloud_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from nexuscloud_client.exceptions import ApiAttributeError


def lazy_import():
    from nexuscloud_client.model.nexus_insights_api_v1_svi_details_get200_response_entries_inner_neighbour_details import NexusInsightsApiV1SviDetailsGet200ResponseEntriesInnerNeighbourDetails
    globals()['NexusInsightsApiV1SviDetailsGet200ResponseEntriesInnerNeighbourDetails'] = NexusInsightsApiV1SviDetailsGet200ResponseEntriesInnerNeighbourDetails


class NexusInsightsApiV1SviDetailsGet200ResponseEntriesInner(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'admin_port_bandwidth': (str,),  # noqa: E501
            'admin_port_delay': (str,),  # noqa: E501
            'admin_status': (str,),  # noqa: E501
            'anomaly_score': (int,),  # noqa: E501
            'associated_members': ({str: ([str],)},),  # noqa: E501
            'associated_members_list': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
            'autostate': (str,),  # noqa: E501
            'bd_vnid': (str,),  # noqa: E501
            'configured_member_list': (str,),  # noqa: E501
            'encap_vlan': (str,),  # noqa: E501
            'errors_total': (int,),  # noqa: E501
            'fabric_name': (str,),  # noqa: E501
            'forward': (str,),  # noqa: E501
            'interface_bytes_egress': (int,),  # noqa: E501
            'interface_bytes_egress_flood': (int,),  # noqa: E501
            'interface_bytes_egress_multicast': (int,),  # noqa: E501
            'interface_bytes_egress_unicast': (int,),  # noqa: E501
            'interface_bytes_ingress': (int,),  # noqa: E501
            'interface_bytes_ingress_flood': (int,),  # noqa: E501
            'interface_bytes_ingress_multicast': (int,),  # noqa: E501
            'interface_bytes_ingress_unicast': (int,),  # noqa: E501
            'interface_crc': (int,),  # noqa: E501
            'interface_fcs': (int,),  # noqa: E501
            'interface_pkts_egress': (int,),  # noqa: E501
            'interface_pkts_egress_flood': (int,),  # noqa: E501
            'interface_pkts_egress_multicast': (int,),  # noqa: E501
            'interface_pkts_egress_unicast': (int,),  # noqa: E501
            'interface_pkts_ingress': (int,),  # noqa: E501
            'interface_pkts_ingress_flood': (int,),  # noqa: E501
            'interface_pkts_ingress_multicast': (int,),  # noqa: E501
            'interface_pkts_ingress_unicast': (int,),  # noqa: E501
            'interface_rate_egress': (float,),  # noqa: E501
            'interface_rate_ingress': (int,),  # noqa: E501
            'interface_type': (str,),  # noqa: E501
            'interface_unique_id': (str,),  # noqa: E501
            'interface_utilization_egress': (int,),  # noqa: E501
            'interface_utilization_ingress': (int,),  # noqa: E501
            'ipv4': (str,),  # noqa: E501
            'ipv6': (str,),  # noqa: E501
            'l3out_name': (str,),  # noqa: E501
            'load_intvl1': (str,),  # noqa: E501
            'load_intvl2': (str,),  # noqa: E501
            'load_intvl3': (str,),  # noqa: E501
            'mac': (str,),  # noqa: E501
            'medium': (str,),  # noqa: E501
            'mtu': (str,),  # noqa: E501
            'neighbour_details': (NexusInsightsApiV1SviDetailsGet200ResponseEntriesInnerNeighbourDetails,),  # noqa: E501
            'node_name': (str,),  # noqa: E501
            'oper_st_qual': (str,),  # noqa: E501
            'oper_status': (str,),  # noqa: E501
            'port_speed': (str,),  # noqa: E501
            'protocol_name': (str,),  # noqa: E501
            'routed_vlan_interface_id': (str,),  # noqa: E501
            'site_name': (str,),  # noqa: E501
            'source_name': (str,),  # noqa: E501
            'source_name_label': (str,),  # noqa: E501
            'svi_bytes_egress_drop': (int,),  # noqa: E501
            'svi_bytes_egress_drop_avg': (int,),  # noqa: E501
            'svi_bytes_egress_drop_max': (int,),  # noqa: E501
            'svi_bytes_egress_drop_min': (int,),  # noqa: E501
            'svi_bytes_ingress_drop': (int,),  # noqa: E501
            'svi_bytes_ingress_drop_avg': (int,),  # noqa: E501
            'svi_bytes_ingress_drop_max': (int,),  # noqa: E501
            'svi_bytes_ingress_drop_min': (int,),  # noqa: E501
            'svi_pkts_egress_drop': (int,),  # noqa: E501
            'svi_pkts_egress_drop_avg': (int,),  # noqa: E501
            'svi_pkts_egress_drop_max': (int,),  # noqa: E501
            'svi_pkts_egress_drop_min': (int,),  # noqa: E501
            'svi_pkts_ingress_drop': (int,),  # noqa: E501
            'svi_pkts_ingress_drop_avg': (int,),  # noqa: E501
            'svi_pkts_ingress_drop_max': (int,),  # noqa: E501
            'svi_pkts_ingress_drop_min': (int,),  # noqa: E501
            'ts': (str,),  # noqa: E501
            'vendor': (str,),  # noqa: E501
            'virtual_mac': (str,),  # noqa: E501
            'vlan_id': (str,),  # noqa: E501
            'vlan_type': (str,),  # noqa: E501
            'vrf_name': (str,),  # noqa: E501
            'vrf_vnid': (str,),  # noqa: E501
            'vrfinfo': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'admin_port_bandwidth': 'adminPortBandwidth',  # noqa: E501
        'admin_port_delay': 'adminPortDelay',  # noqa: E501
        'admin_status': 'adminStatus',  # noqa: E501
        'anomaly_score': 'anomalyScore',  # noqa: E501
        'associated_members': 'associatedMembers',  # noqa: E501
        'associated_members_list': 'associatedMembersList',  # noqa: E501
        'autostate': 'autostate',  # noqa: E501
        'bd_vnid': 'bdVnid',  # noqa: E501
        'configured_member_list': 'configuredMemberList',  # noqa: E501
        'encap_vlan': 'encapVlan',  # noqa: E501
        'errors_total': 'errorsTotal',  # noqa: E501
        'fabric_name': 'fabricName',  # noqa: E501
        'forward': 'forward',  # noqa: E501
        'interface_bytes_egress': 'interfaceBytesEgress',  # noqa: E501
        'interface_bytes_egress_flood': 'interfaceBytesEgressFlood',  # noqa: E501
        'interface_bytes_egress_multicast': 'interfaceBytesEgressMulticast',  # noqa: E501
        'interface_bytes_egress_unicast': 'interfaceBytesEgressUnicast',  # noqa: E501
        'interface_bytes_ingress': 'interfaceBytesIngress',  # noqa: E501
        'interface_bytes_ingress_flood': 'interfaceBytesIngressFlood',  # noqa: E501
        'interface_bytes_ingress_multicast': 'interfaceBytesIngressMulticast',  # noqa: E501
        'interface_bytes_ingress_unicast': 'interfaceBytesIngressUnicast',  # noqa: E501
        'interface_crc': 'interfaceCrc',  # noqa: E501
        'interface_fcs': 'interfaceFcs',  # noqa: E501
        'interface_pkts_egress': 'interfacePktsEgress',  # noqa: E501
        'interface_pkts_egress_flood': 'interfacePktsEgressFlood',  # noqa: E501
        'interface_pkts_egress_multicast': 'interfacePktsEgressMulticast',  # noqa: E501
        'interface_pkts_egress_unicast': 'interfacePktsEgressUnicast',  # noqa: E501
        'interface_pkts_ingress': 'interfacePktsIngress',  # noqa: E501
        'interface_pkts_ingress_flood': 'interfacePktsIngressFlood',  # noqa: E501
        'interface_pkts_ingress_multicast': 'interfacePktsIngressMulticast',  # noqa: E501
        'interface_pkts_ingress_unicast': 'interfacePktsIngressUnicast',  # noqa: E501
        'interface_rate_egress': 'interfaceRateEgress',  # noqa: E501
        'interface_rate_ingress': 'interfaceRateIngress',  # noqa: E501
        'interface_type': 'interfaceType',  # noqa: E501
        'interface_unique_id': 'interfaceUniqueId',  # noqa: E501
        'interface_utilization_egress': 'interfaceUtilizationEgress',  # noqa: E501
        'interface_utilization_ingress': 'interfaceUtilizationIngress',  # noqa: E501
        'ipv4': 'ipv4',  # noqa: E501
        'ipv6': 'ipv6',  # noqa: E501
        'l3out_name': 'l3outName',  # noqa: E501
        'load_intvl1': 'loadIntvl1',  # noqa: E501
        'load_intvl2': 'loadIntvl2',  # noqa: E501
        'load_intvl3': 'loadIntvl3',  # noqa: E501
        'mac': 'mac',  # noqa: E501
        'medium': 'medium',  # noqa: E501
        'mtu': 'mtu',  # noqa: E501
        'neighbour_details': 'neighbourDetails',  # noqa: E501
        'node_name': 'nodeName',  # noqa: E501
        'oper_st_qual': 'operStQual',  # noqa: E501
        'oper_status': 'operStatus',  # noqa: E501
        'port_speed': 'portSpeed',  # noqa: E501
        'protocol_name': 'protocolName',  # noqa: E501
        'routed_vlan_interface_id': 'routedVlanInterfaceId',  # noqa: E501
        'site_name': 'siteName',  # noqa: E501
        'source_name': 'sourceName',  # noqa: E501
        'source_name_label': 'sourceNameLabel',  # noqa: E501
        'svi_bytes_egress_drop': 'sviBytesEgressDrop',  # noqa: E501
        'svi_bytes_egress_drop_avg': 'sviBytesEgressDropAvg',  # noqa: E501
        'svi_bytes_egress_drop_max': 'sviBytesEgressDropMax',  # noqa: E501
        'svi_bytes_egress_drop_min': 'sviBytesEgressDropMin',  # noqa: E501
        'svi_bytes_ingress_drop': 'sviBytesIngressDrop',  # noqa: E501
        'svi_bytes_ingress_drop_avg': 'sviBytesIngressDropAvg',  # noqa: E501
        'svi_bytes_ingress_drop_max': 'sviBytesIngressDropMax',  # noqa: E501
        'svi_bytes_ingress_drop_min': 'sviBytesIngressDropMin',  # noqa: E501
        'svi_pkts_egress_drop': 'sviPktsEgressDrop',  # noqa: E501
        'svi_pkts_egress_drop_avg': 'sviPktsEgressDropAvg',  # noqa: E501
        'svi_pkts_egress_drop_max': 'sviPktsEgressDropMax',  # noqa: E501
        'svi_pkts_egress_drop_min': 'sviPktsEgressDropMin',  # noqa: E501
        'svi_pkts_ingress_drop': 'sviPktsIngressDrop',  # noqa: E501
        'svi_pkts_ingress_drop_avg': 'sviPktsIngressDropAvg',  # noqa: E501
        'svi_pkts_ingress_drop_max': 'sviPktsIngressDropMax',  # noqa: E501
        'svi_pkts_ingress_drop_min': 'sviPktsIngressDropMin',  # noqa: E501
        'ts': 'ts',  # noqa: E501
        'vendor': 'vendor',  # noqa: E501
        'virtual_mac': 'virtualMac',  # noqa: E501
        'vlan_id': 'vlanId',  # noqa: E501
        'vlan_type': 'vlanType',  # noqa: E501
        'vrf_name': 'vrfName',  # noqa: E501
        'vrf_vnid': 'vrfVnid',  # noqa: E501
        'vrfinfo': 'vrfinfo',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """NexusInsightsApiV1SviDetailsGet200ResponseEntriesInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            admin_port_bandwidth (str): [optional]  # noqa: E501
            admin_port_delay (str): [optional]  # noqa: E501
            admin_status (str): [optional]  # noqa: E501
            anomaly_score (int): [optional]  # noqa: E501
            associated_members ({str: ([str],)}): [optional]  # noqa: E501
            associated_members_list ([bool, date, datetime, dict, float, int, list, str, none_type]): [optional]  # noqa: E501
            autostate (str): [optional]  # noqa: E501
            bd_vnid (str): [optional]  # noqa: E501
            configured_member_list (str): [optional]  # noqa: E501
            encap_vlan (str): [optional]  # noqa: E501
            errors_total (int): [optional]  # noqa: E501
            fabric_name (str): This is a deprecated field and will be removed in a future release. Please use siteName field instead.. [optional]  # noqa: E501
            forward (str): [optional]  # noqa: E501
            interface_bytes_egress (int): [optional]  # noqa: E501
            interface_bytes_egress_flood (int): [optional]  # noqa: E501
            interface_bytes_egress_multicast (int): [optional]  # noqa: E501
            interface_bytes_egress_unicast (int): [optional]  # noqa: E501
            interface_bytes_ingress (int): [optional]  # noqa: E501
            interface_bytes_ingress_flood (int): [optional]  # noqa: E501
            interface_bytes_ingress_multicast (int): [optional]  # noqa: E501
            interface_bytes_ingress_unicast (int): [optional]  # noqa: E501
            interface_crc (int): [optional]  # noqa: E501
            interface_fcs (int): [optional]  # noqa: E501
            interface_pkts_egress (int): [optional]  # noqa: E501
            interface_pkts_egress_flood (int): [optional]  # noqa: E501
            interface_pkts_egress_multicast (int): [optional]  # noqa: E501
            interface_pkts_egress_unicast (int): [optional]  # noqa: E501
            interface_pkts_ingress (int): [optional]  # noqa: E501
            interface_pkts_ingress_flood (int): [optional]  # noqa: E501
            interface_pkts_ingress_multicast (int): [optional]  # noqa: E501
            interface_pkts_ingress_unicast (int): [optional]  # noqa: E501
            interface_rate_egress (float): [optional]  # noqa: E501
            interface_rate_ingress (int): [optional]  # noqa: E501
            interface_type (str): [optional]  # noqa: E501
            interface_unique_id (str): [optional]  # noqa: E501
            interface_utilization_egress (int): [optional]  # noqa: E501
            interface_utilization_ingress (int): [optional]  # noqa: E501
            ipv4 (str): [optional]  # noqa: E501
            ipv6 (str): [optional]  # noqa: E501
            l3out_name (str): [optional]  # noqa: E501
            load_intvl1 (str): [optional]  # noqa: E501
            load_intvl2 (str): [optional]  # noqa: E501
            load_intvl3 (str): [optional]  # noqa: E501
            mac (str): [optional]  # noqa: E501
            medium (str): [optional]  # noqa: E501
            mtu (str): [optional]  # noqa: E501
            neighbour_details (NexusInsightsApiV1SviDetailsGet200ResponseEntriesInnerNeighbourDetails): [optional]  # noqa: E501
            node_name (str): [optional]  # noqa: E501
            oper_st_qual (str): [optional]  # noqa: E501
            oper_status (str): [optional]  # noqa: E501
            port_speed (str): [optional]  # noqa: E501
            protocol_name (str): [optional]  # noqa: E501
            routed_vlan_interface_id (str): [optional]  # noqa: E501
            site_name (str): [optional]  # noqa: E501
            source_name (str): [optional]  # noqa: E501
            source_name_label (str): [optional]  # noqa: E501
            svi_bytes_egress_drop (int): [optional]  # noqa: E501
            svi_bytes_egress_drop_avg (int): [optional]  # noqa: E501
            svi_bytes_egress_drop_max (int): [optional]  # noqa: E501
            svi_bytes_egress_drop_min (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop_avg (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop_max (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop_min (int): [optional]  # noqa: E501
            svi_pkts_egress_drop (int): [optional]  # noqa: E501
            svi_pkts_egress_drop_avg (int): [optional]  # noqa: E501
            svi_pkts_egress_drop_max (int): [optional]  # noqa: E501
            svi_pkts_egress_drop_min (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop_avg (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop_max (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop_min (int): [optional]  # noqa: E501
            ts (str): [optional]  # noqa: E501
            vendor (str): [optional]  # noqa: E501
            virtual_mac (str): [optional]  # noqa: E501
            vlan_id (str): [optional]  # noqa: E501
            vlan_type (str): [optional]  # noqa: E501
            vrf_name (str): [optional]  # noqa: E501
            vrf_vnid (str): [optional]  # noqa: E501
            vrfinfo (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NexusInsightsApiV1SviDetailsGet200ResponseEntriesInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            admin_port_bandwidth (str): [optional]  # noqa: E501
            admin_port_delay (str): [optional]  # noqa: E501
            admin_status (str): [optional]  # noqa: E501
            anomaly_score (int): [optional]  # noqa: E501
            associated_members ({str: ([str],)}): [optional]  # noqa: E501
            associated_members_list ([bool, date, datetime, dict, float, int, list, str, none_type]): [optional]  # noqa: E501
            autostate (str): [optional]  # noqa: E501
            bd_vnid (str): [optional]  # noqa: E501
            configured_member_list (str): [optional]  # noqa: E501
            encap_vlan (str): [optional]  # noqa: E501
            errors_total (int): [optional]  # noqa: E501
            fabric_name (str): This is a deprecated field and will be removed in a future release. Please use siteName field instead.. [optional]  # noqa: E501
            forward (str): [optional]  # noqa: E501
            interface_bytes_egress (int): [optional]  # noqa: E501
            interface_bytes_egress_flood (int): [optional]  # noqa: E501
            interface_bytes_egress_multicast (int): [optional]  # noqa: E501
            interface_bytes_egress_unicast (int): [optional]  # noqa: E501
            interface_bytes_ingress (int): [optional]  # noqa: E501
            interface_bytes_ingress_flood (int): [optional]  # noqa: E501
            interface_bytes_ingress_multicast (int): [optional]  # noqa: E501
            interface_bytes_ingress_unicast (int): [optional]  # noqa: E501
            interface_crc (int): [optional]  # noqa: E501
            interface_fcs (int): [optional]  # noqa: E501
            interface_pkts_egress (int): [optional]  # noqa: E501
            interface_pkts_egress_flood (int): [optional]  # noqa: E501
            interface_pkts_egress_multicast (int): [optional]  # noqa: E501
            interface_pkts_egress_unicast (int): [optional]  # noqa: E501
            interface_pkts_ingress (int): [optional]  # noqa: E501
            interface_pkts_ingress_flood (int): [optional]  # noqa: E501
            interface_pkts_ingress_multicast (int): [optional]  # noqa: E501
            interface_pkts_ingress_unicast (int): [optional]  # noqa: E501
            interface_rate_egress (float): [optional]  # noqa: E501
            interface_rate_ingress (int): [optional]  # noqa: E501
            interface_type (str): [optional]  # noqa: E501
            interface_unique_id (str): [optional]  # noqa: E501
            interface_utilization_egress (int): [optional]  # noqa: E501
            interface_utilization_ingress (int): [optional]  # noqa: E501
            ipv4 (str): [optional]  # noqa: E501
            ipv6 (str): [optional]  # noqa: E501
            l3out_name (str): [optional]  # noqa: E501
            load_intvl1 (str): [optional]  # noqa: E501
            load_intvl2 (str): [optional]  # noqa: E501
            load_intvl3 (str): [optional]  # noqa: E501
            mac (str): [optional]  # noqa: E501
            medium (str): [optional]  # noqa: E501
            mtu (str): [optional]  # noqa: E501
            neighbour_details (NexusInsightsApiV1SviDetailsGet200ResponseEntriesInnerNeighbourDetails): [optional]  # noqa: E501
            node_name (str): [optional]  # noqa: E501
            oper_st_qual (str): [optional]  # noqa: E501
            oper_status (str): [optional]  # noqa: E501
            port_speed (str): [optional]  # noqa: E501
            protocol_name (str): [optional]  # noqa: E501
            routed_vlan_interface_id (str): [optional]  # noqa: E501
            site_name (str): [optional]  # noqa: E501
            source_name (str): [optional]  # noqa: E501
            source_name_label (str): [optional]  # noqa: E501
            svi_bytes_egress_drop (int): [optional]  # noqa: E501
            svi_bytes_egress_drop_avg (int): [optional]  # noqa: E501
            svi_bytes_egress_drop_max (int): [optional]  # noqa: E501
            svi_bytes_egress_drop_min (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop_avg (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop_max (int): [optional]  # noqa: E501
            svi_bytes_ingress_drop_min (int): [optional]  # noqa: E501
            svi_pkts_egress_drop (int): [optional]  # noqa: E501
            svi_pkts_egress_drop_avg (int): [optional]  # noqa: E501
            svi_pkts_egress_drop_max (int): [optional]  # noqa: E501
            svi_pkts_egress_drop_min (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop_avg (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop_max (int): [optional]  # noqa: E501
            svi_pkts_ingress_drop_min (int): [optional]  # noqa: E501
            ts (str): [optional]  # noqa: E501
            vendor (str): [optional]  # noqa: E501
            virtual_mac (str): [optional]  # noqa: E501
            vlan_id (str): [optional]  # noqa: E501
            vlan_type (str): [optional]  # noqa: E501
            vrf_name (str): [optional]  # noqa: E501
            vrf_vnid (str): [optional]  # noqa: E501
            vrfinfo (str): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
