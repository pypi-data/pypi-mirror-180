"""
    Cisco Nexus Cloud API

    Cisco Nexus Cloud API is a programmatic interface that uses the REST architecture to provide access to the Nexus Cloud functionality.  # noqa: E501

    The version of the OpenAPI document: 1.0.9
    Contact: nexuscloud@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nexuscloud_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from nexuscloud_client.exceptions import ApiAttributeError


def lazy_import():
    from nexuscloud_client.model.nexus_insights_api_v1_software_management_recommended_plan_get200_response_entries_inner_devices_inner import NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInnerDevicesInner
    globals()['NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInnerDevicesInner'] = NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInnerDevicesInner


class NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInner(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'config_id': (str,),  # noqa: E501
            'devices': ([NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInnerDevicesInner],),  # noqa: E501
            'end_time': (str,),  # noqa: E501
            'error_message': (str,),  # noqa: E501
            'expiry_time': (str,),  # noqa: E501
            'fabric_name': (str,),  # noqa: E501
            'failed_validation_count': (int,),  # noqa: E501
            'group_name': (str,),  # noqa: E501
            'group_order': (int,),  # noqa: E501
            'instance_id': (str,),  # noqa: E501
            'is_offline': (bool,),  # noqa: E501
            'job_name': (str,),  # noqa: E501
            'last_update_time': (str,),  # noqa: E501
            'passed_validation_count': (int,),  # noqa: E501
            'post_update_status': (str,),  # noqa: E501
            'pre_update_status': (str,),  # noqa: E501
            'recommendation_id': (str,),  # noqa: E501
            'site_name': (str,),  # noqa: E501
            'start_time': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'target_version': (str,),  # noqa: E501
            'tenant_id': (str,),  # noqa: E501
            'user_name': (str,),  # noqa: E501
            'validation_results': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
            'validation_type': (str,),  # noqa: E501
            'vendor': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'config_id': 'configId',  # noqa: E501
        'devices': 'devices',  # noqa: E501
        'end_time': 'endTime',  # noqa: E501
        'error_message': 'errorMessage',  # noqa: E501
        'expiry_time': 'expiryTime',  # noqa: E501
        'fabric_name': 'fabricName',  # noqa: E501
        'failed_validation_count': 'failedValidationCount',  # noqa: E501
        'group_name': 'groupName',  # noqa: E501
        'group_order': 'groupOrder',  # noqa: E501
        'instance_id': 'instanceId',  # noqa: E501
        'is_offline': 'isOffline',  # noqa: E501
        'job_name': 'jobName',  # noqa: E501
        'last_update_time': 'lastUpdateTime',  # noqa: E501
        'passed_validation_count': 'passedValidationCount',  # noqa: E501
        'post_update_status': 'postUpdateStatus',  # noqa: E501
        'pre_update_status': 'preUpdateStatus',  # noqa: E501
        'recommendation_id': 'recommendationId',  # noqa: E501
        'site_name': 'siteName',  # noqa: E501
        'start_time': 'startTime',  # noqa: E501
        'status': 'status',  # noqa: E501
        'target_version': 'targetVersion',  # noqa: E501
        'tenant_id': 'tenantId',  # noqa: E501
        'user_name': 'userName',  # noqa: E501
        'validation_results': 'validationResults',  # noqa: E501
        'validation_type': 'validationType',  # noqa: E501
        'vendor': 'vendor',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            config_id (str): Config ID. [optional]  # noqa: E501
            devices ([NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInnerDevicesInner]): List of devices. [optional]  # noqa: E501
            end_time (str): End timestamp of update job. [optional]  # noqa: E501
            error_message (str): Error message of update. [optional]  # noqa: E501
            expiry_time (str): Expiry timestamp. [optional]  # noqa: E501
            fabric_name (str): Name of the site. [optional]  # noqa: E501
            failed_validation_count (int): No. of validation checks failed. [optional]  # noqa: E501
            group_name (str): Group name. [optional]  # noqa: E501
            group_order (int): Group order. [optional]  # noqa: E501
            instance_id (str): Instance ID for the group in the specified site. [optional]  # noqa: E501
            is_offline (bool): Offline status. [optional]  # noqa: E501
            job_name (str): Name of the job. [optional]  # noqa: E501
            last_update_time (str): Timestamp of last update. [optional]  # noqa: E501
            passed_validation_count (int): No. of validation checks passed. [optional]  # noqa: E501
            post_update_status (str): Post-update status. [optional]  # noqa: E501
            pre_update_status (str): Pre-update status. [optional]  # noqa: E501
            recommendation_id (str): Recommendation ID. [optional]  # noqa: E501
            site_name (str): Name of the site. [optional]  # noqa: E501
            start_time (str): Start timestamp of update job. [optional]  # noqa: E501
            status (str): Status. [optional]  # noqa: E501
            target_version (str): Target version to upgrade to. [optional]  # noqa: E501
            tenant_id (str): Tenant ID. [optional]  # noqa: E501
            user_name (str): Username. [optional]  # noqa: E501
            validation_results ([bool, date, datetime, dict, float, int, list, str, none_type]): Validation results. [optional]  # noqa: E501
            validation_type (str): Type of validation. [optional]  # noqa: E501
            vendor (str): Vendor. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInner - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            config_id (str): Config ID. [optional]  # noqa: E501
            devices ([NexusInsightsApiV1SoftwareManagementRecommendedPlanGet200ResponseEntriesInnerDevicesInner]): List of devices. [optional]  # noqa: E501
            end_time (str): End timestamp of update job. [optional]  # noqa: E501
            error_message (str): Error message of update. [optional]  # noqa: E501
            expiry_time (str): Expiry timestamp. [optional]  # noqa: E501
            fabric_name (str): Name of the site. [optional]  # noqa: E501
            failed_validation_count (int): No. of validation checks failed. [optional]  # noqa: E501
            group_name (str): Group name. [optional]  # noqa: E501
            group_order (int): Group order. [optional]  # noqa: E501
            instance_id (str): Instance ID for the group in the specified site. [optional]  # noqa: E501
            is_offline (bool): Offline status. [optional]  # noqa: E501
            job_name (str): Name of the job. [optional]  # noqa: E501
            last_update_time (str): Timestamp of last update. [optional]  # noqa: E501
            passed_validation_count (int): No. of validation checks passed. [optional]  # noqa: E501
            post_update_status (str): Post-update status. [optional]  # noqa: E501
            pre_update_status (str): Pre-update status. [optional]  # noqa: E501
            recommendation_id (str): Recommendation ID. [optional]  # noqa: E501
            site_name (str): Name of the site. [optional]  # noqa: E501
            start_time (str): Start timestamp of update job. [optional]  # noqa: E501
            status (str): Status. [optional]  # noqa: E501
            target_version (str): Target version to upgrade to. [optional]  # noqa: E501
            tenant_id (str): Tenant ID. [optional]  # noqa: E501
            user_name (str): Username. [optional]  # noqa: E501
            validation_results ([bool, date, datetime, dict, float, int, list, str, none_type]): Validation results. [optional]  # noqa: E501
            validation_type (str): Type of validation. [optional]  # noqa: E501
            vendor (str): Vendor. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
