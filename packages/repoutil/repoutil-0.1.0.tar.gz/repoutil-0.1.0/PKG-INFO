Metadata-Version: 2.1
Name: repoutil
Version: 0.1.0
Summary: A simple command line utility to write gitignores, licenses and workflow files to a project.
Home-page: https://bitbucket.org/shravannn/repoutil
License: MIT
Keywords: python,cli,license,gitignore,workflow,repository,write
Author: Shravan Asati
Author-email: dev.shravan@protonmail.com
Requires-Python: >=3.9,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Utilities
Requires-Dist: click (>=8.0.1,<9.0.0)
Project-URL: Documentation, https://bitbucket.org/shravannn/repoutil
Project-URL: Repository, https://bitbucket.org/shravannn/repoutil
Description-Content-Type: text/markdown

# repoutil

repoutil is a simple command line utility to write gitignores, licenses and workflow files to a project.

## Usage

```
Usage: repo [OPTIONS] COMMAND [ARGS]...

  repo is a simple command line utility to write gitignores, licenses and
  workflows to a repo.

Options:
  --version  Show the version and exit.
  --help     Show this message and exit.

Commands:
  g  Generates a gitignore file for the given language.
  l  Generates a license file for the given license.
  w  Generates a workflow file for the given language.
```

Examples:
```
repo g python # generate a gitignore file for python
repo l mit # generate a mit license file
```


<br>


## Versioning

repoutil releases follow semantic versioning, every release is in the *x.y.z* form, where:

- x is the MAJOR version and is incremented when a backwards incompatible change to stella is made.
- y is the MINOR version and is incremented when a backwards compatible change to stella is made, like changing dependencies or adding a new function, method, or features.
- z is the PATCH version and is incremented after making minor changes that don't affect stella's public API or dependencies, like fixing a bug.

<br>

## Licensing

License Â© 2021-Present Shravan Asati

This repository is licensed under the MIT license. See [LICENSE](LICENSE.txt) for details.
