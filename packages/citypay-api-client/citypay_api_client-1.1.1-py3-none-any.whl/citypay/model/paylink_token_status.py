"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from citypay.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from citypay.exceptions import ApiAttributeError


def lazy_import():
    from citypay.model.paylink_state_event import PaylinkStateEvent
    globals()['PaylinkStateEvent'] = PaylinkStateEvent


class PaylinkTokenStatus(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'amount_paid': (int,),  # noqa: E501
            'auth_code': (str,),  # noqa: E501
            'card': (str,),  # noqa: E501
            'created': (datetime,),  # noqa: E501
            'datetime': (datetime,),  # noqa: E501
            'identifier': (str,),  # noqa: E501
            'is_attachment': (bool,),  # noqa: E501
            'is_cancelled': (bool,),  # noqa: E501
            'is_closed': (bool,),  # noqa: E501
            'is_customer_receipt_email_sent': (bool,),  # noqa: E501
            'is_email_sent': (bool,),  # noqa: E501
            'is_expired': (bool,),  # noqa: E501
            'is_form_viewed': (bool,),  # noqa: E501
            'is_merchant_notification_email_sent': (bool,),  # noqa: E501
            'is_open_for_payment': (bool,),  # noqa: E501
            'is_paid': (bool,),  # noqa: E501
            'is_payment_attempted': (bool,),  # noqa: E501
            'is_postback_ok': (bool,),  # noqa: E501
            'is_request_challenged': (bool,),  # noqa: E501
            'is_sms_sent': (bool,),  # noqa: E501
            'is_validated': (bool,),  # noqa: E501
            'last_event_date_time': (datetime,),  # noqa: E501
            'last_payment_result': (str,),  # noqa: E501
            'mid': (str,),  # noqa: E501
            'payment_attempts_count': (int,),  # noqa: E501
            'state_history': ([PaylinkStateEvent],),  # noqa: E501
            'token': (str,),  # noqa: E501
            'trans_no': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'amount_paid': 'amount_paid',  # noqa: E501
        'auth_code': 'auth_code',  # noqa: E501
        'card': 'card',  # noqa: E501
        'created': 'created',  # noqa: E501
        'datetime': 'datetime',  # noqa: E501
        'identifier': 'identifier',  # noqa: E501
        'is_attachment': 'is_attachment',  # noqa: E501
        'is_cancelled': 'is_cancelled',  # noqa: E501
        'is_closed': 'is_closed',  # noqa: E501
        'is_customer_receipt_email_sent': 'is_customer_receipt_email_sent',  # noqa: E501
        'is_email_sent': 'is_email_sent',  # noqa: E501
        'is_expired': 'is_expired',  # noqa: E501
        'is_form_viewed': 'is_form_viewed',  # noqa: E501
        'is_merchant_notification_email_sent': 'is_merchant_notification_email_sent',  # noqa: E501
        'is_open_for_payment': 'is_open_for_payment',  # noqa: E501
        'is_paid': 'is_paid',  # noqa: E501
        'is_payment_attempted': 'is_payment_attempted',  # noqa: E501
        'is_postback_ok': 'is_postback_ok',  # noqa: E501
        'is_request_challenged': 'is_request_challenged',  # noqa: E501
        'is_sms_sent': 'is_sms_sent',  # noqa: E501
        'is_validated': 'is_validated',  # noqa: E501
        'last_event_date_time': 'last_event_date_time',  # noqa: E501
        'last_payment_result': 'last_payment_result',  # noqa: E501
        'mid': 'mid',  # noqa: E501
        'payment_attempts_count': 'payment_attempts_count',  # noqa: E501
        'state_history': 'state_history',  # noqa: E501
        'token': 'token',  # noqa: E501
        'trans_no': 'trans_no',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PaylinkTokenStatus - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            amount_paid (int): the amount that has been paid against the session.. [optional]  # noqa: E501
            auth_code (str): an authorisation code if the transaction was processed and isPaid is true.. [optional]  # noqa: E501
            card (str): a description of the card that was used for payment if paid.. [optional]  # noqa: E501
            created (datetime): the date and time that the session was created.. [optional]  # noqa: E501
            datetime (datetime): the date and time of the current status.. [optional]  # noqa: E501
            identifier (str): the merchant identifier, to help identifying the token.. [optional]  # noqa: E501
            is_attachment (bool): true if an attachment exists.. [optional]  # noqa: E501
            is_cancelled (bool): true if the session was cancelled either by the user or by a system request.. [optional]  # noqa: E501
            is_closed (bool): true if the token has been closed.. [optional]  # noqa: E501
            is_customer_receipt_email_sent (bool): true if a customer receipt has been sent.. [optional]  # noqa: E501
            is_email_sent (bool): true if an email was sent.. [optional]  # noqa: E501
            is_expired (bool): true if the session has expired.. [optional]  # noqa: E501
            is_form_viewed (bool): true if the form was ever displayed to the addressee.. [optional]  # noqa: E501
            is_merchant_notification_email_sent (bool): true if a merchant notification receipt was sent.. [optional]  # noqa: E501
            is_open_for_payment (bool): true if the session is still open for payment or false if it has been closed.. [optional]  # noqa: E501
            is_paid (bool): whether the session has been paid and therefore can be considered as complete.. [optional]  # noqa: E501
            is_payment_attempted (bool): true if payment has been attempted.. [optional]  # noqa: E501
            is_postback_ok (bool): true if a post back was executed successfully.. [optional]  # noqa: E501
            is_request_challenged (bool): true if the request has been challenged using 3-D Secure.. [optional]  # noqa: E501
            is_sms_sent (bool): true if an SMS was sent.. [optional]  # noqa: E501
            is_validated (bool): whether the token generation was successfully validated.. [optional]  # noqa: E501
            last_event_date_time (datetime): the date and time that the session last had an event actioned against it.. [optional]  # noqa: E501
            last_payment_result (str): the result of the last payment if one exists.. [optional]  # noqa: E501
            mid (str): identifies the merchant account.. [optional]  # noqa: E501
            payment_attempts_count (int): the number of attempts made to pay.. [optional]  # noqa: E501
            state_history ([PaylinkStateEvent]): [optional]  # noqa: E501
            token (str): the token value which uniquely identifies the session.. [optional]  # noqa: E501
            trans_no (int): a transaction number if the transacstion was processed and isPaid is true.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PaylinkTokenStatus - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            amount_paid (int): the amount that has been paid against the session.. [optional]  # noqa: E501
            auth_code (str): an authorisation code if the transaction was processed and isPaid is true.. [optional]  # noqa: E501
            card (str): a description of the card that was used for payment if paid.. [optional]  # noqa: E501
            created (datetime): the date and time that the session was created.. [optional]  # noqa: E501
            datetime (datetime): the date and time of the current status.. [optional]  # noqa: E501
            identifier (str): the merchant identifier, to help identifying the token.. [optional]  # noqa: E501
            is_attachment (bool): true if an attachment exists.. [optional]  # noqa: E501
            is_cancelled (bool): true if the session was cancelled either by the user or by a system request.. [optional]  # noqa: E501
            is_closed (bool): true if the token has been closed.. [optional]  # noqa: E501
            is_customer_receipt_email_sent (bool): true if a customer receipt has been sent.. [optional]  # noqa: E501
            is_email_sent (bool): true if an email was sent.. [optional]  # noqa: E501
            is_expired (bool): true if the session has expired.. [optional]  # noqa: E501
            is_form_viewed (bool): true if the form was ever displayed to the addressee.. [optional]  # noqa: E501
            is_merchant_notification_email_sent (bool): true if a merchant notification receipt was sent.. [optional]  # noqa: E501
            is_open_for_payment (bool): true if the session is still open for payment or false if it has been closed.. [optional]  # noqa: E501
            is_paid (bool): whether the session has been paid and therefore can be considered as complete.. [optional]  # noqa: E501
            is_payment_attempted (bool): true if payment has been attempted.. [optional]  # noqa: E501
            is_postback_ok (bool): true if a post back was executed successfully.. [optional]  # noqa: E501
            is_request_challenged (bool): true if the request has been challenged using 3-D Secure.. [optional]  # noqa: E501
            is_sms_sent (bool): true if an SMS was sent.. [optional]  # noqa: E501
            is_validated (bool): whether the token generation was successfully validated.. [optional]  # noqa: E501
            last_event_date_time (datetime): the date and time that the session last had an event actioned against it.. [optional]  # noqa: E501
            last_payment_result (str): the result of the last payment if one exists.. [optional]  # noqa: E501
            mid (str): identifies the merchant account.. [optional]  # noqa: E501
            payment_attempts_count (int): the number of attempts made to pay.. [optional]  # noqa: E501
            state_history ([PaylinkStateEvent]): [optional]  # noqa: E501
            token (str): the token value which uniquely identifies the session.. [optional]  # noqa: E501
            trans_no (int): a transaction number if the transacstion was processed and isPaid is true.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
