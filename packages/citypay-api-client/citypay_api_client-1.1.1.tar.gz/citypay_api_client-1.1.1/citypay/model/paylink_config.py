"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from citypay.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from citypay.exceptions import ApiAttributeError


def lazy_import():
    from citypay.model.paylink_custom_param import PaylinkCustomParam
    from citypay.model.paylink_field_guard_model import PaylinkFieldGuardModel
    from citypay.model.paylink_part_payments import PaylinkPartPayments
    from citypay.model.paylink_ui import PaylinkUI
    globals()['PaylinkCustomParam'] = PaylinkCustomParam
    globals()['PaylinkFieldGuardModel'] = PaylinkFieldGuardModel
    globals()['PaylinkPartPayments'] = PaylinkPartPayments
    globals()['PaylinkUI'] = PaylinkUI


class PaylinkConfig(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'acs_mode': (str,),  # noqa: E501
            'custom_params': ([PaylinkCustomParam],),  # noqa: E501
            'descriptor': (str,),  # noqa: E501
            'expire_in': (str,),  # noqa: E501
            'field_guard': ([PaylinkFieldGuardModel],),  # noqa: E501
            'lock_params': ([str],),  # noqa: E501
            'merch_logo': (str,),  # noqa: E501
            'merch_terms': (str,),  # noqa: E501
            'options': ([str],),  # noqa: E501
            'part_payments': (PaylinkPartPayments,),  # noqa: E501
            'pass_through_data': ({str: (str,)},),  # noqa: E501
            'pass_through_headers': ({str: (str,)},),  # noqa: E501
            'postback': (str,),  # noqa: E501
            'postback_password': (str,),  # noqa: E501
            'postback_policy': (str,),  # noqa: E501
            'postback_username': (str,),  # noqa: E501
            'redirect_delay': (int,),  # noqa: E501
            'redirect_failure': (str,),  # noqa: E501
            'redirect_success': (str,),  # noqa: E501
            'renderer': (str,),  # noqa: E501
            'return_params': (bool,),  # noqa: E501
            'ui': (PaylinkUI,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'acs_mode': 'acs_mode',  # noqa: E501
        'custom_params': 'custom_params',  # noqa: E501
        'descriptor': 'descriptor',  # noqa: E501
        'expire_in': 'expire_in',  # noqa: E501
        'field_guard': 'field_guard',  # noqa: E501
        'lock_params': 'lock_params',  # noqa: E501
        'merch_logo': 'merch_logo',  # noqa: E501
        'merch_terms': 'merch_terms',  # noqa: E501
        'options': 'options',  # noqa: E501
        'part_payments': 'part_payments',  # noqa: E501
        'pass_through_data': 'pass_through_data',  # noqa: E501
        'pass_through_headers': 'pass_through_headers',  # noqa: E501
        'postback': 'postback',  # noqa: E501
        'postback_password': 'postback_password',  # noqa: E501
        'postback_policy': 'postback_policy',  # noqa: E501
        'postback_username': 'postback_username',  # noqa: E501
        'redirect_delay': 'redirect_delay',  # noqa: E501
        'redirect_failure': 'redirect_failure',  # noqa: E501
        'redirect_success': 'redirect_success',  # noqa: E501
        'renderer': 'renderer',  # noqa: E501
        'return_params': 'return_params',  # noqa: E501
        'ui': 'ui',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PaylinkConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            acs_mode (str): Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience. . [optional]  # noqa: E501
            custom_params ([PaylinkCustomParam]): [optional]  # noqa: E501
            descriptor (str): Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.. [optional]  # noqa: E501
            expire_in (str): Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes. . [optional]  # noqa: E501
            field_guard ([PaylinkFieldGuardModel]): [optional]  # noqa: E501
            lock_params ([str]): [optional]  # noqa: E501
            merch_logo (str): A URL of a logo to include in the form. The URL should be delivered using HTTPS.. [optional]  # noqa: E501
            merch_terms (str): A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.. [optional]  # noqa: E501
            options ([str]): [optional]  # noqa: E501
            part_payments (PaylinkPartPayments): [optional]  # noqa: E501
            pass_through_data ({str: (str,)}): [optional]  # noqa: E501
            pass_through_headers ({str: (str,)}): [optional]  # noqa: E501
            postback (str): Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.. [optional]  # noqa: E501
            postback_password (str): A password to be added to the postback for HTTP Basic Authentication.. [optional]  # noqa: E501
            postback_policy (str): The policy setting for the postback see Postback Handling.. [optional]  # noqa: E501
            postback_username (str): A username to be added to the postback for HTTP Basic Authentication.. [optional]  # noqa: E501
            redirect_delay (int): A value which can delay the redirection in seconds. A value of 0 will redirect immediately.. [optional]  # noqa: E501
            redirect_failure (str): A URL which the browser is redirected to on non-completion of a transaction.. [optional]  # noqa: E501
            redirect_success (str): A URL which the browser is redirected to on authorisation of a transaction.. [optional]  # noqa: E501
            renderer (str): The Paylink renderer engine to use.. [optional]  # noqa: E501
            return_params (bool): If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.. [optional]  # noqa: E501
            ui (PaylinkUI): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PaylinkConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            acs_mode (str): Specifies the approach to be adopted by the Paylink form when displaying a 3-D Secure challenge window. The values may be  iframe: shows the 3-D Secure ACS in an iframe dialog, neatly embedding it in Paylink. This provides a more seamless flow for the cardholder who is able to validate and authenticate their card using a dialog provided by their card issuer.  inline: an inline mode transfers the full browser window to the authentication server, allowing the payment cardholder to see their payment card issuer's URL and the certificate status in the browser. If you request an iframe mode and the browser width is deemed as being small (< 768px) then an inline mode will be enforced. This is to ensure that mobile users have an improved user experience. . [optional]  # noqa: E501
            custom_params ([PaylinkCustomParam]): [optional]  # noqa: E501
            descriptor (str): Directly specify the merchant descriptor used for the transaction to be displayed on the payment page.. [optional]  # noqa: E501
            expire_in (str): Specifies a period of time in seconds after which the token cannot be used. A value of 0 defines that the token will never expire. The API will convert an expiry time based on a string value. For instance:   s - Time in seconds, for example 90s.   m - Time in minutes, for example 20m.   h - Time in hours, for example 4h.   w - Time in weeks, for example 4w.   M - Time in months, for example 6M.   y - Time in years, for example 1y.   Defaults to 30 minutes. . [optional]  # noqa: E501
            field_guard ([PaylinkFieldGuardModel]): [optional]  # noqa: E501
            lock_params ([str]): [optional]  # noqa: E501
            merch_logo (str): A URL of a logo to include in the form. The URL should be delivered using HTTPS.. [optional]  # noqa: E501
            merch_terms (str): A URL of the merchant terms and conditions for payment. If a value is supplied, a checkbox will be required to be completed to confirm that the cardholder agrees to these conditions before payment. A modal dialogue is displayed with the content of the conditions displayed.. [optional]  # noqa: E501
            options ([str]): [optional]  # noqa: E501
            part_payments (PaylinkPartPayments): [optional]  # noqa: E501
            pass_through_data ({str: (str,)}): [optional]  # noqa: E501
            pass_through_headers ({str: (str,)}): [optional]  # noqa: E501
            postback (str): Specifies a URL to use for a call back when the payment is completed. see Postback Handling }.. [optional]  # noqa: E501
            postback_password (str): A password to be added to the postback for HTTP Basic Authentication.. [optional]  # noqa: E501
            postback_policy (str): The policy setting for the postback see Postback Handling.. [optional]  # noqa: E501
            postback_username (str): A username to be added to the postback for HTTP Basic Authentication.. [optional]  # noqa: E501
            redirect_delay (int): A value which can delay the redirection in seconds. A value of 0 will redirect immediately.. [optional]  # noqa: E501
            redirect_failure (str): A URL which the browser is redirected to on non-completion of a transaction.. [optional]  # noqa: E501
            redirect_success (str): A URL which the browser is redirected to on authorisation of a transaction.. [optional]  # noqa: E501
            renderer (str): The Paylink renderer engine to use.. [optional]  # noqa: E501
            return_params (bool): If a value of true is specified, any redirection will include the transaction result in parameters. It is recommended to use the postback integration rather than redirection parameters.. [optional]  # noqa: E501
            ui (PaylinkUI): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
