"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from citypay.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from citypay.exceptions import ApiAttributeError



class Card(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('expmonth',): {
            'inclusive_maximum': 12,
            'inclusive_minimum': 1,
        },
        ('expyear',): {
            'inclusive_maximum': 2100,
            'inclusive_minimum': 2000,
        },
        ('name_on_card',): {
            'max_length': 45,
            'min_length': 2,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'bin_commercial': (bool,),  # noqa: E501
            'bin_corporate': (bool,),  # noqa: E501
            'bin_country_issued': (str,),  # noqa: E501
            'bin_credit': (bool,),  # noqa: E501
            'bin_currency': (str,),  # noqa: E501
            'bin_debit': (bool,),  # noqa: E501
            'bin_description': (str,),  # noqa: E501
            'bin_eu': (bool,),  # noqa: E501
            'card_id': (str,),  # noqa: E501
            'card_status': (str,),  # noqa: E501
            'date_created': (datetime,),  # noqa: E501
            'default': (bool,),  # noqa: E501
            'expmonth': (int,),  # noqa: E501
            'expyear': (int,),  # noqa: E501
            'label': (str,),  # noqa: E501
            'label2': (str,),  # noqa: E501
            'last4digits': (str,),  # noqa: E501
            'name_on_card': (str,),  # noqa: E501
            'scheme': (str,),  # noqa: E501
            'token': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'bin_commercial': 'bin_commercial',  # noqa: E501
        'bin_corporate': 'bin_corporate',  # noqa: E501
        'bin_country_issued': 'bin_country_issued',  # noqa: E501
        'bin_credit': 'bin_credit',  # noqa: E501
        'bin_currency': 'bin_currency',  # noqa: E501
        'bin_debit': 'bin_debit',  # noqa: E501
        'bin_description': 'bin_description',  # noqa: E501
        'bin_eu': 'bin_eu',  # noqa: E501
        'card_id': 'card_id',  # noqa: E501
        'card_status': 'card_status',  # noqa: E501
        'date_created': 'date_created',  # noqa: E501
        'default': 'default',  # noqa: E501
        'expmonth': 'expmonth',  # noqa: E501
        'expyear': 'expyear',  # noqa: E501
        'label': 'label',  # noqa: E501
        'label2': 'label2',  # noqa: E501
        'last4digits': 'last4digits',  # noqa: E501
        'name_on_card': 'name_on_card',  # noqa: E501
        'scheme': 'scheme',  # noqa: E501
        'token': 'token',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Card - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            bin_commercial (bool): Defines whether the card is a commercial card.. [optional]  # noqa: E501
            bin_corporate (bool): Defines whether the card is a corporate business card.. [optional]  # noqa: E501
            bin_country_issued (str): The determined country where the card was issued.. [optional]  # noqa: E501
            bin_credit (bool): Defines whether the card is a credit card.. [optional]  # noqa: E501
            bin_currency (str): The default currency determined for the card.. [optional]  # noqa: E501
            bin_debit (bool): Defines whether the card is a debit card.. [optional]  # noqa: E501
            bin_description (str): A description of the bin on the card to identify what type of product the card is.. [optional]  # noqa: E501
            bin_eu (bool): Defines whether the card is regulated within the EU.. [optional]  # noqa: E501
            card_id (str): The id of the card that is returned. Should be used for referencing the card when perform any changes.. [optional]  # noqa: E501
            card_status (str): The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. . [optional]  # noqa: E501
            date_created (datetime): The date time of when the card was created.. [optional]  # noqa: E501
            default (bool): Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.. [optional]  # noqa: E501
            expmonth (int): The expiry month of the card.. [optional]  # noqa: E501
            expyear (int): The expiry year of the card.. [optional]  # noqa: E501
            label (str): A label which identifies this card.. [optional]  # noqa: E501
            label2 (str): A label which also provides the expiry date of the card.. [optional]  # noqa: E501
            last4digits (str): The last 4 digits of the card to aid in identification.. [optional]  # noqa: E501
            name_on_card (str): The name on the card.. [optional]  # noqa: E501
            scheme (str): The scheme that issued the card.. [optional]  # noqa: E501
            token (str): A token that can be used to process against the card.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Card - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            bin_commercial (bool): Defines whether the card is a commercial card.. [optional]  # noqa: E501
            bin_corporate (bool): Defines whether the card is a corporate business card.. [optional]  # noqa: E501
            bin_country_issued (str): The determined country where the card was issued.. [optional]  # noqa: E501
            bin_credit (bool): Defines whether the card is a credit card.. [optional]  # noqa: E501
            bin_currency (str): The default currency determined for the card.. [optional]  # noqa: E501
            bin_debit (bool): Defines whether the card is a debit card.. [optional]  # noqa: E501
            bin_description (str): A description of the bin on the card to identify what type of product the card is.. [optional]  # noqa: E501
            bin_eu (bool): Defines whether the card is regulated within the EU.. [optional]  # noqa: E501
            card_id (str): The id of the card that is returned. Should be used for referencing the card when perform any changes.. [optional]  # noqa: E501
            card_status (str): The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. . [optional]  # noqa: E501
            date_created (datetime): The date time of when the card was created.. [optional]  # noqa: E501
            default (bool): Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.. [optional]  # noqa: E501
            expmonth (int): The expiry month of the card.. [optional]  # noqa: E501
            expyear (int): The expiry year of the card.. [optional]  # noqa: E501
            label (str): A label which identifies this card.. [optional]  # noqa: E501
            label2 (str): A label which also provides the expiry date of the card.. [optional]  # noqa: E501
            last4digits (str): The last 4 digits of the card to aid in identification.. [optional]  # noqa: E501
            name_on_card (str): The name on the card.. [optional]  # noqa: E501
            scheme (str): The scheme that issued the card.. [optional]  # noqa: E501
            token (str): A token that can be used to process against the card.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
