# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import flowgraph_pb2 as flowgraph__pb2


class TaskGraphStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunTaskGraph = channel.unary_unary(
                '/TaskGraph/RunTaskGraph',
                request_serializer=flowgraph__pb2.GenericGrpcRequest.SerializeToString,
                response_deserializer=flowgraph__pb2.GenericGrpcResponse.FromString,
                )
        self.GetTaskGraphList = channel.unary_unary(
                '/TaskGraph/GetTaskGraphList',
                request_serializer=flowgraph__pb2.GenericGrpcRequest.SerializeToString,
                response_deserializer=flowgraph__pb2.GenericGrpcResponse.FromString,
                )
        self.GetTaskGraph = channel.unary_unary(
                '/TaskGraph/GetTaskGraph',
                request_serializer=flowgraph__pb2.GenericGrpcRequest.SerializeToString,
                response_deserializer=flowgraph__pb2.GenericGrpcResponse.FromString,
                )
        self.GetTaskOutput = channel.unary_unary(
                '/TaskGraph/GetTaskOutput',
                request_serializer=flowgraph__pb2.GenericGrpcRequest.SerializeToString,
                response_deserializer=flowgraph__pb2.GenericGrpcResponse.FromString,
                )
        self.DeleteTaskGraph = channel.unary_unary(
                '/TaskGraph/DeleteTaskGraph',
                request_serializer=flowgraph__pb2.GenericGrpcRequest.SerializeToString,
                response_deserializer=flowgraph__pb2.GenericGrpcResponse.FromString,
                )


class TaskGraphServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RunTaskGraph(self, request, context):
        """基于声明文件运行一个任务图

        request.data: 
        ```
        {
        # 任务图的配置
        graph_config: SARecord
        # 启动参数，传递给 TaskPolling 实例
        running_params: SARecord
        restore: bool
        }
        ```

        response.data
        ```
        {
        status: int
        graph_name: string
        }
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskGraphList(self, request, context):
        """查询该服务器上所有的任务图
        request.data: `None`

        response.data: `TaskGraphInfo[]`
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskGraph(self, request, context):
        """获取某个任务图的相关信息
        request.data:
        ```
        {
        graph_name: string
        keys: string[]
        }
        ```

        response.data:
        ```
        {
        key1: any,
        key2: any,
        ...
        }
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskOutput(self, request, context):
        """取回某个任务的某个结果文件
        request.data:
        ```
        {
        graph_name: string
        task_name: string
        output_key: string
        }
        ```

        response.data:
        ```
        {
        type: 'plain' | 'tsv' | 'binary'
        data: any
        }
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTaskGraph(self, request, context):
        """删除任务图
        request.data
        ```
        {
        graph_name: string
        }
        ```

        response.data
        ```
        {
        errcode: int
        message: string
        }
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskGraphServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunTaskGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTaskGraph,
                    request_deserializer=flowgraph__pb2.GenericGrpcRequest.FromString,
                    response_serializer=flowgraph__pb2.GenericGrpcResponse.SerializeToString,
            ),
            'GetTaskGraphList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskGraphList,
                    request_deserializer=flowgraph__pb2.GenericGrpcRequest.FromString,
                    response_serializer=flowgraph__pb2.GenericGrpcResponse.SerializeToString,
            ),
            'GetTaskGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskGraph,
                    request_deserializer=flowgraph__pb2.GenericGrpcRequest.FromString,
                    response_serializer=flowgraph__pb2.GenericGrpcResponse.SerializeToString,
            ),
            'GetTaskOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskOutput,
                    request_deserializer=flowgraph__pb2.GenericGrpcRequest.FromString,
                    response_serializer=flowgraph__pb2.GenericGrpcResponse.SerializeToString,
            ),
            'DeleteTaskGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTaskGraph,
                    request_deserializer=flowgraph__pb2.GenericGrpcRequest.FromString,
                    response_serializer=flowgraph__pb2.GenericGrpcResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskGraph', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskGraph(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RunTaskGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskGraph/RunTaskGraph',
            flowgraph__pb2.GenericGrpcRequest.SerializeToString,
            flowgraph__pb2.GenericGrpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskGraphList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskGraph/GetTaskGraphList',
            flowgraph__pb2.GenericGrpcRequest.SerializeToString,
            flowgraph__pb2.GenericGrpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskGraph/GetTaskGraph',
            flowgraph__pb2.GenericGrpcRequest.SerializeToString,
            flowgraph__pb2.GenericGrpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTaskOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskGraph/GetTaskOutput',
            flowgraph__pb2.GenericGrpcRequest.SerializeToString,
            flowgraph__pb2.GenericGrpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTaskGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskGraph/DeleteTaskGraph',
            flowgraph__pb2.GenericGrpcRequest.SerializeToString,
            flowgraph__pb2.GenericGrpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)