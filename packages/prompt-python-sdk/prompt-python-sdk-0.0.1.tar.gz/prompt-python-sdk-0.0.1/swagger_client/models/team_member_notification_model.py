# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamMemberNotificationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_groups': 'list[NotificationGroupModel]',
        'vacation': 'bool',
        'hide_system_messages': 'bool'
    }

    attribute_map = {
        'notification_groups': 'notificationGroups',
        'vacation': 'vacation',
        'hide_system_messages': 'hideSystemMessages'
    }

    def __init__(self, notification_groups=None, vacation=None, hide_system_messages=None):  # noqa: E501
        """TeamMemberNotificationModel - a model defined in Swagger"""  # noqa: E501
        self._notification_groups = None
        self._vacation = None
        self._hide_system_messages = None
        self.discriminator = None
        self.notification_groups = notification_groups
        if vacation is not None:
            self.vacation = vacation
        if hide_system_messages is not None:
            self.hide_system_messages = hide_system_messages

    @property
    def notification_groups(self):
        """Gets the notification_groups of this TeamMemberNotificationModel.  # noqa: E501

        The Notification preferences.  # noqa: E501

        :return: The notification_groups of this TeamMemberNotificationModel.  # noqa: E501
        :rtype: list[NotificationGroupModel]
        """
        return self._notification_groups

    @notification_groups.setter
    def notification_groups(self, notification_groups):
        """Sets the notification_groups of this TeamMemberNotificationModel.

        The Notification preferences.  # noqa: E501

        :param notification_groups: The notification_groups of this TeamMemberNotificationModel.  # noqa: E501
        :type: list[NotificationGroupModel]
        """
        if notification_groups is None:
            raise ValueError("Invalid value for `notification_groups`, must not be `None`")  # noqa: E501

        self._notification_groups = notification_groups

    @property
    def vacation(self):
        """Gets the vacation of this TeamMemberNotificationModel.  # noqa: E501


        :return: The vacation of this TeamMemberNotificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._vacation

    @vacation.setter
    def vacation(self, vacation):
        """Sets the vacation of this TeamMemberNotificationModel.


        :param vacation: The vacation of this TeamMemberNotificationModel.  # noqa: E501
        :type: bool
        """

        self._vacation = vacation

    @property
    def hide_system_messages(self):
        """Gets the hide_system_messages of this TeamMemberNotificationModel.  # noqa: E501


        :return: The hide_system_messages of this TeamMemberNotificationModel.  # noqa: E501
        :rtype: bool
        """
        return self._hide_system_messages

    @hide_system_messages.setter
    def hide_system_messages(self, hide_system_messages):
        """Sets the hide_system_messages of this TeamMemberNotificationModel.


        :param hide_system_messages: The hide_system_messages of this TeamMemberNotificationModel.  # noqa: E501
        :type: bool
        """

        self._hide_system_messages = hide_system_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamMemberNotificationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamMemberNotificationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
