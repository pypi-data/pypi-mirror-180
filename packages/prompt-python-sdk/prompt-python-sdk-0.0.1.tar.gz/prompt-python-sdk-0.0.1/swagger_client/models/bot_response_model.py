# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'display_name': 'str',
        'created_timestamp': 'int',
        'user_type': 'str',
        'name': 'str',
        'api_id': 'str',
        'behavior_type': 'str',
        'type': 'str',
        'avatar_url': 'str',
        'intents': 'list[BotIntentModel]'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'created_timestamp': 'createdTimestamp',
        'user_type': 'userType',
        'name': 'name',
        'api_id': 'apiId',
        'behavior_type': 'behaviorType',
        'type': 'type',
        'avatar_url': 'avatarUrl',
        'intents': 'intents'
    }

    def __init__(self, id=None, display_name=None, created_timestamp=None, user_type=None, name=None, api_id=None, behavior_type=None, type=None, avatar_url=None, intents=None):  # noqa: E501
        """BotResponseModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._created_timestamp = None
        self._user_type = None
        self._name = None
        self._api_id = None
        self._behavior_type = None
        self._type = None
        self._avatar_url = None
        self._intents = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if user_type is not None:
            self.user_type = user_type
        if name is not None:
            self.name = name
        if api_id is not None:
            self.api_id = api_id
        if behavior_type is not None:
            self.behavior_type = behavior_type
        self.type = type
        self.avatar_url = avatar_url
        if intents is not None:
            self.intents = intents

    @property
    def id(self):
        """Gets the id of this BotResponseModel.  # noqa: E501

        The system generated unique id for this user.  # noqa: E501

        :return: The id of this BotResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BotResponseModel.

        The system generated unique id for this user.  # noqa: E501

        :param id: The id of this BotResponseModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this BotResponseModel.  # noqa: E501

        The display name of this user.  # noqa: E501

        :return: The display_name of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BotResponseModel.

        The display name of this user.  # noqa: E501

        :param display_name: The display_name of this BotResponseModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this BotResponseModel.  # noqa: E501

        The time the user was created.  # noqa: E501

        :return: The created_timestamp of this BotResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this BotResponseModel.

        The time the user was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this BotResponseModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def user_type(self):
        """Gets the user_type of this BotResponseModel.  # noqa: E501

        The user type for this team member.  # noqa: E501

        :return: The user_type of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this BotResponseModel.

        The user type for this team member.  # noqa: E501

        :param user_type: The user_type of this BotResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEAM_MEMBER", "CUSTOMER", "BOT", "SYSTEM", "TROUBLESHOOTING", "INSTANT_APP"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def name(self):
        """Gets the name of this BotResponseModel.  # noqa: E501

        The name of this bot.  # noqa: E501

        :return: The name of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BotResponseModel.

        The name of this bot.  # noqa: E501

        :param name: The name of this BotResponseModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_id(self):
        """Gets the api_id of this BotResponseModel.  # noqa: E501

        The programmatic, unique id of this bot.  # noqa: E501

        :return: The api_id of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._api_id

    @api_id.setter
    def api_id(self, api_id):
        """Sets the api_id of this BotResponseModel.

        The programmatic, unique id of this bot.  # noqa: E501

        :param api_id: The api_id of this BotResponseModel.  # noqa: E501
        :type: str
        """

        self._api_id = api_id

    @property
    def behavior_type(self):
        """Gets the behavior_type of this BotResponseModel.  # noqa: E501

        Specify when this bot will respond, depending on agent activity in this conversation.  # noqa: E501

        :return: The behavior_type of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._behavior_type

    @behavior_type.setter
    def behavior_type(self, behavior_type):
        """Sets the behavior_type of this BotResponseModel.

        Specify when this bot will respond, depending on agent activity in this conversation.  # noqa: E501

        :param behavior_type: The behavior_type of this BotResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NO_AGENT", "INACTIVE_AGENTS", "ALWAYS"]  # noqa: E501
        if behavior_type not in allowed_values:
            raise ValueError(
                "Invalid value for `behavior_type` ({0}), must be one of {1}"  # noqa: E501
                .format(behavior_type, allowed_values)
            )

        self._behavior_type = behavior_type

    @property
    def type(self):
        """Gets the type of this BotResponseModel.  # noqa: E501

        The type of this bot  # noqa: E501

        :return: The type of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BotResponseModel.

        The type of this bot  # noqa: E501

        :param type: The type of this BotResponseModel.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ALTERRA", "CUSTOM", "KEYWORD", "START_STOP", "BOOT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def avatar_url(self):
        """Gets the avatar_url of this BotResponseModel.  # noqa: E501

        The url of the avatar for this bot to use when posting in live chat.  # noqa: E501

        :return: The avatar_url of this BotResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this BotResponseModel.

        The url of the avatar for this bot to use when posting in live chat.  # noqa: E501

        :param avatar_url: The avatar_url of this BotResponseModel.  # noqa: E501
        :type: str
        """
        if avatar_url is None:
            raise ValueError("Invalid value for `avatar_url`, must not be `None`")  # noqa: E501

        self._avatar_url = avatar_url

    @property
    def intents(self):
        """Gets the intents of this BotResponseModel.  # noqa: E501

        List of intents for this bot.  # noqa: E501

        :return: The intents of this BotResponseModel.  # noqa: E501
        :rtype: list[BotIntentModel]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this BotResponseModel.

        List of intents for this bot.  # noqa: E501

        :param intents: The intents of this BotResponseModel.  # noqa: E501
        :type: list[BotIntentModel]
        """

        self._intents = intents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
