# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationGroupModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trigger': 'str',
        'send_sound': 'bool',
        'sound_url': 'str',
        'sound_volume': 'int',
        'sound_repeat_interval': 'int',
        'send_sms': 'bool',
        'phone_number': 'str',
        'send_email': 'bool',
        'slack_username': 'str',
        'slack_channel': 'str',
        'send_to_slack_username': 'bool',
        'mention_slack_user_name_in_channel': 'bool'
    }

    attribute_map = {
        'trigger': 'trigger',
        'send_sound': 'sendSound',
        'sound_url': 'soundUrl',
        'sound_volume': 'soundVolume',
        'sound_repeat_interval': 'soundRepeatInterval',
        'send_sms': 'sendSms',
        'phone_number': 'phoneNumber',
        'send_email': 'sendEmail',
        'slack_username': 'slackUsername',
        'slack_channel': 'slackChannel',
        'send_to_slack_username': 'sendToSlackUsername',
        'mention_slack_user_name_in_channel': 'mentionSlackUserNameInChannel'
    }

    def __init__(self, trigger=None, send_sound=None, sound_url=None, sound_volume=None, sound_repeat_interval=None, send_sms=None, phone_number=None, send_email=None, slack_username=None, slack_channel=None, send_to_slack_username=None, mention_slack_user_name_in_channel=None):  # noqa: E501
        """NotificationGroupModel - a model defined in Swagger"""  # noqa: E501
        self._trigger = None
        self._send_sound = None
        self._sound_url = None
        self._sound_volume = None
        self._sound_repeat_interval = None
        self._send_sms = None
        self._phone_number = None
        self._send_email = None
        self._slack_username = None
        self._slack_channel = None
        self._send_to_slack_username = None
        self._mention_slack_user_name_in_channel = None
        self.discriminator = None
        if trigger is not None:
            self.trigger = trigger
        if send_sound is not None:
            self.send_sound = send_sound
        if sound_url is not None:
            self.sound_url = sound_url
        if sound_volume is not None:
            self.sound_volume = sound_volume
        if sound_repeat_interval is not None:
            self.sound_repeat_interval = sound_repeat_interval
        if send_sms is not None:
            self.send_sms = send_sms
        if phone_number is not None:
            self.phone_number = phone_number
        if send_email is not None:
            self.send_email = send_email
        if slack_username is not None:
            self.slack_username = slack_username
        if slack_channel is not None:
            self.slack_channel = slack_channel
        if send_to_slack_username is not None:
            self.send_to_slack_username = send_to_slack_username
        if mention_slack_user_name_in_channel is not None:
            self.mention_slack_user_name_in_channel = mention_slack_user_name_in_channel

    @property
    def trigger(self):
        """Gets the trigger of this NotificationGroupModel.  # noqa: E501

        The event that triggers this notification to fire  # noqa: E501

        :return: The trigger of this NotificationGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this NotificationGroupModel.

        The event that triggers this notification to fire  # noqa: E501

        :param trigger: The trigger of this NotificationGroupModel.  # noqa: E501
        :type: str
        """

        self._trigger = trigger

    @property
    def send_sound(self):
        """Gets the send_sound of this NotificationGroupModel.  # noqa: E501


        :return: The send_sound of this NotificationGroupModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_sound

    @send_sound.setter
    def send_sound(self, send_sound):
        """Sets the send_sound of this NotificationGroupModel.


        :param send_sound: The send_sound of this NotificationGroupModel.  # noqa: E501
        :type: bool
        """

        self._send_sound = send_sound

    @property
    def sound_url(self):
        """Gets the sound_url of this NotificationGroupModel.  # noqa: E501


        :return: The sound_url of this NotificationGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._sound_url

    @sound_url.setter
    def sound_url(self, sound_url):
        """Sets the sound_url of this NotificationGroupModel.


        :param sound_url: The sound_url of this NotificationGroupModel.  # noqa: E501
        :type: str
        """

        self._sound_url = sound_url

    @property
    def sound_volume(self):
        """Gets the sound_volume of this NotificationGroupModel.  # noqa: E501


        :return: The sound_volume of this NotificationGroupModel.  # noqa: E501
        :rtype: int
        """
        return self._sound_volume

    @sound_volume.setter
    def sound_volume(self, sound_volume):
        """Sets the sound_volume of this NotificationGroupModel.


        :param sound_volume: The sound_volume of this NotificationGroupModel.  # noqa: E501
        :type: int
        """

        self._sound_volume = sound_volume

    @property
    def sound_repeat_interval(self):
        """Gets the sound_repeat_interval of this NotificationGroupModel.  # noqa: E501


        :return: The sound_repeat_interval of this NotificationGroupModel.  # noqa: E501
        :rtype: int
        """
        return self._sound_repeat_interval

    @sound_repeat_interval.setter
    def sound_repeat_interval(self, sound_repeat_interval):
        """Sets the sound_repeat_interval of this NotificationGroupModel.


        :param sound_repeat_interval: The sound_repeat_interval of this NotificationGroupModel.  # noqa: E501
        :type: int
        """

        self._sound_repeat_interval = sound_repeat_interval

    @property
    def send_sms(self):
        """Gets the send_sms of this NotificationGroupModel.  # noqa: E501


        :return: The send_sms of this NotificationGroupModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_sms

    @send_sms.setter
    def send_sms(self, send_sms):
        """Sets the send_sms of this NotificationGroupModel.


        :param send_sms: The send_sms of this NotificationGroupModel.  # noqa: E501
        :type: bool
        """

        self._send_sms = send_sms

    @property
    def phone_number(self):
        """Gets the phone_number of this NotificationGroupModel.  # noqa: E501


        :return: The phone_number of this NotificationGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this NotificationGroupModel.


        :param phone_number: The phone_number of this NotificationGroupModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def send_email(self):
        """Gets the send_email of this NotificationGroupModel.  # noqa: E501


        :return: The send_email of this NotificationGroupModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this NotificationGroupModel.


        :param send_email: The send_email of this NotificationGroupModel.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def slack_username(self):
        """Gets the slack_username of this NotificationGroupModel.  # noqa: E501


        :return: The slack_username of this NotificationGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._slack_username

    @slack_username.setter
    def slack_username(self, slack_username):
        """Sets the slack_username of this NotificationGroupModel.


        :param slack_username: The slack_username of this NotificationGroupModel.  # noqa: E501
        :type: str
        """

        self._slack_username = slack_username

    @property
    def slack_channel(self):
        """Gets the slack_channel of this NotificationGroupModel.  # noqa: E501

        If set then a notification will be sent to this channel  # noqa: E501

        :return: The slack_channel of this NotificationGroupModel.  # noqa: E501
        :rtype: str
        """
        return self._slack_channel

    @slack_channel.setter
    def slack_channel(self, slack_channel):
        """Sets the slack_channel of this NotificationGroupModel.

        If set then a notification will be sent to this channel  # noqa: E501

        :param slack_channel: The slack_channel of this NotificationGroupModel.  # noqa: E501
        :type: str
        """

        self._slack_channel = slack_channel

    @property
    def send_to_slack_username(self):
        """Gets the send_to_slack_username of this NotificationGroupModel.  # noqa: E501


        :return: The send_to_slack_username of this NotificationGroupModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_to_slack_username

    @send_to_slack_username.setter
    def send_to_slack_username(self, send_to_slack_username):
        """Sets the send_to_slack_username of this NotificationGroupModel.


        :param send_to_slack_username: The send_to_slack_username of this NotificationGroupModel.  # noqa: E501
        :type: bool
        """

        self._send_to_slack_username = send_to_slack_username

    @property
    def mention_slack_user_name_in_channel(self):
        """Gets the mention_slack_user_name_in_channel of this NotificationGroupModel.  # noqa: E501


        :return: The mention_slack_user_name_in_channel of this NotificationGroupModel.  # noqa: E501
        :rtype: bool
        """
        return self._mention_slack_user_name_in_channel

    @mention_slack_user_name_in_channel.setter
    def mention_slack_user_name_in_channel(self, mention_slack_user_name_in_channel):
        """Sets the mention_slack_user_name_in_channel of this NotificationGroupModel.


        :param mention_slack_user_name_in_channel: The mention_slack_user_name_in_channel of this NotificationGroupModel.  # noqa: E501
        :type: bool
        """

        self._mention_slack_user_name_in_channel = mention_slack_user_name_in_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationGroupModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationGroupModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
