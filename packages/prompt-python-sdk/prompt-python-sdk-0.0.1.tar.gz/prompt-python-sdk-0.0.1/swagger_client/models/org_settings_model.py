# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgSettingsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'force_change_password': 'bool',
        'password_reset_interval': 'int',
        'require_different_password': 'bool',
        'historical_password_count': 'int',
        'google_login_enabled': 'bool',
        'custom_general_status': 'str'
    }

    attribute_map = {
        'force_change_password': 'forceChangePassword',
        'password_reset_interval': 'passwordResetInterval',
        'require_different_password': 'requireDifferentPassword',
        'historical_password_count': 'historicalPasswordCount',
        'google_login_enabled': 'googleLoginEnabled',
        'custom_general_status': 'customGeneralStatus'
    }

    def __init__(self, force_change_password=None, password_reset_interval=None, require_different_password=None, historical_password_count=None, google_login_enabled=None, custom_general_status=None):  # noqa: E501
        """OrgSettingsModel - a model defined in Swagger"""  # noqa: E501
        self._force_change_password = None
        self._password_reset_interval = None
        self._require_different_password = None
        self._historical_password_count = None
        self._google_login_enabled = None
        self._custom_general_status = None
        self.discriminator = None
        if force_change_password is not None:
            self.force_change_password = force_change_password
        if password_reset_interval is not None:
            self.password_reset_interval = password_reset_interval
        if require_different_password is not None:
            self.require_different_password = require_different_password
        if historical_password_count is not None:
            self.historical_password_count = historical_password_count
        if google_login_enabled is not None:
            self.google_login_enabled = google_login_enabled
        if custom_general_status is not None:
            self.custom_general_status = custom_general_status

    @property
    def force_change_password(self):
        """Gets the force_change_password of this OrgSettingsModel.  # noqa: E501

        Force users to change password  # noqa: E501

        :return: The force_change_password of this OrgSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._force_change_password

    @force_change_password.setter
    def force_change_password(self, force_change_password):
        """Sets the force_change_password of this OrgSettingsModel.

        Force users to change password  # noqa: E501

        :param force_change_password: The force_change_password of this OrgSettingsModel.  # noqa: E501
        :type: bool
        """

        self._force_change_password = force_change_password

    @property
    def password_reset_interval(self):
        """Gets the password_reset_interval of this OrgSettingsModel.  # noqa: E501

        The amount of days after a password is set until the next one is forced  # noqa: E501

        :return: The password_reset_interval of this OrgSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._password_reset_interval

    @password_reset_interval.setter
    def password_reset_interval(self, password_reset_interval):
        """Sets the password_reset_interval of this OrgSettingsModel.

        The amount of days after a password is set until the next one is forced  # noqa: E501

        :param password_reset_interval: The password_reset_interval of this OrgSettingsModel.  # noqa: E501
        :type: int
        """

        self._password_reset_interval = password_reset_interval

    @property
    def require_different_password(self):
        """Gets the require_different_password of this OrgSettingsModel.  # noqa: E501

        Do not allow previously used passwords to be recycled  # noqa: E501

        :return: The require_different_password of this OrgSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._require_different_password

    @require_different_password.setter
    def require_different_password(self, require_different_password):
        """Sets the require_different_password of this OrgSettingsModel.

        Do not allow previously used passwords to be recycled  # noqa: E501

        :param require_different_password: The require_different_password of this OrgSettingsModel.  # noqa: E501
        :type: bool
        """

        self._require_different_password = require_different_password

    @property
    def historical_password_count(self):
        """Gets the historical_password_count of this OrgSettingsModel.  # noqa: E501

        Number of passwords required before a past password can be used again  # noqa: E501

        :return: The historical_password_count of this OrgSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._historical_password_count

    @historical_password_count.setter
    def historical_password_count(self, historical_password_count):
        """Sets the historical_password_count of this OrgSettingsModel.

        Number of passwords required before a past password can be used again  # noqa: E501

        :param historical_password_count: The historical_password_count of this OrgSettingsModel.  # noqa: E501
        :type: int
        """

        self._historical_password_count = historical_password_count

    @property
    def google_login_enabled(self):
        """Gets the google_login_enabled of this OrgSettingsModel.  # noqa: E501

        When enabled, users will be able to log-in with their Google authenticated credentials  # noqa: E501

        :return: The google_login_enabled of this OrgSettingsModel.  # noqa: E501
        :rtype: bool
        """
        return self._google_login_enabled

    @google_login_enabled.setter
    def google_login_enabled(self, google_login_enabled):
        """Sets the google_login_enabled of this OrgSettingsModel.

        When enabled, users will be able to log-in with their Google authenticated credentials  # noqa: E501

        :param google_login_enabled: The google_login_enabled of this OrgSettingsModel.  # noqa: E501
        :type: bool
        """

        self._google_login_enabled = google_login_enabled

    @property
    def custom_general_status(self):
        """Gets the custom_general_status of this OrgSettingsModel.  # noqa: E501

        Org-wide general status  # noqa: E501

        :return: The custom_general_status of this OrgSettingsModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_general_status

    @custom_general_status.setter
    def custom_general_status(self, custom_general_status):
        """Sets the custom_general_status of this OrgSettingsModel.

        Org-wide general status  # noqa: E501

        :param custom_general_status: The custom_general_status of this OrgSettingsModel.  # noqa: E501
        :type: str
        """

        self._custom_general_status = custom_general_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgSettingsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgSettingsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
