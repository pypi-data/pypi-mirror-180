# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotIntentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'phrases': 'list[BotIntentPhraseModel]',
        'queries': 'list[str]',
        'fulfillment_model': 'BotFulfillmentModel',
        'active': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'phrases': 'phrases',
        'queries': 'queries',
        'fulfillment_model': 'fulfillmentModel',
        'active': 'active'
    }

    def __init__(self, type=None, name=None, phrases=None, queries=None, fulfillment_model=None, active=None):  # noqa: E501
        """BotIntentModel - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._name = None
        self._phrases = None
        self._queries = None
        self._fulfillment_model = None
        self._active = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if phrases is not None:
            self.phrases = phrases
        if queries is not None:
            self.queries = queries
        if fulfillment_model is not None:
            self.fulfillment_model = fulfillment_model
        if active is not None:
            self.active = active

    @property
    def type(self):
        """Gets the type of this BotIntentModel.  # noqa: E501


        :return: The type of this BotIntentModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BotIntentModel.


        :param type: The type of this BotIntentModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUSTOM", "UNKNOWN", "KEYWORD", "BOOT", "WRONG_LANGUAGE", "GARBAGE", "NO_MATCH", "IGNORE", "UPLOAD", "STOP", "START"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this BotIntentModel.  # noqa: E501


        :return: The name of this BotIntentModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BotIntentModel.


        :param name: The name of this BotIntentModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phrases(self):
        """Gets the phrases of this BotIntentModel.  # noqa: E501


        :return: The phrases of this BotIntentModel.  # noqa: E501
        :rtype: list[BotIntentPhraseModel]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this BotIntentModel.


        :param phrases: The phrases of this BotIntentModel.  # noqa: E501
        :type: list[BotIntentPhraseModel]
        """

        self._phrases = phrases

    @property
    def queries(self):
        """Gets the queries of this BotIntentModel.  # noqa: E501


        :return: The queries of this BotIntentModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this BotIntentModel.


        :param queries: The queries of this BotIntentModel.  # noqa: E501
        :type: list[str]
        """

        self._queries = queries

    @property
    def fulfillment_model(self):
        """Gets the fulfillment_model of this BotIntentModel.  # noqa: E501


        :return: The fulfillment_model of this BotIntentModel.  # noqa: E501
        :rtype: BotFulfillmentModel
        """
        return self._fulfillment_model

    @fulfillment_model.setter
    def fulfillment_model(self, fulfillment_model):
        """Sets the fulfillment_model of this BotIntentModel.


        :param fulfillment_model: The fulfillment_model of this BotIntentModel.  # noqa: E501
        :type: BotFulfillmentModel
        """

        self._fulfillment_model = fulfillment_model

    @property
    def active(self):
        """Gets the active of this BotIntentModel.  # noqa: E501


        :return: The active of this BotIntentModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this BotIntentModel.


        :param active: The active of this BotIntentModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotIntentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotIntentModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
