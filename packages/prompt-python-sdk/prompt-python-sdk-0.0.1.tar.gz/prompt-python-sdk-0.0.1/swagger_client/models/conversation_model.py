# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'org_channel_id': 'int',
        'customer_channel_id': 'int',
        'created_timestamp': 'int',
        'last_updated_timestamp': 'int',
        'conversation_members': 'list[ConversationMemberModel]',
        'conversation_bots': 'list[ConversationBotModel]',
        'status': 'str',
        'first_customer_message': 'MessageModel',
        'topic': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_channel_id': 'orgChannelId',
        'customer_channel_id': 'customerChannelId',
        'created_timestamp': 'createdTimestamp',
        'last_updated_timestamp': 'lastUpdatedTimestamp',
        'conversation_members': 'conversationMembers',
        'conversation_bots': 'conversationBots',
        'status': 'status',
        'first_customer_message': 'firstCustomerMessage',
        'topic': 'topic'
    }

    def __init__(self, id=None, org_channel_id=None, customer_channel_id=None, created_timestamp=None, last_updated_timestamp=None, conversation_members=None, conversation_bots=None, status=None, first_customer_message=None, topic=None):  # noqa: E501
        """ConversationModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._org_channel_id = None
        self._customer_channel_id = None
        self._created_timestamp = None
        self._last_updated_timestamp = None
        self._conversation_members = None
        self._conversation_bots = None
        self._status = None
        self._first_customer_message = None
        self._topic = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if org_channel_id is not None:
            self.org_channel_id = org_channel_id
        if customer_channel_id is not None:
            self.customer_channel_id = customer_channel_id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if last_updated_timestamp is not None:
            self.last_updated_timestamp = last_updated_timestamp
        if conversation_members is not None:
            self.conversation_members = conversation_members
        if conversation_bots is not None:
            self.conversation_bots = conversation_bots
        if status is not None:
            self.status = status
        if first_customer_message is not None:
            self.first_customer_message = first_customer_message
        if topic is not None:
            self.topic = topic

    @property
    def id(self):
        """Gets the id of this ConversationModel.  # noqa: E501


        :return: The id of this ConversationModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationModel.


        :param id: The id of this ConversationModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org_channel_id(self):
        """Gets the org_channel_id of this ConversationModel.  # noqa: E501


        :return: The org_channel_id of this ConversationModel.  # noqa: E501
        :rtype: int
        """
        return self._org_channel_id

    @org_channel_id.setter
    def org_channel_id(self, org_channel_id):
        """Sets the org_channel_id of this ConversationModel.


        :param org_channel_id: The org_channel_id of this ConversationModel.  # noqa: E501
        :type: int
        """

        self._org_channel_id = org_channel_id

    @property
    def customer_channel_id(self):
        """Gets the customer_channel_id of this ConversationModel.  # noqa: E501


        :return: The customer_channel_id of this ConversationModel.  # noqa: E501
        :rtype: int
        """
        return self._customer_channel_id

    @customer_channel_id.setter
    def customer_channel_id(self, customer_channel_id):
        """Sets the customer_channel_id of this ConversationModel.


        :param customer_channel_id: The customer_channel_id of this ConversationModel.  # noqa: E501
        :type: int
        """

        self._customer_channel_id = customer_channel_id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ConversationModel.  # noqa: E501


        :return: The created_timestamp of this ConversationModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ConversationModel.


        :param created_timestamp: The created_timestamp of this ConversationModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def last_updated_timestamp(self):
        """Gets the last_updated_timestamp of this ConversationModel.  # noqa: E501


        :return: The last_updated_timestamp of this ConversationModel.  # noqa: E501
        :rtype: int
        """
        return self._last_updated_timestamp

    @last_updated_timestamp.setter
    def last_updated_timestamp(self, last_updated_timestamp):
        """Sets the last_updated_timestamp of this ConversationModel.


        :param last_updated_timestamp: The last_updated_timestamp of this ConversationModel.  # noqa: E501
        :type: int
        """

        self._last_updated_timestamp = last_updated_timestamp

    @property
    def conversation_members(self):
        """Gets the conversation_members of this ConversationModel.  # noqa: E501


        :return: The conversation_members of this ConversationModel.  # noqa: E501
        :rtype: list[ConversationMemberModel]
        """
        return self._conversation_members

    @conversation_members.setter
    def conversation_members(self, conversation_members):
        """Sets the conversation_members of this ConversationModel.


        :param conversation_members: The conversation_members of this ConversationModel.  # noqa: E501
        :type: list[ConversationMemberModel]
        """

        self._conversation_members = conversation_members

    @property
    def conversation_bots(self):
        """Gets the conversation_bots of this ConversationModel.  # noqa: E501


        :return: The conversation_bots of this ConversationModel.  # noqa: E501
        :rtype: list[ConversationBotModel]
        """
        return self._conversation_bots

    @conversation_bots.setter
    def conversation_bots(self, conversation_bots):
        """Sets the conversation_bots of this ConversationModel.


        :param conversation_bots: The conversation_bots of this ConversationModel.  # noqa: E501
        :type: list[ConversationBotModel]
        """

        self._conversation_bots = conversation_bots

    @property
    def status(self):
        """Gets the status of this ConversationModel.  # noqa: E501


        :return: The status of this ConversationModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConversationModel.


        :param status: The status of this ConversationModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "UNASSIGNED", "QUEUED", "ACTIVE", "COMPLETE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def first_customer_message(self):
        """Gets the first_customer_message of this ConversationModel.  # noqa: E501


        :return: The first_customer_message of this ConversationModel.  # noqa: E501
        :rtype: MessageModel
        """
        return self._first_customer_message

    @first_customer_message.setter
    def first_customer_message(self, first_customer_message):
        """Sets the first_customer_message of this ConversationModel.


        :param first_customer_message: The first_customer_message of this ConversationModel.  # noqa: E501
        :type: MessageModel
        """

        self._first_customer_message = first_customer_message

    @property
    def topic(self):
        """Gets the topic of this ConversationModel.  # noqa: E501


        :return: The topic of this ConversationModel.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ConversationModel.


        :param topic: The topic of this ConversationModel.  # noqa: E501
        :type: str
        """

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
