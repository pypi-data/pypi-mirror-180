# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateMembershipCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest': 'str',
        'target_group': 'str',
        'target_team_member_id': 'int'
    }

    attribute_map = {
        'dest': 'dest',
        'target_group': 'targetGroup',
        'target_team_member_id': 'targetTeamMemberId'
    }

    def __init__(self, dest=None, target_group=None, target_team_member_id=None):  # noqa: E501
        """UpdateMembershipCommand - a model defined in Swagger"""  # noqa: E501
        self._dest = None
        self._target_group = None
        self._target_team_member_id = None
        self.discriminator = None
        self.dest = dest
        if target_group is not None:
            self.target_group = target_group
        if target_team_member_id is not None:
            self.target_team_member_id = target_team_member_id

    @property
    def dest(self):
        """Gets the dest of this UpdateMembershipCommand.  # noqa: E501

        The desired destination to move the target to  # noqa: E501

        :return: The dest of this UpdateMembershipCommand.  # noqa: E501
        :rtype: str
        """
        return self._dest

    @dest.setter
    def dest(self, dest):
        """Sets the dest of this UpdateMembershipCommand.

        The desired destination to move the target to  # noqa: E501

        :param dest: The dest of this UpdateMembershipCommand.  # noqa: E501
        :type: str
        """
        if dest is None:
            raise ValueError("Invalid value for `dest`, must not be `None`")  # noqa: E501
        allowed_values = ["INBOX", "CHAT", "CHAT_SELECTED", "GONE"]  # noqa: E501
        if dest not in allowed_values:
            raise ValueError(
                "Invalid value for `dest` ({0}), must be one of {1}"  # noqa: E501
                .format(dest, allowed_values)
            )

        self._dest = dest

    @property
    def target_group(self):
        """Gets the target_group of this UpdateMembershipCommand.  # noqa: E501

        Target group API id to move to dest, or '*' for all  # noqa: E501

        :return: The target_group of this UpdateMembershipCommand.  # noqa: E501
        :rtype: str
        """
        return self._target_group

    @target_group.setter
    def target_group(self, target_group):
        """Sets the target_group of this UpdateMembershipCommand.

        Target group API id to move to dest, or '*' for all  # noqa: E501

        :param target_group: The target_group of this UpdateMembershipCommand.  # noqa: E501
        :type: str
        """

        self._target_group = target_group

    @property
    def target_team_member_id(self):
        """Gets the target_team_member_id of this UpdateMembershipCommand.  # noqa: E501

        Target team memeber to move to dest  # noqa: E501

        :return: The target_team_member_id of this UpdateMembershipCommand.  # noqa: E501
        :rtype: int
        """
        return self._target_team_member_id

    @target_team_member_id.setter
    def target_team_member_id(self, target_team_member_id):
        """Sets the target_team_member_id of this UpdateMembershipCommand.

        Target team memeber to move to dest  # noqa: E501

        :param target_team_member_id: The target_team_member_id of this UpdateMembershipCommand.  # noqa: E501
        :type: int
        """

        self._target_team_member_id = target_team_member_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateMembershipCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateMembershipCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
