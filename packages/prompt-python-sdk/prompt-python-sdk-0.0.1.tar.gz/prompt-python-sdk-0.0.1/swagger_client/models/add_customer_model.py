# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddCustomerModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'identities': 'list[CustomerIdentityModel]',
        'tag_ids': 'list[int]',
        'global_opt_out': 'bool',
        'data': 'dict(str, str)'
    }

    attribute_map = {
        'display_name': 'displayName',
        'identities': 'identities',
        'tag_ids': 'tagIds',
        'global_opt_out': 'globalOptOut',
        'data': 'data'
    }

    def __init__(self, display_name=None, identities=None, tag_ids=None, global_opt_out=None, data=None):  # noqa: E501
        """AddCustomerModel - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._identities = None
        self._tag_ids = None
        self._global_opt_out = None
        self._data = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if identities is not None:
            self.identities = identities
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if global_opt_out is not None:
            self.global_opt_out = global_opt_out
        if data is not None:
            self.data = data

    @property
    def display_name(self):
        """Gets the display_name of this AddCustomerModel.  # noqa: E501

        The display name of this user.  # noqa: E501

        :return: The display_name of this AddCustomerModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AddCustomerModel.

        The display name of this user.  # noqa: E501

        :param display_name: The display_name of this AddCustomerModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def identities(self):
        """Gets the identities of this AddCustomerModel.  # noqa: E501

        Optional. A collection of identities for this user  # noqa: E501

        :return: The identities of this AddCustomerModel.  # noqa: E501
        :rtype: list[CustomerIdentityModel]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this AddCustomerModel.

        Optional. A collection of identities for this user  # noqa: E501

        :param identities: The identities of this AddCustomerModel.  # noqa: E501
        :type: list[CustomerIdentityModel]
        """

        self._identities = identities

    @property
    def tag_ids(self):
        """Gets the tag_ids of this AddCustomerModel.  # noqa: E501

        A collection of tags to associate with the customer  # noqa: E501

        :return: The tag_ids of this AddCustomerModel.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this AddCustomerModel.

        A collection of tags to associate with the customer  # noqa: E501

        :param tag_ids: The tag_ids of this AddCustomerModel.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def global_opt_out(self):
        """Gets the global_opt_out of this AddCustomerModel.  # noqa: E501

        Whether the customer will be opted out of messaging across all channels  # noqa: E501

        :return: The global_opt_out of this AddCustomerModel.  # noqa: E501
        :rtype: bool
        """
        return self._global_opt_out

    @global_opt_out.setter
    def global_opt_out(self, global_opt_out):
        """Sets the global_opt_out of this AddCustomerModel.

        Whether the customer will be opted out of messaging across all channels  # noqa: E501

        :param global_opt_out: The global_opt_out of this AddCustomerModel.  # noqa: E501
        :type: bool
        """

        self._global_opt_out = global_opt_out

    @property
    def data(self):
        """Gets the data of this AddCustomerModel.  # noqa: E501

        Values to store in the customer data store  # noqa: E501

        :return: The data of this AddCustomerModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AddCustomerModel.

        Values to store in the customer data store  # noqa: E501

        :param data: The data of this AddCustomerModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddCustomerModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddCustomerModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
