# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiKeyModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'token': 'str',
        'active': 'bool',
        'creator_id': 'int',
        'created_timestamp': 'int',
        'token_generator_id': 'int',
        'token_generated_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'token': 'token',
        'active': 'active',
        'creator_id': 'creatorId',
        'created_timestamp': 'createdTimestamp',
        'token_generator_id': 'tokenGeneratorId',
        'token_generated_timestamp': 'tokenGeneratedTimestamp'
    }

    def __init__(self, id=None, name=None, token=None, active=None, creator_id=None, created_timestamp=None, token_generator_id=None, token_generated_timestamp=None):  # noqa: E501
        """ApiKeyModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._token = None
        self._active = None
        self._creator_id = None
        self._created_timestamp = None
        self._token_generator_id = None
        self._token_generated_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if token is not None:
            self.token = token
        if active is not None:
            self.active = active
        if creator_id is not None:
            self.creator_id = creator_id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if token_generator_id is not None:
            self.token_generator_id = token_generator_id
        if token_generated_timestamp is not None:
            self.token_generated_timestamp = token_generated_timestamp

    @property
    def id(self):
        """Gets the id of this ApiKeyModel.  # noqa: E501

        The system generated unique id for this API Key.  # noqa: E501

        :return: The id of this ApiKeyModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKeyModel.

        The system generated unique id for this API Key.  # noqa: E501

        :param id: The id of this ApiKeyModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiKeyModel.  # noqa: E501

        A descriptive name for this API Key to show in agent UIs.  # noqa: E501

        :return: The name of this ApiKeyModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyModel.

        A descriptive name for this API Key to show in agent UIs.  # noqa: E501

        :param name: The name of this ApiKeyModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def token(self):
        """Gets the token of this ApiKeyModel.  # noqa: E501

        Requests made to the API must include this API Key Token as an HTTP header named PLACEHOLDER within the request in order to prove the request is authorized  # noqa: E501

        :return: The token of this ApiKeyModel.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ApiKeyModel.

        Requests made to the API must include this API Key Token as an HTTP header named PLACEHOLDER within the request in order to prove the request is authorized  # noqa: E501

        :param token: The token of this ApiKeyModel.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def active(self):
        """Gets the active of this ApiKeyModel.  # noqa: E501

        Whether the API Key is active.  # noqa: E501

        :return: The active of this ApiKeyModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ApiKeyModel.

        Whether the API Key is active.  # noqa: E501

        :param active: The active of this ApiKeyModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def creator_id(self):
        """Gets the creator_id of this ApiKeyModel.  # noqa: E501

        ID of the user that created the API Key.  # noqa: E501

        :return: The creator_id of this ApiKeyModel.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ApiKeyModel.

        ID of the user that created the API Key.  # noqa: E501

        :param creator_id: The creator_id of this ApiKeyModel.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ApiKeyModel.  # noqa: E501

        The time the API Key was created.  # noqa: E501

        :return: The created_timestamp of this ApiKeyModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ApiKeyModel.

        The time the API Key was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this ApiKeyModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def token_generator_id(self):
        """Gets the token_generator_id of this ApiKeyModel.  # noqa: E501

        ID of the user that generated the token.  # noqa: E501

        :return: The token_generator_id of this ApiKeyModel.  # noqa: E501
        :rtype: int
        """
        return self._token_generator_id

    @token_generator_id.setter
    def token_generator_id(self, token_generator_id):
        """Sets the token_generator_id of this ApiKeyModel.

        ID of the user that generated the token.  # noqa: E501

        :param token_generator_id: The token_generator_id of this ApiKeyModel.  # noqa: E501
        :type: int
        """

        self._token_generator_id = token_generator_id

    @property
    def token_generated_timestamp(self):
        """Gets the token_generated_timestamp of this ApiKeyModel.  # noqa: E501

        The time the token was generated.  # noqa: E501

        :return: The token_generated_timestamp of this ApiKeyModel.  # noqa: E501
        :rtype: int
        """
        return self._token_generated_timestamp

    @token_generated_timestamp.setter
    def token_generated_timestamp(self, token_generated_timestamp):
        """Sets the token_generated_timestamp of this ApiKeyModel.

        The time the token was generated.  # noqa: E501

        :param token_generated_timestamp: The token_generated_timestamp of this ApiKeyModel.  # noqa: E501
        :type: int
        """

        self._token_generated_timestamp = token_generated_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiKeyModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
