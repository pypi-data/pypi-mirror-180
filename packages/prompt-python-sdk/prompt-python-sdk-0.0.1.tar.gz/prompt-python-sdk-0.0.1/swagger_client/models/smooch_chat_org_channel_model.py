# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmoochChatOrgChannelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'smooch_app_id': 'str',
        'smooch_integration_id': 'str',
        'app_key_id': 'str',
        'app_key_secret': 'str',
        'ignore_js_customer_info': 'bool'
    }

    attribute_map = {
        'smooch_app_id': 'smoochAppId',
        'smooch_integration_id': 'smoochIntegrationId',
        'app_key_id': 'appKeyId',
        'app_key_secret': 'appKeySecret',
        'ignore_js_customer_info': 'ignoreJsCustomerInfo'
    }

    def __init__(self, smooch_app_id=None, smooch_integration_id=None, app_key_id=None, app_key_secret=None, ignore_js_customer_info=None):  # noqa: E501
        """SmoochChatOrgChannelModel - a model defined in Swagger"""  # noqa: E501
        self._smooch_app_id = None
        self._smooch_integration_id = None
        self._app_key_id = None
        self._app_key_secret = None
        self._ignore_js_customer_info = None
        self.discriminator = None
        if smooch_app_id is not None:
            self.smooch_app_id = smooch_app_id
        if smooch_integration_id is not None:
            self.smooch_integration_id = smooch_integration_id
        if app_key_id is not None:
            self.app_key_id = app_key_id
        if app_key_secret is not None:
            self.app_key_secret = app_key_secret
        if ignore_js_customer_info is not None:
            self.ignore_js_customer_info = ignore_js_customer_info

    @property
    def smooch_app_id(self):
        """Gets the smooch_app_id of this SmoochChatOrgChannelModel.  # noqa: E501

        The App Id from Smooch.  # noqa: E501

        :return: The smooch_app_id of this SmoochChatOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._smooch_app_id

    @smooch_app_id.setter
    def smooch_app_id(self, smooch_app_id):
        """Sets the smooch_app_id of this SmoochChatOrgChannelModel.

        The App Id from Smooch.  # noqa: E501

        :param smooch_app_id: The smooch_app_id of this SmoochChatOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._smooch_app_id = smooch_app_id

    @property
    def smooch_integration_id(self):
        """Gets the smooch_integration_id of this SmoochChatOrgChannelModel.  # noqa: E501

        The Web Integration Id from Smooch.  # noqa: E501

        :return: The smooch_integration_id of this SmoochChatOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._smooch_integration_id

    @smooch_integration_id.setter
    def smooch_integration_id(self, smooch_integration_id):
        """Sets the smooch_integration_id of this SmoochChatOrgChannelModel.

        The Web Integration Id from Smooch.  # noqa: E501

        :param smooch_integration_id: The smooch_integration_id of this SmoochChatOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._smooch_integration_id = smooch_integration_id

    @property
    def app_key_id(self):
        """Gets the app_key_id of this SmoochChatOrgChannelModel.  # noqa: E501

        The Key Id for the Smooch app.  # noqa: E501

        :return: The app_key_id of this SmoochChatOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._app_key_id

    @app_key_id.setter
    def app_key_id(self, app_key_id):
        """Sets the app_key_id of this SmoochChatOrgChannelModel.

        The Key Id for the Smooch app.  # noqa: E501

        :param app_key_id: The app_key_id of this SmoochChatOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._app_key_id = app_key_id

    @property
    def app_key_secret(self):
        """Gets the app_key_secret of this SmoochChatOrgChannelModel.  # noqa: E501

        The Key Secret for the Smooch app.  # noqa: E501

        :return: The app_key_secret of this SmoochChatOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._app_key_secret

    @app_key_secret.setter
    def app_key_secret(self, app_key_secret):
        """Sets the app_key_secret of this SmoochChatOrgChannelModel.

        The Key Secret for the Smooch app.  # noqa: E501

        :param app_key_secret: The app_key_secret of this SmoochChatOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._app_key_secret = app_key_secret

    @property
    def ignore_js_customer_info(self):
        """Gets the ignore_js_customer_info of this SmoochChatOrgChannelModel.  # noqa: E501

        Whether the insecure customer name and email passed from Javascript should be ignored.  # noqa: E501

        :return: The ignore_js_customer_info of this SmoochChatOrgChannelModel.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_js_customer_info

    @ignore_js_customer_info.setter
    def ignore_js_customer_info(self, ignore_js_customer_info):
        """Sets the ignore_js_customer_info of this SmoochChatOrgChannelModel.

        Whether the insecure customer name and email passed from Javascript should be ignored.  # noqa: E501

        :param ignore_js_customer_info: The ignore_js_customer_info of this SmoochChatOrgChannelModel.  # noqa: E501
        :type: bool
        """

        self._ignore_js_customer_info = ignore_js_customer_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmoochChatOrgChannelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmoochChatOrgChannelModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
