# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactListAddContactsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identity_type': 'str',
        'contacts': 'list[Contact]'
    }

    attribute_map = {
        'identity_type': 'identityType',
        'contacts': 'contacts'
    }

    def __init__(self, identity_type=None, contacts=None):  # noqa: E501
        """ContactListAddContactsModel - a model defined in Swagger"""  # noqa: E501
        self._identity_type = None
        self._contacts = None
        self.discriminator = None
        if identity_type is not None:
            self.identity_type = identity_type
        if contacts is not None:
            self.contacts = contacts

    @property
    def identity_type(self):
        """Gets the identity_type of this ContactListAddContactsModel.  # noqa: E501

        Identity type for the customer channel  # noqa: E501

        :return: The identity_type of this ContactListAddContactsModel.  # noqa: E501
        :rtype: str
        """
        return self._identity_type

    @identity_type.setter
    def identity_type(self, identity_type):
        """Sets the identity_type of this ContactListAddContactsModel.

        Identity type for the customer channel  # noqa: E501

        :param identity_type: The identity_type of this ContactListAddContactsModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMS", "FB", "CUSTOMER_EXTERNAL", "LIVE_CHAT", "LINE"]  # noqa: E501
        if identity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `identity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(identity_type, allowed_values)
            )

        self._identity_type = identity_type

    @property
    def contacts(self):
        """Gets the contacts of this ContactListAddContactsModel.  # noqa: E501

        The list of contacts to add. You may specify up to 500 contacts. The total number of contacts in the Contact List may not exceed 20,000  # noqa: E501

        :return: The contacts of this ContactListAddContactsModel.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this ContactListAddContactsModel.

        The list of contacts to add. You may specify up to 500 contacts. The total number of contacts in the Contact List may not exceed 20,000  # noqa: E501

        :param contacts: The contacts of this ContactListAddContactsModel.  # noqa: E501
        :type: list[Contact]
        """

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactListAddContactsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactListAddContactsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
