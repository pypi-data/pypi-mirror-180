# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamActivityEventModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_type': 'str',
        'activity': 'str',
        'timestamp': 'int',
        'id': 'int',
        'email': 'str',
        'active_conversations': 'int',
        'inbox_count': 'int',
        'total_slots': 'int',
        'auto_in': 'bool',
        'on_break': 'bool',
        'logged_in': 'bool',
        'connected': 'bool'
    }

    attribute_map = {
        'event_type': 'eventType',
        'activity': 'activity',
        'timestamp': 'timestamp',
        'id': 'id',
        'email': 'email',
        'active_conversations': 'activeConversations',
        'inbox_count': 'inboxCount',
        'total_slots': 'totalSlots',
        'auto_in': 'autoIn',
        'on_break': 'onBreak',
        'logged_in': 'loggedIn',
        'connected': 'connected'
    }

    def __init__(self, event_type=None, activity=None, timestamp=None, id=None, email=None, active_conversations=None, inbox_count=None, total_slots=None, auto_in=None, on_break=None, logged_in=None, connected=None):  # noqa: E501
        """TeamActivityEventModel - a model defined in Swagger"""  # noqa: E501
        self._event_type = None
        self._activity = None
        self._timestamp = None
        self._id = None
        self._email = None
        self._active_conversations = None
        self._inbox_count = None
        self._total_slots = None
        self._auto_in = None
        self._on_break = None
        self._logged_in = None
        self._connected = None
        self.discriminator = None
        if event_type is not None:
            self.event_type = event_type
        if activity is not None:
            self.activity = activity
        if timestamp is not None:
            self.timestamp = timestamp
        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if active_conversations is not None:
            self.active_conversations = active_conversations
        if inbox_count is not None:
            self.inbox_count = inbox_count
        if total_slots is not None:
            self.total_slots = total_slots
        if auto_in is not None:
            self.auto_in = auto_in
        if on_break is not None:
            self.on_break = on_break
        if logged_in is not None:
            self.logged_in = logged_in
        if connected is not None:
            self.connected = connected

    @property
    def event_type(self):
        """Gets the event_type of this TeamActivityEventModel.  # noqa: E501

        The kind of event  # noqa: E501

        :return: The event_type of this TeamActivityEventModel.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this TeamActivityEventModel.

        The kind of event  # noqa: E501

        :param event_type: The event_type of this TeamActivityEventModel.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def activity(self):
        """Gets the activity of this TeamActivityEventModel.  # noqa: E501

        If the event is on-break-on, then the reason for the break  # noqa: E501

        :return: The activity of this TeamActivityEventModel.  # noqa: E501
        :rtype: str
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this TeamActivityEventModel.

        If the event is on-break-on, then the reason for the break  # noqa: E501

        :param activity: The activity of this TeamActivityEventModel.  # noqa: E501
        :type: str
        """

        self._activity = activity

    @property
    def timestamp(self):
        """Gets the timestamp of this TeamActivityEventModel.  # noqa: E501

        Time event occurred  # noqa: E501

        :return: The timestamp of this TeamActivityEventModel.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TeamActivityEventModel.

        Time event occurred  # noqa: E501

        :param timestamp: The timestamp of this TeamActivityEventModel.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this TeamActivityEventModel.  # noqa: E501

        The team member's id  # noqa: E501

        :return: The id of this TeamActivityEventModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TeamActivityEventModel.

        The team member's id  # noqa: E501

        :param id: The id of this TeamActivityEventModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this TeamActivityEventModel.  # noqa: E501

        The team member's email  # noqa: E501

        :return: The email of this TeamActivityEventModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this TeamActivityEventModel.

        The team member's email  # noqa: E501

        :param email: The email of this TeamActivityEventModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def active_conversations(self):
        """Gets the active_conversations of this TeamActivityEventModel.  # noqa: E501

        The number of active conversation the team member has  # noqa: E501

        :return: The active_conversations of this TeamActivityEventModel.  # noqa: E501
        :rtype: int
        """
        return self._active_conversations

    @active_conversations.setter
    def active_conversations(self, active_conversations):
        """Sets the active_conversations of this TeamActivityEventModel.

        The number of active conversation the team member has  # noqa: E501

        :param active_conversations: The active_conversations of this TeamActivityEventModel.  # noqa: E501
        :type: int
        """

        self._active_conversations = active_conversations

    @property
    def inbox_count(self):
        """Gets the inbox_count of this TeamActivityEventModel.  # noqa: E501

        The number of interactions in the inbox across the org  # noqa: E501

        :return: The inbox_count of this TeamActivityEventModel.  # noqa: E501
        :rtype: int
        """
        return self._inbox_count

    @inbox_count.setter
    def inbox_count(self, inbox_count):
        """Sets the inbox_count of this TeamActivityEventModel.

        The number of interactions in the inbox across the org  # noqa: E501

        :param inbox_count: The inbox_count of this TeamActivityEventModel.  # noqa: E501
        :type: int
        """

        self._inbox_count = inbox_count

    @property
    def total_slots(self):
        """Gets the total_slots of this TeamActivityEventModel.  # noqa: E501

        The maximum number of conversations the user will be added with auto-in on  # noqa: E501

        :return: The total_slots of this TeamActivityEventModel.  # noqa: E501
        :rtype: int
        """
        return self._total_slots

    @total_slots.setter
    def total_slots(self, total_slots):
        """Sets the total_slots of this TeamActivityEventModel.

        The maximum number of conversations the user will be added with auto-in on  # noqa: E501

        :param total_slots: The total_slots of this TeamActivityEventModel.  # noqa: E501
        :type: int
        """

        self._total_slots = total_slots

    @property
    def auto_in(self):
        """Gets the auto_in of this TeamActivityEventModel.  # noqa: E501

        Whether or not auto-in is enabled  # noqa: E501

        :return: The auto_in of this TeamActivityEventModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_in

    @auto_in.setter
    def auto_in(self, auto_in):
        """Sets the auto_in of this TeamActivityEventModel.

        Whether or not auto-in is enabled  # noqa: E501

        :param auto_in: The auto_in of this TeamActivityEventModel.  # noqa: E501
        :type: bool
        """

        self._auto_in = auto_in

    @property
    def on_break(self):
        """Gets the on_break of this TeamActivityEventModel.  # noqa: E501

        Whether or not the team member is on break  # noqa: E501

        :return: The on_break of this TeamActivityEventModel.  # noqa: E501
        :rtype: bool
        """
        return self._on_break

    @on_break.setter
    def on_break(self, on_break):
        """Sets the on_break of this TeamActivityEventModel.

        Whether or not the team member is on break  # noqa: E501

        :param on_break: The on_break of this TeamActivityEventModel.  # noqa: E501
        :type: bool
        """

        self._on_break = on_break

    @property
    def logged_in(self):
        """Gets the logged_in of this TeamActivityEventModel.  # noqa: E501

        Whether or not the team member is logged in  # noqa: E501

        :return: The logged_in of this TeamActivityEventModel.  # noqa: E501
        :rtype: bool
        """
        return self._logged_in

    @logged_in.setter
    def logged_in(self, logged_in):
        """Sets the logged_in of this TeamActivityEventModel.

        Whether or not the team member is logged in  # noqa: E501

        :param logged_in: The logged_in of this TeamActivityEventModel.  # noqa: E501
        :type: bool
        """

        self._logged_in = logged_in

    @property
    def connected(self):
        """Gets the connected of this TeamActivityEventModel.  # noqa: E501

        True if the team member is logged in AND has Prompt open in a browser tab  # noqa: E501

        :return: The connected of this TeamActivityEventModel.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this TeamActivityEventModel.

        True if the team member is logged in AND has Prompt open in a browser tab  # noqa: E501

        :param connected: The connected of this TeamActivityEventModel.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamActivityEventModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamActivityEventModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
