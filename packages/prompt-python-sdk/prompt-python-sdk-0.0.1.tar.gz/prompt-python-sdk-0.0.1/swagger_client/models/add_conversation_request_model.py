# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddConversationRequestModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_member_id': 'int',
        'org_channel_api_id': 'str',
        'customer_channel_key': 'str',
        'customer_channel_id': 'int'
    }

    attribute_map = {
        'team_member_id': 'teamMemberId',
        'org_channel_api_id': 'orgChannelApiId',
        'customer_channel_key': 'customerChannelKey',
        'customer_channel_id': 'customerChannelId'
    }

    def __init__(self, team_member_id=None, org_channel_api_id=None, customer_channel_key=None, customer_channel_id=None):  # noqa: E501
        """AddConversationRequestModel - a model defined in Swagger"""  # noqa: E501
        self._team_member_id = None
        self._org_channel_api_id = None
        self._customer_channel_key = None
        self._customer_channel_id = None
        self.discriminator = None
        self.team_member_id = team_member_id
        self.org_channel_api_id = org_channel_api_id
        if customer_channel_key is not None:
            self.customer_channel_key = customer_channel_key
        if customer_channel_id is not None:
            self.customer_channel_id = customer_channel_id

    @property
    def team_member_id(self):
        """Gets the team_member_id of this AddConversationRequestModel.  # noqa: E501

        Team member to be invited/added to the conversation.  # noqa: E501

        :return: The team_member_id of this AddConversationRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this AddConversationRequestModel.

        Team member to be invited/added to the conversation.  # noqa: E501

        :param team_member_id: The team_member_id of this AddConversationRequestModel.  # noqa: E501
        :type: int
        """
        if team_member_id is None:
            raise ValueError("Invalid value for `team_member_id`, must not be `None`")  # noqa: E501

        self._team_member_id = team_member_id

    @property
    def org_channel_api_id(self):
        """Gets the org_channel_api_id of this AddConversationRequestModel.  # noqa: E501

        The org channel apiId (or internal id) of the sending channel  # noqa: E501

        :return: The org_channel_api_id of this AddConversationRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._org_channel_api_id

    @org_channel_api_id.setter
    def org_channel_api_id(self, org_channel_api_id):
        """Sets the org_channel_api_id of this AddConversationRequestModel.

        The org channel apiId (or internal id) of the sending channel  # noqa: E501

        :param org_channel_api_id: The org_channel_api_id of this AddConversationRequestModel.  # noqa: E501
        :type: str
        """
        if org_channel_api_id is None:
            raise ValueError("Invalid value for `org_channel_api_id`, must not be `None`")  # noqa: E501

        self._org_channel_api_id = org_channel_api_id

    @property
    def customer_channel_key(self):
        """Gets the customer_channel_key of this AddConversationRequestModel.  # noqa: E501

        The key of the customer channel, for instance, the customer phone number to SMS to.  Must supply this or customerChannelId  # noqa: E501

        :return: The customer_channel_key of this AddConversationRequestModel.  # noqa: E501
        :rtype: str
        """
        return self._customer_channel_key

    @customer_channel_key.setter
    def customer_channel_key(self, customer_channel_key):
        """Sets the customer_channel_key of this AddConversationRequestModel.

        The key of the customer channel, for instance, the customer phone number to SMS to.  Must supply this or customerChannelId  # noqa: E501

        :param customer_channel_key: The customer_channel_key of this AddConversationRequestModel.  # noqa: E501
        :type: str
        """

        self._customer_channel_key = customer_channel_key

    @property
    def customer_channel_id(self):
        """Gets the customer_channel_id of this AddConversationRequestModel.  # noqa: E501

        The internal id of the customer channel key. Must supply this or the customerChannelKey  # noqa: E501

        :return: The customer_channel_id of this AddConversationRequestModel.  # noqa: E501
        :rtype: int
        """
        return self._customer_channel_id

    @customer_channel_id.setter
    def customer_channel_id(self, customer_channel_id):
        """Sets the customer_channel_id of this AddConversationRequestModel.

        The internal id of the customer channel key. Must supply this or the customerChannelKey  # noqa: E501

        :param customer_channel_id: The customer_channel_id of this AddConversationRequestModel.  # noqa: E501
        :type: int
        """

        self._customer_channel_id = customer_channel_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddConversationRequestModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddConversationRequestModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
