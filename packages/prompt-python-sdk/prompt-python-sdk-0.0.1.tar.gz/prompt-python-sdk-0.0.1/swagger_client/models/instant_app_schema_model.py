# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstantAppSchemaModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'schema_api_id': 'str',
        'name': 'str',
        'author': 'str',
        'description': 'str',
        'icon': 'str',
        'active': 'bool',
        'parameters': 'list[str]',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'schema_api_id': 'schemaApiId',
        'name': 'name',
        'author': 'author',
        'description': 'description',
        'icon': 'icon',
        'active': 'active',
        'parameters': 'parameters',
        'type': 'type'
    }

    def __init__(self, id=None, schema_api_id=None, name=None, author=None, description=None, icon=None, active=None, parameters=None, type=None):  # noqa: E501
        """InstantAppSchemaModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._schema_api_id = None
        self._name = None
        self._author = None
        self._description = None
        self._icon = None
        self._active = None
        self._parameters = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if schema_api_id is not None:
            self.schema_api_id = schema_api_id
        if name is not None:
            self.name = name
        if author is not None:
            self.author = author
        if description is not None:
            self.description = description
        if icon is not None:
            self.icon = icon
        if active is not None:
            self.active = active
        if parameters is not None:
            self.parameters = parameters
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this InstantAppSchemaModel.  # noqa: E501

        The system generated unique id for this Instant App Schema.  # noqa: E501

        :return: The id of this InstantAppSchemaModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstantAppSchemaModel.

        The system generated unique id for this Instant App Schema.  # noqa: E501

        :param id: The id of this InstantAppSchemaModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def schema_api_id(self):
        """Gets the schema_api_id of this InstantAppSchemaModel.  # noqa: E501

        The programmatic, unique id of the schema for this Instant App Schema.  # noqa: E501

        :return: The schema_api_id of this InstantAppSchemaModel.  # noqa: E501
        :rtype: str
        """
        return self._schema_api_id

    @schema_api_id.setter
    def schema_api_id(self, schema_api_id):
        """Sets the schema_api_id of this InstantAppSchemaModel.

        The programmatic, unique id of the schema for this Instant App Schema.  # noqa: E501

        :param schema_api_id: The schema_api_id of this InstantAppSchemaModel.  # noqa: E501
        :type: str
        """

        self._schema_api_id = schema_api_id

    @property
    def name(self):
        """Gets the name of this InstantAppSchemaModel.  # noqa: E501

        The name of this Instant App Schema.  # noqa: E501

        :return: The name of this InstantAppSchemaModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstantAppSchemaModel.

        The name of this Instant App Schema.  # noqa: E501

        :param name: The name of this InstantAppSchemaModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def author(self):
        """Gets the author of this InstantAppSchemaModel.  # noqa: E501

        The author of the Instant App Schema  # noqa: E501

        :return: The author of this InstantAppSchemaModel.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this InstantAppSchemaModel.

        The author of the Instant App Schema  # noqa: E501

        :param author: The author of this InstantAppSchemaModel.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def description(self):
        """Gets the description of this InstantAppSchemaModel.  # noqa: E501

        The description of the Instant App Schema  # noqa: E501

        :return: The description of this InstantAppSchemaModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InstantAppSchemaModel.

        The description of the Instant App Schema  # noqa: E501

        :param description: The description of this InstantAppSchemaModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this InstantAppSchemaModel.  # noqa: E501

        The icon of the Instant App Schema  # noqa: E501

        :return: The icon of this InstantAppSchemaModel.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this InstantAppSchemaModel.

        The icon of the Instant App Schema  # noqa: E501

        :param icon: The icon of this InstantAppSchemaModel.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def active(self):
        """Gets the active of this InstantAppSchemaModel.  # noqa: E501

        Whether the Instant App Schema is active  # noqa: E501

        :return: The active of this InstantAppSchemaModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InstantAppSchemaModel.

        Whether the Instant App Schema is active  # noqa: E501

        :param active: The active of this InstantAppSchemaModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def parameters(self):
        """Gets the parameters of this InstantAppSchemaModel.  # noqa: E501

        List of parameters that can be configured when an Instant App instance is created  # noqa: E501

        :return: The parameters of this InstantAppSchemaModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InstantAppSchemaModel.

        List of parameters that can be configured when an Instant App instance is created  # noqa: E501

        :param parameters: The parameters of this InstantAppSchemaModel.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this InstantAppSchemaModel.  # noqa: E501

        The type of this Instant App Schema.  # noqa: E501

        :return: The type of this InstantAppSchemaModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InstantAppSchemaModel.

        The type of this Instant App Schema.  # noqa: E501

        :param type: The type of this InstantAppSchemaModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "CUSTOMER", "AGENT_PRIVATE", "AGENT_SHARED", "CHANNEL", "CHANNEL_SHARED", "OVERLAY_PRIVATE", "OVERLAY_SHARED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstantAppSchemaModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstantAppSchemaModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
