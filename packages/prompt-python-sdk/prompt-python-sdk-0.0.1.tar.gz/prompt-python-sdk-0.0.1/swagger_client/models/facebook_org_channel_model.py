# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FacebookOrgChannelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'facebook_app_secret': 'str',
        'page_access_token': 'str',
        'verification_token': 'str',
        'facebook_app_id': 'str'
    }

    attribute_map = {
        'facebook_app_secret': 'facebookAppSecret',
        'page_access_token': 'pageAccessToken',
        'verification_token': 'verificationToken',
        'facebook_app_id': 'facebookAppId'
    }

    def __init__(self, facebook_app_secret=None, page_access_token=None, verification_token=None, facebook_app_id=None):  # noqa: E501
        """FacebookOrgChannelModel - a model defined in Swagger"""  # noqa: E501
        self._facebook_app_secret = None
        self._page_access_token = None
        self._verification_token = None
        self._facebook_app_id = None
        self.discriminator = None
        if facebook_app_secret is not None:
            self.facebook_app_secret = facebook_app_secret
        if page_access_token is not None:
            self.page_access_token = page_access_token
        if verification_token is not None:
            self.verification_token = verification_token
        if facebook_app_id is not None:
            self.facebook_app_id = facebook_app_id

    @property
    def facebook_app_secret(self):
        """Gets the facebook_app_secret of this FacebookOrgChannelModel.  # noqa: E501

        The secret given by facebook for an created app  # noqa: E501

        :return: The facebook_app_secret of this FacebookOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._facebook_app_secret

    @facebook_app_secret.setter
    def facebook_app_secret(self, facebook_app_secret):
        """Sets the facebook_app_secret of this FacebookOrgChannelModel.

        The secret given by facebook for an created app  # noqa: E501

        :param facebook_app_secret: The facebook_app_secret of this FacebookOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._facebook_app_secret = facebook_app_secret

    @property
    def page_access_token(self):
        """Gets the page_access_token of this FacebookOrgChannelModel.  # noqa: E501

        The page access token from a facebook page  # noqa: E501

        :return: The page_access_token of this FacebookOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._page_access_token

    @page_access_token.setter
    def page_access_token(self, page_access_token):
        """Sets the page_access_token of this FacebookOrgChannelModel.

        The page access token from a facebook page  # noqa: E501

        :param page_access_token: The page_access_token of this FacebookOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._page_access_token = page_access_token

    @property
    def verification_token(self):
        """Gets the verification_token of this FacebookOrgChannelModel.  # noqa: E501

        The Prompt.io supplied value to enter into the Facebook app for API verification  # noqa: E501

        :return: The verification_token of this FacebookOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this FacebookOrgChannelModel.

        The Prompt.io supplied value to enter into the Facebook app for API verification  # noqa: E501

        :param verification_token: The verification_token of this FacebookOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._verification_token = verification_token

    @property
    def facebook_app_id(self):
        """Gets the facebook_app_id of this FacebookOrgChannelModel.  # noqa: E501

        The facebook id for the messaging app. This is the 'channel key'  # noqa: E501

        :return: The facebook_app_id of this FacebookOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._facebook_app_id

    @facebook_app_id.setter
    def facebook_app_id(self, facebook_app_id):
        """Sets the facebook_app_id of this FacebookOrgChannelModel.

        The facebook id for the messaging app. This is the 'channel key'  # noqa: E501

        :param facebook_app_id: The facebook_app_id of this FacebookOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._facebook_app_id = facebook_app_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacebookOrgChannelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacebookOrgChannelModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
