# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgChannelWithPermissionsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_channel': 'OrgChannelModel',
        'permissions': 'list[str]'
    }

    attribute_map = {
        'org_channel': 'orgChannel',
        'permissions': 'permissions'
    }

    def __init__(self, org_channel=None, permissions=None):  # noqa: E501
        """OrgChannelWithPermissionsModel - a model defined in Swagger"""  # noqa: E501
        self._org_channel = None
        self._permissions = None
        self.discriminator = None
        if org_channel is not None:
            self.org_channel = org_channel
        if permissions is not None:
            self.permissions = permissions

    @property
    def org_channel(self):
        """Gets the org_channel of this OrgChannelWithPermissionsModel.  # noqa: E501


        :return: The org_channel of this OrgChannelWithPermissionsModel.  # noqa: E501
        :rtype: OrgChannelModel
        """
        return self._org_channel

    @org_channel.setter
    def org_channel(self, org_channel):
        """Sets the org_channel of this OrgChannelWithPermissionsModel.


        :param org_channel: The org_channel of this OrgChannelWithPermissionsModel.  # noqa: E501
        :type: OrgChannelModel
        """

        self._org_channel = org_channel

    @property
    def permissions(self):
        """Gets the permissions of this OrgChannelWithPermissionsModel.  # noqa: E501

        The permissions for the org channel.  # noqa: E501

        :return: The permissions of this OrgChannelWithPermissionsModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this OrgChannelWithPermissionsModel.

        The permissions for the org channel.  # noqa: E501

        :param permissions: The permissions of this OrgChannelWithPermissionsModel.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CAN_VIEW", "CAN_SEND"]  # noqa: E501
        if not set(permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `permissions` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(permissions) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgChannelWithPermissionsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgChannelWithPermissionsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
