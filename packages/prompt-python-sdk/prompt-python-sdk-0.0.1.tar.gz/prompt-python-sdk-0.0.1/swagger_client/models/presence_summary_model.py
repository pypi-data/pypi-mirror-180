# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PresenceSummaryModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_team_active': 'int',
        'num_team_idle': 'int',
        'num_customers_active': 'int',
        'num_customers_idle': 'int',
        'num_sessions': 'int'
    }

    attribute_map = {
        'num_team_active': 'numTeamActive',
        'num_team_idle': 'numTeamIdle',
        'num_customers_active': 'numCustomersActive',
        'num_customers_idle': 'numCustomersIdle',
        'num_sessions': 'numSessions'
    }

    def __init__(self, num_team_active=None, num_team_idle=None, num_customers_active=None, num_customers_idle=None, num_sessions=None):  # noqa: E501
        """PresenceSummaryModel - a model defined in Swagger"""  # noqa: E501
        self._num_team_active = None
        self._num_team_idle = None
        self._num_customers_active = None
        self._num_customers_idle = None
        self._num_sessions = None
        self.discriminator = None
        if num_team_active is not None:
            self.num_team_active = num_team_active
        if num_team_idle is not None:
            self.num_team_idle = num_team_idle
        if num_customers_active is not None:
            self.num_customers_active = num_customers_active
        if num_customers_idle is not None:
            self.num_customers_idle = num_customers_idle
        if num_sessions is not None:
            self.num_sessions = num_sessions

    @property
    def num_team_active(self):
        """Gets the num_team_active of this PresenceSummaryModel.  # noqa: E501


        :return: The num_team_active of this PresenceSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._num_team_active

    @num_team_active.setter
    def num_team_active(self, num_team_active):
        """Sets the num_team_active of this PresenceSummaryModel.


        :param num_team_active: The num_team_active of this PresenceSummaryModel.  # noqa: E501
        :type: int
        """

        self._num_team_active = num_team_active

    @property
    def num_team_idle(self):
        """Gets the num_team_idle of this PresenceSummaryModel.  # noqa: E501


        :return: The num_team_idle of this PresenceSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._num_team_idle

    @num_team_idle.setter
    def num_team_idle(self, num_team_idle):
        """Sets the num_team_idle of this PresenceSummaryModel.


        :param num_team_idle: The num_team_idle of this PresenceSummaryModel.  # noqa: E501
        :type: int
        """

        self._num_team_idle = num_team_idle

    @property
    def num_customers_active(self):
        """Gets the num_customers_active of this PresenceSummaryModel.  # noqa: E501


        :return: The num_customers_active of this PresenceSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._num_customers_active

    @num_customers_active.setter
    def num_customers_active(self, num_customers_active):
        """Sets the num_customers_active of this PresenceSummaryModel.


        :param num_customers_active: The num_customers_active of this PresenceSummaryModel.  # noqa: E501
        :type: int
        """

        self._num_customers_active = num_customers_active

    @property
    def num_customers_idle(self):
        """Gets the num_customers_idle of this PresenceSummaryModel.  # noqa: E501


        :return: The num_customers_idle of this PresenceSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._num_customers_idle

    @num_customers_idle.setter
    def num_customers_idle(self, num_customers_idle):
        """Sets the num_customers_idle of this PresenceSummaryModel.


        :param num_customers_idle: The num_customers_idle of this PresenceSummaryModel.  # noqa: E501
        :type: int
        """

        self._num_customers_idle = num_customers_idle

    @property
    def num_sessions(self):
        """Gets the num_sessions of this PresenceSummaryModel.  # noqa: E501


        :return: The num_sessions of this PresenceSummaryModel.  # noqa: E501
        :rtype: int
        """
        return self._num_sessions

    @num_sessions.setter
    def num_sessions(self, num_sessions):
        """Sets the num_sessions of this PresenceSummaryModel.


        :param num_sessions: The num_sessions of this PresenceSummaryModel.  # noqa: E501
        :type: int
        """

        self._num_sessions = num_sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PresenceSummaryModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresenceSummaryModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
