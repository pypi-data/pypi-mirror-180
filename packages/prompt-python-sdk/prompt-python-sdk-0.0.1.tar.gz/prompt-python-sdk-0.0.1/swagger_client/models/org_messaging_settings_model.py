# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgMessagingSettingsModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_restrictions_mode': 'str',
        'delivery_suspend_hour': 'int',
        'delivery_suspend_minute': 'int',
        'delivery_resume_hour': 'int',
        'delivery_resume_minute': 'int'
    }

    attribute_map = {
        'delivery_restrictions_mode': 'deliveryRestrictionsMode',
        'delivery_suspend_hour': 'deliverySuspendHour',
        'delivery_suspend_minute': 'deliverySuspendMinute',
        'delivery_resume_hour': 'deliveryResumeHour',
        'delivery_resume_minute': 'deliveryResumeMinute'
    }

    def __init__(self, delivery_restrictions_mode=None, delivery_suspend_hour=None, delivery_suspend_minute=None, delivery_resume_hour=None, delivery_resume_minute=None):  # noqa: E501
        """OrgMessagingSettingsModel - a model defined in Swagger"""  # noqa: E501
        self._delivery_restrictions_mode = None
        self._delivery_suspend_hour = None
        self._delivery_suspend_minute = None
        self._delivery_resume_hour = None
        self._delivery_resume_minute = None
        self.discriminator = None
        if delivery_restrictions_mode is not None:
            self.delivery_restrictions_mode = delivery_restrictions_mode
        if delivery_suspend_hour is not None:
            self.delivery_suspend_hour = delivery_suspend_hour
        if delivery_suspend_minute is not None:
            self.delivery_suspend_minute = delivery_suspend_minute
        if delivery_resume_hour is not None:
            self.delivery_resume_hour = delivery_resume_hour
        if delivery_resume_minute is not None:
            self.delivery_resume_minute = delivery_resume_minute

    @property
    def delivery_restrictions_mode(self):
        """Gets the delivery_restrictions_mode of this OrgMessagingSettingsModel.  # noqa: E501

        The mode indicating which message delivery restrictions should be applied.  # noqa: E501

        :return: The delivery_restrictions_mode of this OrgMessagingSettingsModel.  # noqa: E501
        :rtype: str
        """
        return self._delivery_restrictions_mode

    @delivery_restrictions_mode.setter
    def delivery_restrictions_mode(self, delivery_restrictions_mode):
        """Sets the delivery_restrictions_mode of this OrgMessagingSettingsModel.

        The mode indicating which message delivery restrictions should be applied.  # noqa: E501

        :param delivery_restrictions_mode: The delivery_restrictions_mode of this OrgMessagingSettingsModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NORMAL", "SUSPENDED", "SCHEDULED"]  # noqa: E501
        if delivery_restrictions_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_restrictions_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_restrictions_mode, allowed_values)
            )

        self._delivery_restrictions_mode = delivery_restrictions_mode

    @property
    def delivery_suspend_hour(self):
        """Gets the delivery_suspend_hour of this OrgMessagingSettingsModel.  # noqa: E501

        The hour (between 0 and 23) that message delivery should be suspended.  # noqa: E501

        :return: The delivery_suspend_hour of this OrgMessagingSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_suspend_hour

    @delivery_suspend_hour.setter
    def delivery_suspend_hour(self, delivery_suspend_hour):
        """Sets the delivery_suspend_hour of this OrgMessagingSettingsModel.

        The hour (between 0 and 23) that message delivery should be suspended.  # noqa: E501

        :param delivery_suspend_hour: The delivery_suspend_hour of this OrgMessagingSettingsModel.  # noqa: E501
        :type: int
        """

        self._delivery_suspend_hour = delivery_suspend_hour

    @property
    def delivery_suspend_minute(self):
        """Gets the delivery_suspend_minute of this OrgMessagingSettingsModel.  # noqa: E501

        The minute (between 0 and 59) that message delivery should be suspended.  # noqa: E501

        :return: The delivery_suspend_minute of this OrgMessagingSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_suspend_minute

    @delivery_suspend_minute.setter
    def delivery_suspend_minute(self, delivery_suspend_minute):
        """Sets the delivery_suspend_minute of this OrgMessagingSettingsModel.

        The minute (between 0 and 59) that message delivery should be suspended.  # noqa: E501

        :param delivery_suspend_minute: The delivery_suspend_minute of this OrgMessagingSettingsModel.  # noqa: E501
        :type: int
        """

        self._delivery_suspend_minute = delivery_suspend_minute

    @property
    def delivery_resume_hour(self):
        """Gets the delivery_resume_hour of this OrgMessagingSettingsModel.  # noqa: E501

        The hour (between 0 and 23) that message delivery should resume.  # noqa: E501

        :return: The delivery_resume_hour of this OrgMessagingSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_resume_hour

    @delivery_resume_hour.setter
    def delivery_resume_hour(self, delivery_resume_hour):
        """Sets the delivery_resume_hour of this OrgMessagingSettingsModel.

        The hour (between 0 and 23) that message delivery should resume.  # noqa: E501

        :param delivery_resume_hour: The delivery_resume_hour of this OrgMessagingSettingsModel.  # noqa: E501
        :type: int
        """

        self._delivery_resume_hour = delivery_resume_hour

    @property
    def delivery_resume_minute(self):
        """Gets the delivery_resume_minute of this OrgMessagingSettingsModel.  # noqa: E501

        The minute (between 0 and 59) that message delivery should resume.  # noqa: E501

        :return: The delivery_resume_minute of this OrgMessagingSettingsModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_resume_minute

    @delivery_resume_minute.setter
    def delivery_resume_minute(self, delivery_resume_minute):
        """Sets the delivery_resume_minute of this OrgMessagingSettingsModel.

        The minute (between 0 and 59) that message delivery should resume.  # noqa: E501

        :param delivery_resume_minute: The delivery_resume_minute of this OrgMessagingSettingsModel.  # noqa: E501
        :type: int
        """

        self._delivery_resume_minute = delivery_resume_minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgMessagingSettingsModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgMessagingSettingsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
