# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoolChannelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'value': 'str',
        'provider': 'str',
        'created_timestamp': 'int',
        'status': 'str',
        'status_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'provider': 'provider',
        'created_timestamp': 'createdTimestamp',
        'status': 'status',
        'status_timestamp': 'statusTimestamp'
    }

    def __init__(self, id=None, value=None, provider=None, created_timestamp=None, status=None, status_timestamp=None):  # noqa: E501
        """PoolChannelModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._value = None
        self._provider = None
        self._created_timestamp = None
        self._status = None
        self._status_timestamp = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if provider is not None:
            self.provider = provider
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if status is not None:
            self.status = status
        if status_timestamp is not None:
            self.status_timestamp = status_timestamp

    @property
    def id(self):
        """Gets the id of this PoolChannelModel.  # noqa: E501

        The system generated unique id for this channel.  # noqa: E501

        :return: The id of this PoolChannelModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PoolChannelModel.

        The system generated unique id for this channel.  # noqa: E501

        :param id: The id of this PoolChannelModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this PoolChannelModel.  # noqa: E501

        The value used to identify the channel. For SMS channels, this is a phone number  # noqa: E501

        :return: The value of this PoolChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PoolChannelModel.

        The value used to identify the channel. For SMS channels, this is a phone number  # noqa: E501

        :param value: The value of this PoolChannelModel.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def provider(self):
        """Gets the provider of this PoolChannelModel.  # noqa: E501

        Provider of the channel  # noqa: E501

        :return: The provider of this PoolChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PoolChannelModel.

        Provider of the channel  # noqa: E501

        :param provider: The provider of this PoolChannelModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TWILIO", "YTEL", "BANDWIDTH"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this PoolChannelModel.  # noqa: E501

        Time that the channel was added to the pool  # noqa: E501

        :return: The created_timestamp of this PoolChannelModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this PoolChannelModel.

        Time that the channel was added to the pool  # noqa: E501

        :param created_timestamp: The created_timestamp of this PoolChannelModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def status(self):
        """Gets the status of this PoolChannelModel.  # noqa: E501

        Status of the channel in the pool  # noqa: E501

        :return: The status of this PoolChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PoolChannelModel.

        Status of the channel in the pool  # noqa: E501

        :param status: The status of this PoolChannelModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "PAUSED", "DECOMISSIONING", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_timestamp(self):
        """Gets the status_timestamp of this PoolChannelModel.  # noqa: E501

        Last time the status was updated  # noqa: E501

        :return: The status_timestamp of this PoolChannelModel.  # noqa: E501
        :rtype: int
        """
        return self._status_timestamp

    @status_timestamp.setter
    def status_timestamp(self, status_timestamp):
        """Sets the status_timestamp of this PoolChannelModel.

        Last time the status was updated  # noqa: E501

        :param status_timestamp: The status_timestamp of this PoolChannelModel.  # noqa: E501
        :type: int
        """

        self._status_timestamp = status_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoolChannelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolChannelModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
