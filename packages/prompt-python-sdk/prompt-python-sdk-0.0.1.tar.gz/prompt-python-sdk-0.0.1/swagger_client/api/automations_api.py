# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AutomationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_org_channel(self, automation_id, org_channel_id, **kwargs):  # noqa: E501
        """Adds an OrgChannel to an automation  # noqa: E501

        _in snippets: platform.api.automations.addOrgChannel_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_org_channel(automation_id, org_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param str org_channel_id: (required)
        :return: OrgChannelModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_org_channel_with_http_info(automation_id, org_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_org_channel_with_http_info(automation_id, org_channel_id, **kwargs)  # noqa: E501
            return data

    def add_org_channel_with_http_info(self, automation_id, org_channel_id, **kwargs):  # noqa: E501
        """Adds an OrgChannel to an automation  # noqa: E501

        _in snippets: platform.api.automations.addOrgChannel_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_org_channel_with_http_info(automation_id, org_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param str org_channel_id: (required)
        :return: OrgChannelModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['automation_id', 'org_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_org_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'automation_id' is set
        if ('automation_id' not in params or
                params['automation_id'] is None):
            raise ValueError("Missing the required parameter `automation_id` when calling `add_org_channel`")  # noqa: E501
        # verify the required parameter 'org_channel_id' is set
        if ('org_channel_id' not in params or
                params['org_channel_id'] is None):
            raise ValueError("Missing the required parameter `org_channel_id` when calling `add_org_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'automation_id' in params:
            path_params['automationId'] = params['automation_id']  # noqa: E501
        if 'org_channel_id' in params:
            path_params['orgChannelId'] = params['org_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{automationId}/org_channels/{orgChannelId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgChannelModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_automation(self, **kwargs):  # noqa: E501
        """Creates a new automation  # noqa: E501

        _in snippets: platform.api.automations.createAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_automation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAutomationModel body:
        :return: AutomationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_automation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_automation_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_automation_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new automation  # noqa: E501

        _in snippets: platform.api.automations.createAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_automation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAutomationModel body:
        :return: AutomationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_automation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_automation(self, automation_id, **kwargs):  # noqa: E501
        """Deletes an automation  # noqa: E501

        _in snippets: platform.api.automations.deleteAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_automation(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_automation_with_http_info(automation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_automation_with_http_info(automation_id, **kwargs)  # noqa: E501
            return data

    def delete_automation_with_http_info(self, automation_id, **kwargs):  # noqa: E501
        """Deletes an automation  # noqa: E501

        _in snippets: platform.api.automations.deleteAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_automation_with_http_info(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['automation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_automation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'automation_id' is set
        if ('automation_id' not in params or
                params['automation_id'] is None):
            raise ValueError("Missing the required parameter `automation_id` when calling `delete_automation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'automation_id' in params:
            path_params['automationId'] = params['automation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{automationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_org_channel(self, automation_id, org_channel_id, **kwargs):  # noqa: E501
        """Removes an OrgChannel from an automation  # noqa: E501

        _in snippets: platform.api.automations.deleteOrgChannel_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_org_channel(automation_id, org_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param str org_channel_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_org_channel_with_http_info(automation_id, org_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_org_channel_with_http_info(automation_id, org_channel_id, **kwargs)  # noqa: E501
            return data

    def delete_org_channel_with_http_info(self, automation_id, org_channel_id, **kwargs):  # noqa: E501
        """Removes an OrgChannel from an automation  # noqa: E501

        _in snippets: platform.api.automations.deleteOrgChannel_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_org_channel_with_http_info(automation_id, org_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param str org_channel_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['automation_id', 'org_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_org_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'automation_id' is set
        if ('automation_id' not in params or
                params['automation_id'] is None):
            raise ValueError("Missing the required parameter `automation_id` when calling `delete_org_channel`")  # noqa: E501
        # verify the required parameter 'org_channel_id' is set
        if ('org_channel_id' not in params or
                params['org_channel_id'] is None):
            raise ValueError("Missing the required parameter `org_channel_id` when calling `delete_org_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'automation_id' in params:
            path_params['automationId'] = params['automation_id']  # noqa: E501
        if 'org_channel_id' in params:
            path_params['orgChannelId'] = params['org_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{automationId}/org_channels/{orgChannelId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_automation(self, automation_id, **kwargs):  # noqa: E501
        """Gets the details of a specific automation  # noqa: E501

        _in snippets: platform.api.automations.getAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_automation(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :return: AutomationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_automation_with_http_info(automation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_automation_with_http_info(automation_id, **kwargs)  # noqa: E501
            return data

    def get_automation_with_http_info(self, automation_id, **kwargs):  # noqa: E501
        """Gets the details of a specific automation  # noqa: E501

        _in snippets: platform.api.automations.getAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_automation_with_http_info(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :return: AutomationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['automation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_automation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'automation_id' is set
        if ('automation_id' not in params or
                params['automation_id'] is None):
            raise ValueError("Missing the required parameter `automation_id` when calling `get_automation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'automation_id' in params:
            path_params['automationId'] = params['automation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{automationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_automations(self, **kwargs):  # noqa: E501
        """Gets all the automations in the org  # noqa: E501

        _in snippets: platform.api.automations.getAutomations_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_automations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int first:
        :param int max:
        :return: AutomationModelPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_automations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_automations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_automations_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all the automations in the org  # noqa: E501

        _in snippets: platform.api.automations.getAutomations_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_automations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int first:
        :param int max:
        :return: AutomationModelPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['first', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_automations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationModelPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_org_channels(self, automation_id, **kwargs):  # noqa: E501
        """Gets a list of the OrgChannel from an automation  # noqa: E501

        _in snippets: platform.api.automations.getOrgChannels_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_channels(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param int first:
        :param int max:
        :return: OrgChannelModelPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_org_channels_with_http_info(automation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_org_channels_with_http_info(automation_id, **kwargs)  # noqa: E501
            return data

    def get_org_channels_with_http_info(self, automation_id, **kwargs):  # noqa: E501
        """Gets a list of the OrgChannel from an automation  # noqa: E501

        _in snippets: platform.api.automations.getOrgChannels_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_org_channels_with_http_info(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param int first:
        :param int max:
        :return: OrgChannelModelPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['automation_id', 'first', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_org_channels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'automation_id' is set
        if ('automation_id' not in params or
                params['automation_id'] is None):
            raise ValueError("Missing the required parameter `automation_id` when calling `get_org_channels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'automation_id' in params:
            path_params['automationId'] = params['automation_id']  # noqa: E501

        query_params = []
        if 'first' in params:
            query_params.append(('first', params['first']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{automationId}/org_channels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgChannelModelPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_automation(self, automation_id, **kwargs):  # noqa: E501
        """Modifies an automation  # noqa: E501

        _in snippets: platform.api.automations.updateAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_automation(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param UpdateAutomationModel body:
        :return: AutomationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_automation_with_http_info(automation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_automation_with_http_info(automation_id, **kwargs)  # noqa: E501
            return data

    def update_automation_with_http_info(self, automation_id, **kwargs):  # noqa: E501
        """Modifies an automation  # noqa: E501

        _in snippets: platform.api.automations.updateAutomation_  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_automation_with_http_info(automation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int automation_id: (required)
        :param UpdateAutomationModel body:
        :return: AutomationModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['automation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_automation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'automation_id' is set
        if ('automation_id' not in params or
                params['automation_id'] is None):
            raise ValueError("Missing the required parameter `automation_id` when calling `update_automation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'automation_id' in params:
            path_params['automationId'] = params['automation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['org_token']  # noqa: E501

        return self.api_client.call_api(
            '/automations/{automationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
