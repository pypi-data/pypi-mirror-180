# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessagesSendFileToCustomerBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_channel_id': 'str',
        'customer_channel_key': 'str',
        'customer_channel_id': 'int',
        'message': 'str',
        'ignore_delivery_restrictions': 'bool',
        'file': 'str'
    }

    attribute_map = {
        'org_channel_id': 'orgChannelId',
        'customer_channel_key': 'customerChannelKey',
        'customer_channel_id': 'customerChannelId',
        'message': 'message',
        'ignore_delivery_restrictions': 'ignoreDeliveryRestrictions',
        'file': 'file'
    }

    def __init__(self, org_channel_id=None, customer_channel_key=None, customer_channel_id=None, message=None, ignore_delivery_restrictions=None, file=None):  # noqa: E501
        """MessagesSendFileToCustomerBody - a model defined in Swagger"""  # noqa: E501
        self._org_channel_id = None
        self._customer_channel_key = None
        self._customer_channel_id = None
        self._message = None
        self._ignore_delivery_restrictions = None
        self._file = None
        self.discriminator = None
        self.org_channel_id = org_channel_id
        if customer_channel_key is not None:
            self.customer_channel_key = customer_channel_key
        if customer_channel_id is not None:
            self.customer_channel_id = customer_channel_id
        if message is not None:
            self.message = message
        if ignore_delivery_restrictions is not None:
            self.ignore_delivery_restrictions = ignore_delivery_restrictions
        self.file = file

    @property
    def org_channel_id(self):
        """Gets the org_channel_id of this MessagesSendFileToCustomerBody.  # noqa: E501

        The org channel apiId (or internal id) of the sending channel  # noqa: E501

        :return: The org_channel_id of this MessagesSendFileToCustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._org_channel_id

    @org_channel_id.setter
    def org_channel_id(self, org_channel_id):
        """Sets the org_channel_id of this MessagesSendFileToCustomerBody.

        The org channel apiId (or internal id) of the sending channel  # noqa: E501

        :param org_channel_id: The org_channel_id of this MessagesSendFileToCustomerBody.  # noqa: E501
        :type: str
        """
        if org_channel_id is None:
            raise ValueError("Invalid value for `org_channel_id`, must not be `None`")  # noqa: E501

        self._org_channel_id = org_channel_id

    @property
    def customer_channel_key(self):
        """Gets the customer_channel_key of this MessagesSendFileToCustomerBody.  # noqa: E501

        The key of the customer channel, for instance, the customer phone number to SMS to.  Must supply this or customerChannelId  # noqa: E501

        :return: The customer_channel_key of this MessagesSendFileToCustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._customer_channel_key

    @customer_channel_key.setter
    def customer_channel_key(self, customer_channel_key):
        """Sets the customer_channel_key of this MessagesSendFileToCustomerBody.

        The key of the customer channel, for instance, the customer phone number to SMS to.  Must supply this or customerChannelId  # noqa: E501

        :param customer_channel_key: The customer_channel_key of this MessagesSendFileToCustomerBody.  # noqa: E501
        :type: str
        """

        self._customer_channel_key = customer_channel_key

    @property
    def customer_channel_id(self):
        """Gets the customer_channel_id of this MessagesSendFileToCustomerBody.  # noqa: E501

        The internal id of the customer channel key. Must supply this or the customerChannelKey  # noqa: E501

        :return: The customer_channel_id of this MessagesSendFileToCustomerBody.  # noqa: E501
        :rtype: int
        """
        return self._customer_channel_id

    @customer_channel_id.setter
    def customer_channel_id(self, customer_channel_id):
        """Sets the customer_channel_id of this MessagesSendFileToCustomerBody.

        The internal id of the customer channel key. Must supply this or the customerChannelKey  # noqa: E501

        :param customer_channel_id: The customer_channel_id of this MessagesSendFileToCustomerBody.  # noqa: E501
        :type: int
        """

        self._customer_channel_id = customer_channel_id

    @property
    def message(self):
        """Gets the message of this MessagesSendFileToCustomerBody.  # noqa: E501

        Optional message to include with the file  # noqa: E501

        :return: The message of this MessagesSendFileToCustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessagesSendFileToCustomerBody.

        Optional message to include with the file  # noqa: E501

        :param message: The message of this MessagesSendFileToCustomerBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def ignore_delivery_restrictions(self):
        """Gets the ignore_delivery_restrictions of this MessagesSendFileToCustomerBody.  # noqa: E501

        Whether the message should be sent immediately, ignoring any message delivery time restrictions that have been configured. Default is false.  # noqa: E501

        :return: The ignore_delivery_restrictions of this MessagesSendFileToCustomerBody.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_delivery_restrictions

    @ignore_delivery_restrictions.setter
    def ignore_delivery_restrictions(self, ignore_delivery_restrictions):
        """Sets the ignore_delivery_restrictions of this MessagesSendFileToCustomerBody.

        Whether the message should be sent immediately, ignoring any message delivery time restrictions that have been configured. Default is false.  # noqa: E501

        :param ignore_delivery_restrictions: The ignore_delivery_restrictions of this MessagesSendFileToCustomerBody.  # noqa: E501
        :type: bool
        """

        self._ignore_delivery_restrictions = ignore_delivery_restrictions

    @property
    def file(self):
        """Gets the file of this MessagesSendFileToCustomerBody.  # noqa: E501

        The file to send to the user.  # noqa: E501

        :return: The file of this MessagesSendFileToCustomerBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this MessagesSendFileToCustomerBody.

        The file to send to the user.  # noqa: E501

        :param file: The file of this MessagesSendFileToCustomerBody.  # noqa: E501
        :type: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessagesSendFileToCustomerBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessagesSendFileToCustomerBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
