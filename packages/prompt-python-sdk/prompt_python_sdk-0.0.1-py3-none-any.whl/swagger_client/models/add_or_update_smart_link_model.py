# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddOrUpdateSmartLinkModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'destination_link': 'str',
        'smart_domain': 'str',
        'extension': 'str',
        'preview_description': 'str',
        'preview_image': 'str',
        'fulfillment': 'AddOrUpdateSmartLinkFulfillmentModel'
    }

    attribute_map = {
        'name': 'name',
        'destination_link': 'destinationLink',
        'smart_domain': 'smartDomain',
        'extension': 'extension',
        'preview_description': 'previewDescription',
        'preview_image': 'previewImage',
        'fulfillment': 'fulfillment'
    }

    def __init__(self, name=None, destination_link=None, smart_domain=None, extension=None, preview_description=None, preview_image=None, fulfillment=None):  # noqa: E501
        """AddOrUpdateSmartLinkModel - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._destination_link = None
        self._smart_domain = None
        self._extension = None
        self._preview_description = None
        self._preview_image = None
        self._fulfillment = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if destination_link is not None:
            self.destination_link = destination_link
        if smart_domain is not None:
            self.smart_domain = smart_domain
        if extension is not None:
            self.extension = extension
        if preview_description is not None:
            self.preview_description = preview_description
        if preview_image is not None:
            self.preview_image = preview_image
        if fulfillment is not None:
            self.fulfillment = fulfillment

    @property
    def name(self):
        """Gets the name of this AddOrUpdateSmartLinkModel.  # noqa: E501

        The display name of this smart link.  # noqa: E501

        :return: The name of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddOrUpdateSmartLinkModel.

        The display name of this smart link.  # noqa: E501

        :param name: The name of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def destination_link(self):
        """Gets the destination_link of this AddOrUpdateSmartLinkModel.  # noqa: E501


        :return: The destination_link of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._destination_link

    @destination_link.setter
    def destination_link(self, destination_link):
        """Sets the destination_link of this AddOrUpdateSmartLinkModel.


        :param destination_link: The destination_link of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: str
        """

        self._destination_link = destination_link

    @property
    def smart_domain(self):
        """Gets the smart_domain of this AddOrUpdateSmartLinkModel.  # noqa: E501


        :return: The smart_domain of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._smart_domain

    @smart_domain.setter
    def smart_domain(self, smart_domain):
        """Sets the smart_domain of this AddOrUpdateSmartLinkModel.


        :param smart_domain: The smart_domain of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: str
        """

        self._smart_domain = smart_domain

    @property
    def extension(self):
        """Gets the extension of this AddOrUpdateSmartLinkModel.  # noqa: E501


        :return: The extension of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this AddOrUpdateSmartLinkModel.


        :param extension: The extension of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def preview_description(self):
        """Gets the preview_description of this AddOrUpdateSmartLinkModel.  # noqa: E501


        :return: The preview_description of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._preview_description

    @preview_description.setter
    def preview_description(self, preview_description):
        """Sets the preview_description of this AddOrUpdateSmartLinkModel.


        :param preview_description: The preview_description of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: str
        """

        self._preview_description = preview_description

    @property
    def preview_image(self):
        """Gets the preview_image of this AddOrUpdateSmartLinkModel.  # noqa: E501


        :return: The preview_image of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: str
        """
        return self._preview_image

    @preview_image.setter
    def preview_image(self, preview_image):
        """Sets the preview_image of this AddOrUpdateSmartLinkModel.


        :param preview_image: The preview_image of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: str
        """

        self._preview_image = preview_image

    @property
    def fulfillment(self):
        """Gets the fulfillment of this AddOrUpdateSmartLinkModel.  # noqa: E501


        :return: The fulfillment of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :rtype: AddOrUpdateSmartLinkFulfillmentModel
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this AddOrUpdateSmartLinkModel.


        :param fulfillment: The fulfillment of this AddOrUpdateSmartLinkModel.  # noqa: E501
        :type: AddOrUpdateSmartLinkFulfillmentModel
        """

        self._fulfillment = fulfillment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrUpdateSmartLinkModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrUpdateSmartLinkModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
