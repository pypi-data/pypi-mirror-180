# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddTeamMemberModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'display_name': 'str',
        'user_type': 'str',
        'is_admin': 'bool',
        'send_welcome_email': 'bool',
        'app_mode': 'str',
        'create_or_find': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'display_name': 'displayName',
        'user_type': 'userType',
        'is_admin': 'isAdmin',
        'send_welcome_email': 'sendWelcomeEmail',
        'app_mode': 'appMode',
        'create_or_find': 'createOrFind'
    }

    def __init__(self, email=None, display_name=None, user_type=None, is_admin=None, send_welcome_email=None, app_mode=None, create_or_find=None):  # noqa: E501
        """AddTeamMemberModel - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._display_name = None
        self._user_type = None
        self._is_admin = None
        self._send_welcome_email = None
        self._app_mode = None
        self._create_or_find = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if display_name is not None:
            self.display_name = display_name
        if user_type is not None:
            self.user_type = user_type
        if is_admin is not None:
            self.is_admin = is_admin
        if send_welcome_email is not None:
            self.send_welcome_email = send_welcome_email
        if app_mode is not None:
            self.app_mode = app_mode
        if create_or_find is not None:
            self.create_or_find = create_or_find

    @property
    def email(self):
        """Gets the email of this AddTeamMemberModel.  # noqa: E501

        The email address of this team member.  # noqa: E501

        :return: The email of this AddTeamMemberModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AddTeamMemberModel.

        The email address of this team member.  # noqa: E501

        :param email: The email of this AddTeamMemberModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def display_name(self):
        """Gets the display_name of this AddTeamMemberModel.  # noqa: E501

        The display name of this user.  # noqa: E501

        :return: The display_name of this AddTeamMemberModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AddTeamMemberModel.

        The display name of this user.  # noqa: E501

        :param display_name: The display_name of this AddTeamMemberModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def user_type(self):
        """Gets the user_type of this AddTeamMemberModel.  # noqa: E501

        The user type for this team member.  # noqa: E501

        :return: The user_type of this AddTeamMemberModel.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this AddTeamMemberModel.

        The user type for this team member.  # noqa: E501

        :param user_type: The user_type of this AddTeamMemberModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEAM_MEMBER", "CUSTOMER", "BOT", "SYSTEM", "TROUBLESHOOTING", "INSTANT_APP"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def is_admin(self):
        """Gets the is_admin of this AddTeamMemberModel.  # noqa: E501

        Make this user to be an admin in the system  # noqa: E501

        :return: The is_admin of this AddTeamMemberModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this AddTeamMemberModel.

        Make this user to be an admin in the system  # noqa: E501

        :param is_admin: The is_admin of this AddTeamMemberModel.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def send_welcome_email(self):
        """Gets the send_welcome_email of this AddTeamMemberModel.  # noqa: E501

        Whether a welcome email should be sent to the new team member  # noqa: E501

        :return: The send_welcome_email of this AddTeamMemberModel.  # noqa: E501
        :rtype: bool
        """
        return self._send_welcome_email

    @send_welcome_email.setter
    def send_welcome_email(self, send_welcome_email):
        """Sets the send_welcome_email of this AddTeamMemberModel.

        Whether a welcome email should be sent to the new team member  # noqa: E501

        :param send_welcome_email: The send_welcome_email of this AddTeamMemberModel.  # noqa: E501
        :type: bool
        """

        self._send_welcome_email = send_welcome_email

    @property
    def app_mode(self):
        """Gets the app_mode of this AddTeamMemberModel.  # noqa: E501

        Sets which mode the user should be in during first Login. Currently accepts 'spark' or 'classic'. If blank, we use the server default.  # noqa: E501

        :return: The app_mode of this AddTeamMemberModel.  # noqa: E501
        :rtype: str
        """
        return self._app_mode

    @app_mode.setter
    def app_mode(self, app_mode):
        """Sets the app_mode of this AddTeamMemberModel.

        Sets which mode the user should be in during first Login. Currently accepts 'spark' or 'classic'. If blank, we use the server default.  # noqa: E501

        :param app_mode: The app_mode of this AddTeamMemberModel.  # noqa: E501
        :type: str
        """

        self._app_mode = app_mode

    @property
    def create_or_find(self):
        """Gets the create_or_find of this AddTeamMemberModel.  # noqa: E501

        Whether to return the existing team member instead of an error if the team member already exists  # noqa: E501

        :return: The create_or_find of this AddTeamMemberModel.  # noqa: E501
        :rtype: bool
        """
        return self._create_or_find

    @create_or_find.setter
    def create_or_find(self, create_or_find):
        """Sets the create_or_find of this AddTeamMemberModel.

        Whether to return the existing team member instead of an error if the team member already exists  # noqa: E501

        :param create_or_find: The create_or_find of this AddTeamMemberModel.  # noqa: E501
        :type: bool
        """

        self._create_or_find = create_or_find

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddTeamMemberModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddTeamMemberModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
