# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HistoricalMessageModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_timestamp': 'int',
        'user_id': 'int',
        'user_type': 'str',
        'channel_type': 'str',
        'org_channel_key': 'str',
        'customer_channel_key': 'str',
        'interaction_id': 'int',
        'external_message_id': 'str',
        'content': 'str',
        'uploads': 'list[UploadModel]',
        'instant_app': 'InstantAppModel',
        'status': 'str',
        'is_whisper': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_timestamp': 'createdTimestamp',
        'user_id': 'userId',
        'user_type': 'userType',
        'channel_type': 'channelType',
        'org_channel_key': 'orgChannelKey',
        'customer_channel_key': 'customerChannelKey',
        'interaction_id': 'interactionId',
        'external_message_id': 'externalMessageId',
        'content': 'content',
        'uploads': 'uploads',
        'instant_app': 'instantApp',
        'status': 'status',
        'is_whisper': 'isWhisper'
    }

    def __init__(self, id=None, created_timestamp=None, user_id=None, user_type=None, channel_type=None, org_channel_key=None, customer_channel_key=None, interaction_id=None, external_message_id=None, content=None, uploads=None, instant_app=None, status=None, is_whisper=None):  # noqa: E501
        """HistoricalMessageModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_timestamp = None
        self._user_id = None
        self._user_type = None
        self._channel_type = None
        self._org_channel_key = None
        self._customer_channel_key = None
        self._interaction_id = None
        self._external_message_id = None
        self._content = None
        self._uploads = None
        self._instant_app = None
        self._status = None
        self._is_whisper = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if user_id is not None:
            self.user_id = user_id
        if user_type is not None:
            self.user_type = user_type
        if channel_type is not None:
            self.channel_type = channel_type
        if org_channel_key is not None:
            self.org_channel_key = org_channel_key
        if customer_channel_key is not None:
            self.customer_channel_key = customer_channel_key
        if interaction_id is not None:
            self.interaction_id = interaction_id
        if external_message_id is not None:
            self.external_message_id = external_message_id
        if content is not None:
            self.content = content
        if uploads is not None:
            self.uploads = uploads
        if instant_app is not None:
            self.instant_app = instant_app
        if status is not None:
            self.status = status
        if is_whisper is not None:
            self.is_whisper = is_whisper

    @property
    def id(self):
        """Gets the id of this HistoricalMessageModel.  # noqa: E501


        :return: The id of this HistoricalMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoricalMessageModel.


        :param id: The id of this HistoricalMessageModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this HistoricalMessageModel.  # noqa: E501


        :return: The created_timestamp of this HistoricalMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this HistoricalMessageModel.


        :param created_timestamp: The created_timestamp of this HistoricalMessageModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def user_id(self):
        """Gets the user_id of this HistoricalMessageModel.  # noqa: E501


        :return: The user_id of this HistoricalMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HistoricalMessageModel.


        :param user_id: The user_id of this HistoricalMessageModel.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_type(self):
        """Gets the user_type of this HistoricalMessageModel.  # noqa: E501


        :return: The user_type of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this HistoricalMessageModel.


        :param user_type: The user_type of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEAM_MEMBER", "CUSTOMER", "BOT", "SYSTEM", "TROUBLESHOOTING", "INSTANT_APP"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def channel_type(self):
        """Gets the channel_type of this HistoricalMessageModel.  # noqa: E501


        :return: The channel_type of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this HistoricalMessageModel.


        :param channel_type: The channel_type of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["SMS", "FACEBOOK", "TWILIO", "LINE", "ZIPWHIP", "SMOOCH_CHAT", "YTEL", "INTERNAL", "BANDWIDTH", "POOL", "MANAGED_BANDWIDTH", "MANAGED_SIGNAL_WIRE", "SIGNAL_WIRE"]  # noqa: E501
        if channel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_type` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_type, allowed_values)
            )

        self._channel_type = channel_type

    @property
    def org_channel_key(self):
        """Gets the org_channel_key of this HistoricalMessageModel.  # noqa: E501


        :return: The org_channel_key of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._org_channel_key

    @org_channel_key.setter
    def org_channel_key(self, org_channel_key):
        """Sets the org_channel_key of this HistoricalMessageModel.


        :param org_channel_key: The org_channel_key of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """

        self._org_channel_key = org_channel_key

    @property
    def customer_channel_key(self):
        """Gets the customer_channel_key of this HistoricalMessageModel.  # noqa: E501


        :return: The customer_channel_key of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._customer_channel_key

    @customer_channel_key.setter
    def customer_channel_key(self, customer_channel_key):
        """Sets the customer_channel_key of this HistoricalMessageModel.


        :param customer_channel_key: The customer_channel_key of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """

        self._customer_channel_key = customer_channel_key

    @property
    def interaction_id(self):
        """Gets the interaction_id of this HistoricalMessageModel.  # noqa: E501


        :return: The interaction_id of this HistoricalMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._interaction_id

    @interaction_id.setter
    def interaction_id(self, interaction_id):
        """Sets the interaction_id of this HistoricalMessageModel.


        :param interaction_id: The interaction_id of this HistoricalMessageModel.  # noqa: E501
        :type: int
        """

        self._interaction_id = interaction_id

    @property
    def external_message_id(self):
        """Gets the external_message_id of this HistoricalMessageModel.  # noqa: E501


        :return: The external_message_id of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._external_message_id

    @external_message_id.setter
    def external_message_id(self, external_message_id):
        """Sets the external_message_id of this HistoricalMessageModel.


        :param external_message_id: The external_message_id of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """

        self._external_message_id = external_message_id

    @property
    def content(self):
        """Gets the content of this HistoricalMessageModel.  # noqa: E501


        :return: The content of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this HistoricalMessageModel.


        :param content: The content of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def uploads(self):
        """Gets the uploads of this HistoricalMessageModel.  # noqa: E501


        :return: The uploads of this HistoricalMessageModel.  # noqa: E501
        :rtype: list[UploadModel]
        """
        return self._uploads

    @uploads.setter
    def uploads(self, uploads):
        """Sets the uploads of this HistoricalMessageModel.


        :param uploads: The uploads of this HistoricalMessageModel.  # noqa: E501
        :type: list[UploadModel]
        """

        self._uploads = uploads

    @property
    def instant_app(self):
        """Gets the instant_app of this HistoricalMessageModel.  # noqa: E501


        :return: The instant_app of this HistoricalMessageModel.  # noqa: E501
        :rtype: InstantAppModel
        """
        return self._instant_app

    @instant_app.setter
    def instant_app(self, instant_app):
        """Sets the instant_app of this HistoricalMessageModel.


        :param instant_app: The instant_app of this HistoricalMessageModel.  # noqa: E501
        :type: InstantAppModel
        """

        self._instant_app = instant_app

    @property
    def status(self):
        """Gets the status of this HistoricalMessageModel.  # noqa: E501


        :return: The status of this HistoricalMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HistoricalMessageModel.


        :param status: The status of this HistoricalMessageModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NA", "SENT", "DELIVERED", "READ", "FAILED", "UNDELIVERED", "RECEIVED", "QUEUED", "OPTED_OUT", "ABORTED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_whisper(self):
        """Gets the is_whisper of this HistoricalMessageModel.  # noqa: E501


        :return: The is_whisper of this HistoricalMessageModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_whisper

    @is_whisper.setter
    def is_whisper(self, is_whisper):
        """Sets the is_whisper of this HistoricalMessageModel.


        :param is_whisper: The is_whisper of this HistoricalMessageModel.  # noqa: E501
        :type: bool
        """

        self._is_whisper = is_whisper

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoricalMessageModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoricalMessageModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
