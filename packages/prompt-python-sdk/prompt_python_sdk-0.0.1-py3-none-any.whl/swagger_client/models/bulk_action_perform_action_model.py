# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkActionPerformActionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_tags': 'list[TagModel]',
        'remove_tags': 'list[str]',
        'set_global_opt_out': 'bool',
        'clear_global_opt_out': 'bool',
        'status': 'str',
        'search_value': 'str',
        'team_member_id': 'int',
        'variant_id': 'int'
    }

    attribute_map = {
        'add_tags': 'addTags',
        'remove_tags': 'removeTags',
        'set_global_opt_out': 'setGlobalOptOut',
        'clear_global_opt_out': 'clearGlobalOptOut',
        'status': 'status',
        'search_value': 'searchValue',
        'team_member_id': 'teamMemberId',
        'variant_id': 'variantId'
    }

    def __init__(self, add_tags=None, remove_tags=None, set_global_opt_out=None, clear_global_opt_out=None, status=None, search_value=None, team_member_id=None, variant_id=None):  # noqa: E501
        """BulkActionPerformActionModel - a model defined in Swagger"""  # noqa: E501
        self._add_tags = None
        self._remove_tags = None
        self._set_global_opt_out = None
        self._clear_global_opt_out = None
        self._status = None
        self._search_value = None
        self._team_member_id = None
        self._variant_id = None
        self.discriminator = None
        if add_tags is not None:
            self.add_tags = add_tags
        if remove_tags is not None:
            self.remove_tags = remove_tags
        if set_global_opt_out is not None:
            self.set_global_opt_out = set_global_opt_out
        if clear_global_opt_out is not None:
            self.clear_global_opt_out = clear_global_opt_out
        if status is not None:
            self.status = status
        if search_value is not None:
            self.search_value = search_value
        if team_member_id is not None:
            self.team_member_id = team_member_id
        if variant_id is not None:
            self.variant_id = variant_id

    @property
    def add_tags(self):
        """Gets the add_tags of this BulkActionPerformActionModel.  # noqa: E501

        Tags to add to the contacts  # noqa: E501

        :return: The add_tags of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._add_tags

    @add_tags.setter
    def add_tags(self, add_tags):
        """Sets the add_tags of this BulkActionPerformActionModel.

        Tags to add to the contacts  # noqa: E501

        :param add_tags: The add_tags of this BulkActionPerformActionModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._add_tags = add_tags

    @property
    def remove_tags(self):
        """Gets the remove_tags of this BulkActionPerformActionModel.  # noqa: E501

        Tags to remove from the contacts  # noqa: E501

        :return: The remove_tags of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_tags

    @remove_tags.setter
    def remove_tags(self, remove_tags):
        """Sets the remove_tags of this BulkActionPerformActionModel.

        Tags to remove from the contacts  # noqa: E501

        :param remove_tags: The remove_tags of this BulkActionPerformActionModel.  # noqa: E501
        :type: list[str]
        """

        self._remove_tags = remove_tags

    @property
    def set_global_opt_out(self):
        """Gets the set_global_opt_out of this BulkActionPerformActionModel.  # noqa: E501

        Globally opt out the contacts  # noqa: E501

        :return: The set_global_opt_out of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._set_global_opt_out

    @set_global_opt_out.setter
    def set_global_opt_out(self, set_global_opt_out):
        """Sets the set_global_opt_out of this BulkActionPerformActionModel.

        Globally opt out the contacts  # noqa: E501

        :param set_global_opt_out: The set_global_opt_out of this BulkActionPerformActionModel.  # noqa: E501
        :type: bool
        """

        self._set_global_opt_out = set_global_opt_out

    @property
    def clear_global_opt_out(self):
        """Gets the clear_global_opt_out of this BulkActionPerformActionModel.  # noqa: E501

        Remove the global opt out for the contacts  # noqa: E501

        :return: The clear_global_opt_out of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._clear_global_opt_out

    @clear_global_opt_out.setter
    def clear_global_opt_out(self, clear_global_opt_out):
        """Sets the clear_global_opt_out of this BulkActionPerformActionModel.

        Remove the global opt out for the contacts  # noqa: E501

        :param clear_global_opt_out: The clear_global_opt_out of this BulkActionPerformActionModel.  # noqa: E501
        :type: bool
        """

        self._clear_global_opt_out = clear_global_opt_out

    @property
    def status(self):
        """Gets the status of this BulkActionPerformActionModel.  # noqa: E501

        Contact status to filter on  # noqa: E501

        :return: The status of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BulkActionPerformActionModel.

        Contact status to filter on  # noqa: E501

        :param status: The status of this BulkActionPerformActionModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "DELIVERED", "SKIPPED", "QUEUED", "LOCKED", "CANCELLED", "ERRORED", "ENGAGED_INSTANT_APP_OPENED", "ENGAGED_SMART_LINK_CLICKED", "ENGAGED_REPLIED", "ENGAGED_REPLIED_TO_REPLY", "NO_RESPONSE", "OPT_OUT", "RESOLUTION", "ERROR", "ADDED_TAG", "PROCESSING_PENDING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def search_value(self):
        """Gets the search_value of this BulkActionPerformActionModel.  # noqa: E501

        Additional search value depending on the status  # noqa: E501

        :return: The search_value of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: str
        """
        return self._search_value

    @search_value.setter
    def search_value(self, search_value):
        """Sets the search_value of this BulkActionPerformActionModel.

        Additional search value depending on the status  # noqa: E501

        :param search_value: The search_value of this BulkActionPerformActionModel.  # noqa: E501
        :type: str
        """

        self._search_value = search_value

    @property
    def team_member_id(self):
        """Gets the team_member_id of this BulkActionPerformActionModel.  # noqa: E501

        Team Member to filter on for P2P broadcasts  # noqa: E501

        :return: The team_member_id of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: int
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this BulkActionPerformActionModel.

        Team Member to filter on for P2P broadcasts  # noqa: E501

        :param team_member_id: The team_member_id of this BulkActionPerformActionModel.  # noqa: E501
        :type: int
        """

        self._team_member_id = team_member_id

    @property
    def variant_id(self):
        """Gets the variant_id of this BulkActionPerformActionModel.  # noqa: E501

        Id of variant to filter on if the broadcast was using A/B Testing  # noqa: E501

        :return: The variant_id of this BulkActionPerformActionModel.  # noqa: E501
        :rtype: int
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this BulkActionPerformActionModel.

        Id of variant to filter on if the broadcast was using A/B Testing  # noqa: E501

        :param variant_id: The variant_id of this BulkActionPerformActionModel.  # noqa: E501
        :type: int
        """

        self._variant_id = variant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkActionPerformActionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkActionPerformActionModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
