# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomerModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'display_name': 'str',
        'created_timestamp': 'int',
        'user_type': 'str',
        'channels': 'list[CustomerChannelModel]',
        'tags': 'list[TagModel]',
        'global_opt_out': 'bool',
        'identities': 'list[CustomerIdentityModel]',
        'contact_lists': 'list[ContactListModel]'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'displayName',
        'created_timestamp': 'createdTimestamp',
        'user_type': 'userType',
        'channels': 'channels',
        'tags': 'tags',
        'global_opt_out': 'globalOptOut',
        'identities': 'identities',
        'contact_lists': 'contactLists'
    }

    def __init__(self, id=None, display_name=None, created_timestamp=None, user_type=None, channels=None, tags=None, global_opt_out=None, identities=None, contact_lists=None):  # noqa: E501
        """CustomerModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._created_timestamp = None
        self._user_type = None
        self._channels = None
        self._tags = None
        self._global_opt_out = None
        self._identities = None
        self._contact_lists = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if user_type is not None:
            self.user_type = user_type
        if channels is not None:
            self.channels = channels
        if tags is not None:
            self.tags = tags
        if global_opt_out is not None:
            self.global_opt_out = global_opt_out
        if identities is not None:
            self.identities = identities
        if contact_lists is not None:
            self.contact_lists = contact_lists

    @property
    def id(self):
        """Gets the id of this CustomerModel.  # noqa: E501

        The system generated unique id for this user.  # noqa: E501

        :return: The id of this CustomerModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerModel.

        The system generated unique id for this user.  # noqa: E501

        :param id: The id of this CustomerModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this CustomerModel.  # noqa: E501

        The display name of this user.  # noqa: E501

        :return: The display_name of this CustomerModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CustomerModel.

        The display name of this user.  # noqa: E501

        :param display_name: The display_name of this CustomerModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this CustomerModel.  # noqa: E501

        The time the user was created.  # noqa: E501

        :return: The created_timestamp of this CustomerModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this CustomerModel.

        The time the user was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this CustomerModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def user_type(self):
        """Gets the user_type of this CustomerModel.  # noqa: E501

        The user type for this team member.  # noqa: E501

        :return: The user_type of this CustomerModel.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this CustomerModel.

        The user type for this team member.  # noqa: E501

        :param user_type: The user_type of this CustomerModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["TEAM_MEMBER", "CUSTOMER", "BOT", "SYSTEM", "TROUBLESHOOTING", "INSTANT_APP"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def channels(self):
        """Gets the channels of this CustomerModel.  # noqa: E501

        A collection of channels the user has communicated on or been contacted on  # noqa: E501

        :return: The channels of this CustomerModel.  # noqa: E501
        :rtype: list[CustomerChannelModel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this CustomerModel.

        A collection of channels the user has communicated on or been contacted on  # noqa: E501

        :param channels: The channels of this CustomerModel.  # noqa: E501
        :type: list[CustomerChannelModel]
        """

        self._channels = channels

    @property
    def tags(self):
        """Gets the tags of this CustomerModel.  # noqa: E501

        A collection of tags that are associated with the customer  # noqa: E501

        :return: The tags of this CustomerModel.  # noqa: E501
        :rtype: list[TagModel]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CustomerModel.

        A collection of tags that are associated with the customer  # noqa: E501

        :param tags: The tags of this CustomerModel.  # noqa: E501
        :type: list[TagModel]
        """

        self._tags = tags

    @property
    def global_opt_out(self):
        """Gets the global_opt_out of this CustomerModel.  # noqa: E501

        Whether the customer has been opted out of all messaging across all channels  # noqa: E501

        :return: The global_opt_out of this CustomerModel.  # noqa: E501
        :rtype: bool
        """
        return self._global_opt_out

    @global_opt_out.setter
    def global_opt_out(self, global_opt_out):
        """Sets the global_opt_out of this CustomerModel.

        Whether the customer has been opted out of all messaging across all channels  # noqa: E501

        :param global_opt_out: The global_opt_out of this CustomerModel.  # noqa: E501
        :type: bool
        """

        self._global_opt_out = global_opt_out

    @property
    def identities(self):
        """Gets the identities of this CustomerModel.  # noqa: E501

        Optional. A collection of identities for this user  # noqa: E501

        :return: The identities of this CustomerModel.  # noqa: E501
        :rtype: list[CustomerIdentityModel]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this CustomerModel.

        Optional. A collection of identities for this user  # noqa: E501

        :param identities: The identities of this CustomerModel.  # noqa: E501
        :type: list[CustomerIdentityModel]
        """

        self._identities = identities

    @property
    def contact_lists(self):
        """Gets the contact_lists of this CustomerModel.  # noqa: E501

        The contact lists that are associated with the customer  # noqa: E501

        :return: The contact_lists of this CustomerModel.  # noqa: E501
        :rtype: list[ContactListModel]
        """
        return self._contact_lists

    @contact_lists.setter
    def contact_lists(self, contact_lists):
        """Sets the contact_lists of this CustomerModel.

        The contact lists that are associated with the customer  # noqa: E501

        :param contact_lists: The contact_lists of this CustomerModel.  # noqa: E501
        :type: list[ContactListModel]
        """

        self._contact_lists = contact_lists

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomerModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomerModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
