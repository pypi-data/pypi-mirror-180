# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsOptOutReportModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp_epoch': 'int',
        'customer_name': 'str',
        'customer_phone': 'str',
        'org_channel_name': 'str',
        'org_channel_value': 'str',
        'status': 'str',
        'type': 'str',
        'customer_id': 'int'
    }

    attribute_map = {
        'timestamp_epoch': 'timestampEpoch',
        'customer_name': 'customerName',
        'customer_phone': 'customerPhone',
        'org_channel_name': 'orgChannelName',
        'org_channel_value': 'orgChannelValue',
        'status': 'status',
        'type': 'type',
        'customer_id': 'customerId'
    }

    def __init__(self, timestamp_epoch=None, customer_name=None, customer_phone=None, org_channel_name=None, org_channel_value=None, status=None, type=None, customer_id=None):  # noqa: E501
        """AnalyticsOptOutReportModel - a model defined in Swagger"""  # noqa: E501
        self._timestamp_epoch = None
        self._customer_name = None
        self._customer_phone = None
        self._org_channel_name = None
        self._org_channel_value = None
        self._status = None
        self._type = None
        self._customer_id = None
        self.discriminator = None
        if timestamp_epoch is not None:
            self.timestamp_epoch = timestamp_epoch
        if customer_name is not None:
            self.customer_name = customer_name
        if customer_phone is not None:
            self.customer_phone = customer_phone
        if org_channel_name is not None:
            self.org_channel_name = org_channel_name
        if org_channel_value is not None:
            self.org_channel_value = org_channel_value
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if customer_id is not None:
            self.customer_id = customer_id

    @property
    def timestamp_epoch(self):
        """Gets the timestamp_epoch of this AnalyticsOptOutReportModel.  # noqa: E501

        The timestamp of the Opt-In or Opt-Out event as a Unix timestamp.  # noqa: E501

        :return: The timestamp_epoch of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_epoch

    @timestamp_epoch.setter
    def timestamp_epoch(self, timestamp_epoch):
        """Sets the timestamp_epoch of this AnalyticsOptOutReportModel.

        The timestamp of the Opt-In or Opt-Out event as a Unix timestamp.  # noqa: E501

        :param timestamp_epoch: The timestamp_epoch of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: int
        """

        self._timestamp_epoch = timestamp_epoch

    @property
    def customer_name(self):
        """Gets the customer_name of this AnalyticsOptOutReportModel.  # noqa: E501

        The display name of the customer who opted-in or opted-out.  # noqa: E501

        :return: The customer_name of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this AnalyticsOptOutReportModel.

        The display name of the customer who opted-in or opted-out.  # noqa: E501

        :param customer_name: The customer_name of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def customer_phone(self):
        """Gets the customer_phone of this AnalyticsOptOutReportModel.  # noqa: E501

        The phone number of the customer who opted-in or opted-out.  # noqa: E501

        :return: The customer_phone of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: str
        """
        return self._customer_phone

    @customer_phone.setter
    def customer_phone(self, customer_phone):
        """Sets the customer_phone of this AnalyticsOptOutReportModel.

        The phone number of the customer who opted-in or opted-out.  # noqa: E501

        :param customer_phone: The customer_phone of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: str
        """

        self._customer_phone = customer_phone

    @property
    def org_channel_name(self):
        """Gets the org_channel_name of this AnalyticsOptOutReportModel.  # noqa: E501

        The display name of the org channel that the Opt-In or Opt-Out event came through on.  # noqa: E501

        :return: The org_channel_name of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: str
        """
        return self._org_channel_name

    @org_channel_name.setter
    def org_channel_name(self, org_channel_name):
        """Sets the org_channel_name of this AnalyticsOptOutReportModel.

        The display name of the org channel that the Opt-In or Opt-Out event came through on.  # noqa: E501

        :param org_channel_name: The org_channel_name of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: str
        """

        self._org_channel_name = org_channel_name

    @property
    def org_channel_value(self):
        """Gets the org_channel_value of this AnalyticsOptOutReportModel.  # noqa: E501

        The phone number of the org channel that the Opt-In or Opt-Out event came through on.  # noqa: E501

        :return: The org_channel_value of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: str
        """
        return self._org_channel_value

    @org_channel_value.setter
    def org_channel_value(self, org_channel_value):
        """Sets the org_channel_value of this AnalyticsOptOutReportModel.

        The phone number of the org channel that the Opt-In or Opt-Out event came through on.  # noqa: E501

        :param org_channel_value: The org_channel_value of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: str
        """

        self._org_channel_value = org_channel_value

    @property
    def status(self):
        """Gets the status of this AnalyticsOptOutReportModel.  # noqa: E501

        The resulting status (true if customer has opted-out, false if customer has opted back in).  # noqa: E501

        :return: The status of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalyticsOptOutReportModel.

        The resulting status (true if customer has opted-out, false if customer has opted back in).  # noqa: E501

        :param status: The status of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this AnalyticsOptOutReportModel.  # noqa: E501

        The event type ().  # noqa: E501

        :return: The type of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyticsOptOutReportModel.

        The event type ().  # noqa: E501

        :param type: The type of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def customer_id(self):
        """Gets the customer_id of this AnalyticsOptOutReportModel.  # noqa: E501

        The customerId of the customer who opted-in or opted-out.  # noqa: E501

        :return: The customer_id of this AnalyticsOptOutReportModel.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AnalyticsOptOutReportModel.

        The customerId of the customer who opted-in or opted-out.  # noqa: E501

        :param customer_id: The customer_id of this AnalyticsOptOutReportModel.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsOptOutReportModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsOptOutReportModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
