# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PounceModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'team_member_id': 'int',
        'repeat': 'str',
        'trigger_type': 'str',
        'trigger_value': 'str',
        'action_type': 'str',
        'action_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'team_member_id': 'teamMemberId',
        'repeat': 'repeat',
        'trigger_type': 'triggerType',
        'trigger_value': 'triggerValue',
        'action_type': 'actionType',
        'action_value': 'actionValue'
    }

    def __init__(self, id=None, team_member_id=None, repeat=None, trigger_type=None, trigger_value=None, action_type=None, action_value=None):  # noqa: E501
        """PounceModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._team_member_id = None
        self._repeat = None
        self._trigger_type = None
        self._trigger_value = None
        self._action_type = None
        self._action_value = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if team_member_id is not None:
            self.team_member_id = team_member_id
        if repeat is not None:
            self.repeat = repeat
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if trigger_value is not None:
            self.trigger_value = trigger_value
        if action_type is not None:
            self.action_type = action_type
        if action_value is not None:
            self.action_value = action_value

    @property
    def id(self):
        """Gets the id of this PounceModel.  # noqa: E501

        Id of the pounce  # noqa: E501

        :return: The id of this PounceModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PounceModel.

        Id of the pounce  # noqa: E501

        :param id: The id of this PounceModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def team_member_id(self):
        """Gets the team_member_id of this PounceModel.  # noqa: E501

        Id of the team member that this pounce applies to  # noqa: E501

        :return: The team_member_id of this PounceModel.  # noqa: E501
        :rtype: int
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this PounceModel.

        Id of the team member that this pounce applies to  # noqa: E501

        :param team_member_id: The team_member_id of this PounceModel.  # noqa: E501
        :type: int
        """

        self._team_member_id = team_member_id

    @property
    def repeat(self):
        """Gets the repeat of this PounceModel.  # noqa: E501

        Repeat option  # noqa: E501

        :return: The repeat of this PounceModel.  # noqa: E501
        :rtype: str
        """
        return self._repeat

    @repeat.setter
    def repeat(self, repeat):
        """Sets the repeat of this PounceModel.

        Repeat option  # noqa: E501

        :param repeat: The repeat of this PounceModel.  # noqa: E501
        :type: str
        """

        self._repeat = repeat

    @property
    def trigger_type(self):
        """Gets the trigger_type of this PounceModel.  # noqa: E501

        Type of the trigger that will cause the pounce to act  # noqa: E501

        :return: The trigger_type of this PounceModel.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this PounceModel.

        Type of the trigger that will cause the pounce to act  # noqa: E501

        :param trigger_type: The trigger_type of this PounceModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["login", "route", "immediate"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def trigger_value(self):
        """Gets the trigger_value of this PounceModel.  # noqa: E501

        Value of the trigger  # noqa: E501

        :return: The trigger_value of this PounceModel.  # noqa: E501
        :rtype: str
        """
        return self._trigger_value

    @trigger_value.setter
    def trigger_value(self, trigger_value):
        """Sets the trigger_value of this PounceModel.

        Value of the trigger  # noqa: E501

        :param trigger_value: The trigger_value of this PounceModel.  # noqa: E501
        :type: str
        """

        self._trigger_value = trigger_value

    @property
    def action_type(self):
        """Gets the action_type of this PounceModel.  # noqa: E501

        Type of the action that the pounce will perform  # noqa: E501

        :return: The action_type of this PounceModel.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this PounceModel.

        Type of the action that the pounce will perform  # noqa: E501

        :param action_type: The action_type of this PounceModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["overlay", "log"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"  # noqa: E501
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def action_value(self):
        """Gets the action_value of this PounceModel.  # noqa: E501

        Value of the action  # noqa: E501

        :return: The action_value of this PounceModel.  # noqa: E501
        :rtype: str
        """
        return self._action_value

    @action_value.setter
    def action_value(self, action_value):
        """Sets the action_value of this PounceModel.

        Value of the action  # noqa: E501

        :param action_value: The action_value of this PounceModel.  # noqa: E501
        :type: str
        """

        self._action_value = action_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PounceModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PounceModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
