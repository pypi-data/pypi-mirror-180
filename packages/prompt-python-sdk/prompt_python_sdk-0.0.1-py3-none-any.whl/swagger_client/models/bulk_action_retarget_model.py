# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkActionRetargetModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'bulk_action_id': 'int',
        'retarget_bulk_action_id': 'int',
        'metric': 'str',
        'metric_info': 'str',
        'team_member_id': 'int',
        'variant_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'bulk_action_id': 'bulkActionId',
        'retarget_bulk_action_id': 'retargetBulkActionId',
        'metric': 'metric',
        'metric_info': 'metricInfo',
        'team_member_id': 'teamMemberId',
        'variant_id': 'variantId'
    }

    def __init__(self, id=None, bulk_action_id=None, retarget_bulk_action_id=None, metric=None, metric_info=None, team_member_id=None, variant_id=None):  # noqa: E501
        """BulkActionRetargetModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._bulk_action_id = None
        self._retarget_bulk_action_id = None
        self._metric = None
        self._metric_info = None
        self._team_member_id = None
        self._variant_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if bulk_action_id is not None:
            self.bulk_action_id = bulk_action_id
        self.retarget_bulk_action_id = retarget_bulk_action_id
        self.metric = metric
        if metric_info is not None:
            self.metric_info = metric_info
        if team_member_id is not None:
            self.team_member_id = team_member_id
        if variant_id is not None:
            self.variant_id = variant_id

    @property
    def id(self):
        """Gets the id of this BulkActionRetargetModel.  # noqa: E501

        The system generated unique id for this retarget info.  # noqa: E501

        :return: The id of this BulkActionRetargetModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BulkActionRetargetModel.

        The system generated unique id for this retarget info.  # noqa: E501

        :param id: The id of this BulkActionRetargetModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def bulk_action_id(self):
        """Gets the bulk_action_id of this BulkActionRetargetModel.  # noqa: E501

        The system generated unique id for newly created bulk action.  # noqa: E501

        :return: The bulk_action_id of this BulkActionRetargetModel.  # noqa: E501
        :rtype: int
        """
        return self._bulk_action_id

    @bulk_action_id.setter
    def bulk_action_id(self, bulk_action_id):
        """Sets the bulk_action_id of this BulkActionRetargetModel.

        The system generated unique id for newly created bulk action.  # noqa: E501

        :param bulk_action_id: The bulk_action_id of this BulkActionRetargetModel.  # noqa: E501
        :type: int
        """

        self._bulk_action_id = bulk_action_id

    @property
    def retarget_bulk_action_id(self):
        """Gets the retarget_bulk_action_id of this BulkActionRetargetModel.  # noqa: E501

        Id of the bulk action to retarget.  # noqa: E501

        :return: The retarget_bulk_action_id of this BulkActionRetargetModel.  # noqa: E501
        :rtype: int
        """
        return self._retarget_bulk_action_id

    @retarget_bulk_action_id.setter
    def retarget_bulk_action_id(self, retarget_bulk_action_id):
        """Sets the retarget_bulk_action_id of this BulkActionRetargetModel.

        Id of the bulk action to retarget.  # noqa: E501

        :param retarget_bulk_action_id: The retarget_bulk_action_id of this BulkActionRetargetModel.  # noqa: E501
        :type: int
        """
        if retarget_bulk_action_id is None:
            raise ValueError("Invalid value for `retarget_bulk_action_id`, must not be `None`")  # noqa: E501

        self._retarget_bulk_action_id = retarget_bulk_action_id

    @property
    def metric(self):
        """Gets the metric of this BulkActionRetargetModel.  # noqa: E501

        The metric being retargeted.  # noqa: E501

        :return: The metric of this BulkActionRetargetModel.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this BulkActionRetargetModel.

        The metric being retargeted.  # noqa: E501

        :param metric: The metric of this BulkActionRetargetModel.  # noqa: E501
        :type: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501
        allowed_values = ["ALL", "DELIVERED", "SKIPPED", "QUEUED", "LOCKED", "CANCELLED", "ERROR_ANY", "ENGAGED_INSTANT_APP_OPENED", "ENGAGED_SMART_LINK_CLICKED", "ENGAGED_REPLIED", "ENGAGED_REPLIED_TO_REPLY", "NO_RESPONSE", "OPT_OUT", "RESOLUTION", "ERROR_SPECIFIC", "ADDED_TAG", "PROCESSING_PENDING"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"  # noqa: E501
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def metric_info(self):
        """Gets the metric_info of this BulkActionRetargetModel.  # noqa: E501

        The metric info, if any.  # noqa: E501

        :return: The metric_info of this BulkActionRetargetModel.  # noqa: E501
        :rtype: str
        """
        return self._metric_info

    @metric_info.setter
    def metric_info(self, metric_info):
        """Sets the metric_info of this BulkActionRetargetModel.

        The metric info, if any.  # noqa: E501

        :param metric_info: The metric_info of this BulkActionRetargetModel.  # noqa: E501
        :type: str
        """

        self._metric_info = metric_info

    @property
    def team_member_id(self):
        """Gets the team_member_id of this BulkActionRetargetModel.  # noqa: E501

        Id of the team member being retargeted, if any.  # noqa: E501

        :return: The team_member_id of this BulkActionRetargetModel.  # noqa: E501
        :rtype: int
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this BulkActionRetargetModel.

        Id of the team member being retargeted, if any.  # noqa: E501

        :param team_member_id: The team_member_id of this BulkActionRetargetModel.  # noqa: E501
        :type: int
        """

        self._team_member_id = team_member_id

    @property
    def variant_id(self):
        """Gets the variant_id of this BulkActionRetargetModel.  # noqa: E501

        Id of the variant being retargeted, if any.  # noqa: E501

        :return: The variant_id of this BulkActionRetargetModel.  # noqa: E501
        :rtype: int
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this BulkActionRetargetModel.

        Id of the variant being retargeted, if any.  # noqa: E501

        :param variant_id: The variant_id of this BulkActionRetargetModel.  # noqa: E501
        :type: int
        """

        self._variant_id = variant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkActionRetargetModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkActionRetargetModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
