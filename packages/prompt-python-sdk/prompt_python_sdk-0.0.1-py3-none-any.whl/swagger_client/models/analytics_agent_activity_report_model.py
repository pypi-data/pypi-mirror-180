# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsAgentActivityReportModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_name': 'str',
        'total_opened_interactions': 'int',
        'completed_interactions': 'int',
        'open_interactions': 'int',
        'ignored_interactions': 'int',
        'responded_interactions': 'int',
        'outgoing_messages_count': 'int',
        'total_conversation_time': 'int',
        'total_response_time': 'int',
        'avg_agent_response_time': 'int',
        'avg_conversation_time': 'int',
        'contact_action_confirms_count': 'int'
    }

    attribute_map = {
        'agent_name': 'agentName',
        'total_opened_interactions': 'totalOpenedInteractions',
        'completed_interactions': 'completedInteractions',
        'open_interactions': 'openInteractions',
        'ignored_interactions': 'ignoredInteractions',
        'responded_interactions': 'respondedInteractions',
        'outgoing_messages_count': 'outgoingMessagesCount',
        'total_conversation_time': 'totalConversationTime',
        'total_response_time': 'totalResponseTime',
        'avg_agent_response_time': 'avgAgentResponseTime',
        'avg_conversation_time': 'avgConversationTime',
        'contact_action_confirms_count': 'contactActionConfirmsCount'
    }

    def __init__(self, agent_name=None, total_opened_interactions=None, completed_interactions=None, open_interactions=None, ignored_interactions=None, responded_interactions=None, outgoing_messages_count=None, total_conversation_time=None, total_response_time=None, avg_agent_response_time=None, avg_conversation_time=None, contact_action_confirms_count=None):  # noqa: E501
        """AnalyticsAgentActivityReportModel - a model defined in Swagger"""  # noqa: E501
        self._agent_name = None
        self._total_opened_interactions = None
        self._completed_interactions = None
        self._open_interactions = None
        self._ignored_interactions = None
        self._responded_interactions = None
        self._outgoing_messages_count = None
        self._total_conversation_time = None
        self._total_response_time = None
        self._avg_agent_response_time = None
        self._avg_conversation_time = None
        self._contact_action_confirms_count = None
        self.discriminator = None
        if agent_name is not None:
            self.agent_name = agent_name
        if total_opened_interactions is not None:
            self.total_opened_interactions = total_opened_interactions
        if completed_interactions is not None:
            self.completed_interactions = completed_interactions
        if open_interactions is not None:
            self.open_interactions = open_interactions
        if ignored_interactions is not None:
            self.ignored_interactions = ignored_interactions
        if responded_interactions is not None:
            self.responded_interactions = responded_interactions
        if outgoing_messages_count is not None:
            self.outgoing_messages_count = outgoing_messages_count
        if total_conversation_time is not None:
            self.total_conversation_time = total_conversation_time
        if total_response_time is not None:
            self.total_response_time = total_response_time
        if avg_agent_response_time is not None:
            self.avg_agent_response_time = avg_agent_response_time
        if avg_conversation_time is not None:
            self.avg_conversation_time = avg_conversation_time
        if contact_action_confirms_count is not None:
            self.contact_action_confirms_count = contact_action_confirms_count

    @property
    def agent_name(self):
        """Gets the agent_name of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The agent's display name.  # noqa: E501

        :return: The agent_name of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: str
        """
        return self._agent_name

    @agent_name.setter
    def agent_name(self, agent_name):
        """Sets the agent_name of this AnalyticsAgentActivityReportModel.

        The agent's display name.  # noqa: E501

        :param agent_name: The agent_name of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: str
        """

        self._agent_name = agent_name

    @property
    def total_opened_interactions(self):
        """Gets the total_opened_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of interactions that were opened during the window, or still open at the start of the window.  # noqa: E501

        :return: The total_opened_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._total_opened_interactions

    @total_opened_interactions.setter
    def total_opened_interactions(self, total_opened_interactions):
        """Sets the total_opened_interactions of this AnalyticsAgentActivityReportModel.

        The number of interactions that were opened during the window, or still open at the start of the window.  # noqa: E501

        :param total_opened_interactions: The total_opened_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._total_opened_interactions = total_opened_interactions

    @property
    def completed_interactions(self):
        """Gets the completed_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of interactions that were closed during the window.  # noqa: E501

        :return: The completed_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._completed_interactions

    @completed_interactions.setter
    def completed_interactions(self, completed_interactions):
        """Sets the completed_interactions of this AnalyticsAgentActivityReportModel.

        The number of interactions that were closed during the window.  # noqa: E501

        :param completed_interactions: The completed_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._completed_interactions = completed_interactions

    @property
    def open_interactions(self):
        """Gets the open_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of interactions that were open at the end of the window.  # noqa: E501

        :return: The open_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._open_interactions

    @open_interactions.setter
    def open_interactions(self, open_interactions):
        """Sets the open_interactions of this AnalyticsAgentActivityReportModel.

        The number of interactions that were open at the end of the window.  # noqa: E501

        :param open_interactions: The open_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._open_interactions = open_interactions

    @property
    def ignored_interactions(self):
        """Gets the ignored_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of interactions that were ignored during the window.  # noqa: E501

        :return: The ignored_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._ignored_interactions

    @ignored_interactions.setter
    def ignored_interactions(self, ignored_interactions):
        """Sets the ignored_interactions of this AnalyticsAgentActivityReportModel.

        The number of interactions that were ignored during the window.  # noqa: E501

        :param ignored_interactions: The ignored_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._ignored_interactions = ignored_interactions

    @property
    def responded_interactions(self):
        """Gets the responded_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of interactions that were responded to during the window.  # noqa: E501

        :return: The responded_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._responded_interactions

    @responded_interactions.setter
    def responded_interactions(self, responded_interactions):
        """Sets the responded_interactions of this AnalyticsAgentActivityReportModel.

        The number of interactions that were responded to during the window.  # noqa: E501

        :param responded_interactions: The responded_interactions of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._responded_interactions = responded_interactions

    @property
    def outgoing_messages_count(self):
        """Gets the outgoing_messages_count of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of messages that were sent during the window.  # noqa: E501

        :return: The outgoing_messages_count of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._outgoing_messages_count

    @outgoing_messages_count.setter
    def outgoing_messages_count(self, outgoing_messages_count):
        """Sets the outgoing_messages_count of this AnalyticsAgentActivityReportModel.

        The number of messages that were sent during the window.  # noqa: E501

        :param outgoing_messages_count: The outgoing_messages_count of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._outgoing_messages_count = outgoing_messages_count

    @property
    def total_conversation_time(self):
        """Gets the total_conversation_time of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The total time (in ms) between the opening event and the time the interaction was completed.  # noqa: E501

        :return: The total_conversation_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._total_conversation_time

    @total_conversation_time.setter
    def total_conversation_time(self, total_conversation_time):
        """Sets the total_conversation_time of this AnalyticsAgentActivityReportModel.

        The total time (in ms) between the opening event and the time the interaction was completed.  # noqa: E501

        :param total_conversation_time: The total_conversation_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._total_conversation_time = total_conversation_time

    @property
    def total_response_time(self):
        """Gets the total_response_time of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The total time (in ms) between the opening event and the time the interaction was first responded to.  # noqa: E501

        :return: The total_response_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._total_response_time

    @total_response_time.setter
    def total_response_time(self, total_response_time):
        """Sets the total_response_time of this AnalyticsAgentActivityReportModel.

        The total time (in ms) between the opening event and the time the interaction was first responded to.  # noqa: E501

        :param total_response_time: The total_response_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._total_response_time = total_response_time

    @property
    def avg_agent_response_time(self):
        """Gets the avg_agent_response_time of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The average time (in ms) between the opening event and the time the interaction was first responded to.  # noqa: E501

        :return: The avg_agent_response_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._avg_agent_response_time

    @avg_agent_response_time.setter
    def avg_agent_response_time(self, avg_agent_response_time):
        """Sets the avg_agent_response_time of this AnalyticsAgentActivityReportModel.

        The average time (in ms) between the opening event and the time the interaction was first responded to.  # noqa: E501

        :param avg_agent_response_time: The avg_agent_response_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._avg_agent_response_time = avg_agent_response_time

    @property
    def avg_conversation_time(self):
        """Gets the avg_conversation_time of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The average time (in ms) between the opening event and the time the interaction was completed.  # noqa: E501

        :return: The avg_conversation_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._avg_conversation_time

    @avg_conversation_time.setter
    def avg_conversation_time(self, avg_conversation_time):
        """Sets the avg_conversation_time of this AnalyticsAgentActivityReportModel.

        The average time (in ms) between the opening event and the time the interaction was completed.  # noqa: E501

        :param avg_conversation_time: The avg_conversation_time of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._avg_conversation_time = avg_conversation_time

    @property
    def contact_action_confirms_count(self):
        """Gets the contact_action_confirms_count of this AnalyticsAgentActivityReportModel.  # noqa: E501

        The number of contact action messages that were confirmed during the window.  # noqa: E501

        :return: The contact_action_confirms_count of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :rtype: int
        """
        return self._contact_action_confirms_count

    @contact_action_confirms_count.setter
    def contact_action_confirms_count(self, contact_action_confirms_count):
        """Sets the contact_action_confirms_count of this AnalyticsAgentActivityReportModel.

        The number of contact action messages that were confirmed during the window.  # noqa: E501

        :param contact_action_confirms_count: The contact_action_confirms_count of this AnalyticsAgentActivityReportModel.  # noqa: E501
        :type: int
        """

        self._contact_action_confirms_count = contact_action_confirms_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsAgentActivityReportModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsAgentActivityReportModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
