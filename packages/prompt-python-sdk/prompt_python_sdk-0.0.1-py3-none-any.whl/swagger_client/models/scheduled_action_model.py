# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledActionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'org_channel': 'OrgChannelModel',
        'customer_channel': 'CustomerChannelModel',
        'created_timestamp': 'int',
        'fulfillment': 'ScheduledActionFulfillmentModel',
        'status': 'str',
        'deliver_on': 'int'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'org_channel': 'orgChannel',
        'customer_channel': 'customerChannel',
        'created_timestamp': 'createdTimestamp',
        'fulfillment': 'fulfillment',
        'status': 'status',
        'deliver_on': 'deliverOn'
    }

    def __init__(self, id=None, user_id=None, org_channel=None, customer_channel=None, created_timestamp=None, fulfillment=None, status=None, deliver_on=None):  # noqa: E501
        """ScheduledActionModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._org_channel = None
        self._customer_channel = None
        self._created_timestamp = None
        self._fulfillment = None
        self._status = None
        self._deliver_on = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if org_channel is not None:
            self.org_channel = org_channel
        if customer_channel is not None:
            self.customer_channel = customer_channel
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if fulfillment is not None:
            self.fulfillment = fulfillment
        if status is not None:
            self.status = status
        if deliver_on is not None:
            self.deliver_on = deliver_on

    @property
    def id(self):
        """Gets the id of this ScheduledActionModel.  # noqa: E501

        The system generated unique id for this Scheduled Action.  # noqa: E501

        :return: The id of this ScheduledActionModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduledActionModel.

        The system generated unique id for this Scheduled Action.  # noqa: E501

        :param id: The id of this ScheduledActionModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this ScheduledActionModel.  # noqa: E501

        ID of the user that will deliver the Scheduled Action.  # noqa: E501

        :return: The user_id of this ScheduledActionModel.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ScheduledActionModel.

        ID of the user that will deliver the Scheduled Action.  # noqa: E501

        :param user_id: The user_id of this ScheduledActionModel.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def org_channel(self):
        """Gets the org_channel of this ScheduledActionModel.  # noqa: E501


        :return: The org_channel of this ScheduledActionModel.  # noqa: E501
        :rtype: OrgChannelModel
        """
        return self._org_channel

    @org_channel.setter
    def org_channel(self, org_channel):
        """Sets the org_channel of this ScheduledActionModel.


        :param org_channel: The org_channel of this ScheduledActionModel.  # noqa: E501
        :type: OrgChannelModel
        """

        self._org_channel = org_channel

    @property
    def customer_channel(self):
        """Gets the customer_channel of this ScheduledActionModel.  # noqa: E501


        :return: The customer_channel of this ScheduledActionModel.  # noqa: E501
        :rtype: CustomerChannelModel
        """
        return self._customer_channel

    @customer_channel.setter
    def customer_channel(self, customer_channel):
        """Sets the customer_channel of this ScheduledActionModel.


        :param customer_channel: The customer_channel of this ScheduledActionModel.  # noqa: E501
        :type: CustomerChannelModel
        """

        self._customer_channel = customer_channel

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ScheduledActionModel.  # noqa: E501

        The time the Scheduled Action was created.  # noqa: E501

        :return: The created_timestamp of this ScheduledActionModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ScheduledActionModel.

        The time the Scheduled Action was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this ScheduledActionModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def fulfillment(self):
        """Gets the fulfillment of this ScheduledActionModel.  # noqa: E501


        :return: The fulfillment of this ScheduledActionModel.  # noqa: E501
        :rtype: ScheduledActionFulfillmentModel
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this ScheduledActionModel.


        :param fulfillment: The fulfillment of this ScheduledActionModel.  # noqa: E501
        :type: ScheduledActionFulfillmentModel
        """

        self._fulfillment = fulfillment

    @property
    def status(self):
        """Gets the status of this ScheduledActionModel.  # noqa: E501

        Status of the Scheduled Action.  # noqa: E501

        :return: The status of this ScheduledActionModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScheduledActionModel.

        Status of the Scheduled Action.  # noqa: E501

        :param status: The status of this ScheduledActionModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCHEDULED", "ABORTED", "COMPLETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def deliver_on(self):
        """Gets the deliver_on of this ScheduledActionModel.  # noqa: E501

        The UTC timestamp the Scheduled Action will be delivered.  # noqa: E501

        :return: The deliver_on of this ScheduledActionModel.  # noqa: E501
        :rtype: int
        """
        return self._deliver_on

    @deliver_on.setter
    def deliver_on(self, deliver_on):
        """Sets the deliver_on of this ScheduledActionModel.

        The UTC timestamp the Scheduled Action will be delivered.  # noqa: E501

        :param deliver_on: The deliver_on of this ScheduledActionModel.  # noqa: E501
        :type: int
        """

        self._deliver_on = deliver_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledActionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledActionModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
