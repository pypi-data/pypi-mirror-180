# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TeamActivityModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_id': 'int',
        'start_time': 'str',
        'end_time': 'str',
        'group_id_filter': 'str',
        'team_member_id_filter': 'str',
        'activity_feed': 'list[TeamActivityEventModel]'
    }

    attribute_map = {
        'org_id': 'orgId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'group_id_filter': 'groupIdFilter',
        'team_member_id_filter': 'teamMemberIdFilter',
        'activity_feed': 'activityFeed'
    }

    def __init__(self, org_id=None, start_time=None, end_time=None, group_id_filter=None, team_member_id_filter=None, activity_feed=None):  # noqa: E501
        """TeamActivityModel - a model defined in Swagger"""  # noqa: E501
        self._org_id = None
        self._start_time = None
        self._end_time = None
        self._group_id_filter = None
        self._team_member_id_filter = None
        self._activity_feed = None
        self.discriminator = None
        if org_id is not None:
            self.org_id = org_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if group_id_filter is not None:
            self.group_id_filter = group_id_filter
        if team_member_id_filter is not None:
            self.team_member_id_filter = team_member_id_filter
        if activity_feed is not None:
            self.activity_feed = activity_feed

    @property
    def org_id(self):
        """Gets the org_id of this TeamActivityModel.  # noqa: E501

        The org id of this organization  # noqa: E501

        :return: The org_id of this TeamActivityModel.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this TeamActivityModel.

        The org id of this organization  # noqa: E501

        :param org_id: The org_id of this TeamActivityModel.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def start_time(self):
        """Gets the start_time of this TeamActivityModel.  # noqa: E501

        The starting time of the activity stream  # noqa: E501

        :return: The start_time of this TeamActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TeamActivityModel.

        The starting time of the activity stream  # noqa: E501

        :param start_time: The start_time of this TeamActivityModel.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TeamActivityModel.  # noqa: E501

        The ending time of the activity stream  # noqa: E501

        :return: The end_time of this TeamActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TeamActivityModel.

        The ending time of the activity stream  # noqa: E501

        :param end_time: The end_time of this TeamActivityModel.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def group_id_filter(self):
        """Gets the group_id_filter of this TeamActivityModel.  # noqa: E501

        Optional, the group filter that was set, if any  # noqa: E501

        :return: The group_id_filter of this TeamActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._group_id_filter

    @group_id_filter.setter
    def group_id_filter(self, group_id_filter):
        """Sets the group_id_filter of this TeamActivityModel.

        Optional, the group filter that was set, if any  # noqa: E501

        :param group_id_filter: The group_id_filter of this TeamActivityModel.  # noqa: E501
        :type: str
        """

        self._group_id_filter = group_id_filter

    @property
    def team_member_id_filter(self):
        """Gets the team_member_id_filter of this TeamActivityModel.  # noqa: E501

        Optional, the team member filter that was set, if any  # noqa: E501

        :return: The team_member_id_filter of this TeamActivityModel.  # noqa: E501
        :rtype: str
        """
        return self._team_member_id_filter

    @team_member_id_filter.setter
    def team_member_id_filter(self, team_member_id_filter):
        """Sets the team_member_id_filter of this TeamActivityModel.

        Optional, the team member filter that was set, if any  # noqa: E501

        :param team_member_id_filter: The team_member_id_filter of this TeamActivityModel.  # noqa: E501
        :type: str
        """

        self._team_member_id_filter = team_member_id_filter

    @property
    def activity_feed(self):
        """Gets the activity_feed of this TeamActivityModel.  # noqa: E501

        The activity stream  # noqa: E501

        :return: The activity_feed of this TeamActivityModel.  # noqa: E501
        :rtype: list[TeamActivityEventModel]
        """
        return self._activity_feed

    @activity_feed.setter
    def activity_feed(self, activity_feed):
        """Sets the activity_feed of this TeamActivityModel.

        The activity stream  # noqa: E501

        :param activity_feed: The activity_feed of this TeamActivityModel.  # noqa: E501
        :type: list[TeamActivityEventModel]
        """

        self._activity_feed = activity_feed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamActivityModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamActivityModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
