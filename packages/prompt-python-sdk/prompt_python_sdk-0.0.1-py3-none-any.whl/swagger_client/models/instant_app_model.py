# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstantAppModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_timestamp': 'int',
        'customer_url': 'str',
        'status': 'str',
        'schema_api_id': 'str',
        'parameters': 'list[Parameter]'
    }

    attribute_map = {
        'id': 'id',
        'created_timestamp': 'createdTimestamp',
        'customer_url': 'customerUrl',
        'status': 'status',
        'schema_api_id': 'schemaApiId',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, created_timestamp=None, customer_url=None, status=None, schema_api_id=None, parameters=None):  # noqa: E501
        """InstantAppModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_timestamp = None
        self._customer_url = None
        self._status = None
        self._schema_api_id = None
        self._parameters = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if customer_url is not None:
            self.customer_url = customer_url
        if status is not None:
            self.status = status
        self.schema_api_id = schema_api_id
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this InstantAppModel.  # noqa: E501

        The system generated unique id for this Instant App.  # noqa: E501

        :return: The id of this InstantAppModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstantAppModel.

        The system generated unique id for this Instant App.  # noqa: E501

        :param id: The id of this InstantAppModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this InstantAppModel.  # noqa: E501

        The time the Instant App was created.  # noqa: E501

        :return: The created_timestamp of this InstantAppModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this InstantAppModel.

        The time the Instant App was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this InstantAppModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def customer_url(self):
        """Gets the customer_url of this InstantAppModel.  # noqa: E501

        The URL for the customer to view and interact with the Instant App.  # noqa: E501

        :return: The customer_url of this InstantAppModel.  # noqa: E501
        :rtype: str
        """
        return self._customer_url

    @customer_url.setter
    def customer_url(self, customer_url):
        """Sets the customer_url of this InstantAppModel.

        The URL for the customer to view and interact with the Instant App.  # noqa: E501

        :param customer_url: The customer_url of this InstantAppModel.  # noqa: E501
        :type: str
        """

        self._customer_url = customer_url

    @property
    def status(self):
        """Gets the status of this InstantAppModel.  # noqa: E501

        The status for this Instant App.  # noqa: E501

        :return: The status of this InstantAppModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstantAppModel.

        The status for this Instant App.  # noqa: E501

        :param status: The status of this InstantAppModel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def schema_api_id(self):
        """Gets the schema_api_id of this InstantAppModel.  # noqa: E501

        The programmatic, unique id of the schema for this instant app.  # noqa: E501

        :return: The schema_api_id of this InstantAppModel.  # noqa: E501
        :rtype: str
        """
        return self._schema_api_id

    @schema_api_id.setter
    def schema_api_id(self, schema_api_id):
        """Sets the schema_api_id of this InstantAppModel.

        The programmatic, unique id of the schema for this instant app.  # noqa: E501

        :param schema_api_id: The schema_api_id of this InstantAppModel.  # noqa: E501
        :type: str
        """
        if schema_api_id is None:
            raise ValueError("Invalid value for `schema_api_id`, must not be `None`")  # noqa: E501

        self._schema_api_id = schema_api_id

    @property
    def parameters(self):
        """Gets the parameters of this InstantAppModel.  # noqa: E501


        :return: The parameters of this InstantAppModel.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this InstantAppModel.


        :param parameters: The parameters of this InstantAppModel.  # noqa: E501
        :type: list[Parameter]
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstantAppModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstantAppModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
