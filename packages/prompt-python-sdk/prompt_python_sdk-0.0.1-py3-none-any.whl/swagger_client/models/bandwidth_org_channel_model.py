# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BandwidthOrgChannelModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'phone_number': 'str',
        'application_id': 'str',
        'authentication_enabled': 'bool',
        'callback_user_id': 'str',
        'callback_password': 'str'
    }

    attribute_map = {
        'phone_number': 'phoneNumber',
        'application_id': 'applicationId',
        'authentication_enabled': 'authenticationEnabled',
        'callback_user_id': 'callbackUserId',
        'callback_password': 'callbackPassword'
    }

    def __init__(self, phone_number=None, application_id=None, authentication_enabled=None, callback_user_id=None, callback_password=None):  # noqa: E501
        """BandwidthOrgChannelModel - a model defined in Swagger"""  # noqa: E501
        self._phone_number = None
        self._application_id = None
        self._authentication_enabled = None
        self._callback_user_id = None
        self._callback_password = None
        self.discriminator = None
        if phone_number is not None:
            self.phone_number = phone_number
        if application_id is not None:
            self.application_id = application_id
        if authentication_enabled is not None:
            self.authentication_enabled = authentication_enabled
        if callback_user_id is not None:
            self.callback_user_id = callback_user_id
        if callback_password is not None:
            self.callback_password = callback_password

    @property
    def phone_number(self):
        """Gets the phone_number of this BandwidthOrgChannelModel.  # noqa: E501

        The outgoing phone number for this Bandwidth org channel  # noqa: E501

        :return: The phone_number of this BandwidthOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this BandwidthOrgChannelModel.

        The outgoing phone number for this Bandwidth org channel  # noqa: E501

        :param phone_number: The phone_number of this BandwidthOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def application_id(self):
        """Gets the application_id of this BandwidthOrgChannelModel.  # noqa: E501

        The id of the bandwidth application that contains the phone number  # noqa: E501

        :return: The application_id of this BandwidthOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this BandwidthOrgChannelModel.

        The id of the bandwidth application that contains the phone number  # noqa: E501

        :param application_id: The application_id of this BandwidthOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def authentication_enabled(self):
        """Gets the authentication_enabled of this BandwidthOrgChannelModel.  # noqa: E501

        Whether an authentication will be included in callbacks from bandwidth  # noqa: E501

        :return: The authentication_enabled of this BandwidthOrgChannelModel.  # noqa: E501
        :rtype: bool
        """
        return self._authentication_enabled

    @authentication_enabled.setter
    def authentication_enabled(self, authentication_enabled):
        """Sets the authentication_enabled of this BandwidthOrgChannelModel.

        Whether an authentication will be included in callbacks from bandwidth  # noqa: E501

        :param authentication_enabled: The authentication_enabled of this BandwidthOrgChannelModel.  # noqa: E501
        :type: bool
        """

        self._authentication_enabled = authentication_enabled

    @property
    def callback_user_id(self):
        """Gets the callback_user_id of this BandwidthOrgChannelModel.  # noqa: E501

        User Id passed in callbacks when authentication is enabled  # noqa: E501

        :return: The callback_user_id of this BandwidthOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._callback_user_id

    @callback_user_id.setter
    def callback_user_id(self, callback_user_id):
        """Sets the callback_user_id of this BandwidthOrgChannelModel.

        User Id passed in callbacks when authentication is enabled  # noqa: E501

        :param callback_user_id: The callback_user_id of this BandwidthOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._callback_user_id = callback_user_id

    @property
    def callback_password(self):
        """Gets the callback_password of this BandwidthOrgChannelModel.  # noqa: E501

        Password passed in callbacks when authentication is enabled  # noqa: E501

        :return: The callback_password of this BandwidthOrgChannelModel.  # noqa: E501
        :rtype: str
        """
        return self._callback_password

    @callback_password.setter
    def callback_password(self, callback_password):
        """Sets the callback_password of this BandwidthOrgChannelModel.

        Password passed in callbacks when authentication is enabled  # noqa: E501

        :param callback_password: The callback_password of this BandwidthOrgChannelModel.  # noqa: E501
        :type: str
        """

        self._callback_password = callback_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BandwidthOrgChannelModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BandwidthOrgChannelModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
