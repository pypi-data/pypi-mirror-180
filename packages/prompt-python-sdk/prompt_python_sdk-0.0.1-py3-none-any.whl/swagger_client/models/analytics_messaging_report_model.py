# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsMessagingReportModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messaging_report': 'list[AnalyticsMessagingReportListItemModel]',
        'unique_active_customers': 'int',
        'unique_active_channels': 'int',
        'unique_active_agents': 'int'
    }

    attribute_map = {
        'messaging_report': 'messagingReport',
        'unique_active_customers': 'uniqueActiveCustomers',
        'unique_active_channels': 'uniqueActiveChannels',
        'unique_active_agents': 'uniqueActiveAgents'
    }

    def __init__(self, messaging_report=None, unique_active_customers=None, unique_active_channels=None, unique_active_agents=None):  # noqa: E501
        """AnalyticsMessagingReportModel - a model defined in Swagger"""  # noqa: E501
        self._messaging_report = None
        self._unique_active_customers = None
        self._unique_active_channels = None
        self._unique_active_agents = None
        self.discriminator = None
        if messaging_report is not None:
            self.messaging_report = messaging_report
        if unique_active_customers is not None:
            self.unique_active_customers = unique_active_customers
        if unique_active_channels is not None:
            self.unique_active_channels = unique_active_channels
        if unique_active_agents is not None:
            self.unique_active_agents = unique_active_agents

    @property
    def messaging_report(self):
        """Gets the messaging_report of this AnalyticsMessagingReportModel.  # noqa: E501

        The time series messaging report.  # noqa: E501

        :return: The messaging_report of this AnalyticsMessagingReportModel.  # noqa: E501
        :rtype: list[AnalyticsMessagingReportListItemModel]
        """
        return self._messaging_report

    @messaging_report.setter
    def messaging_report(self, messaging_report):
        """Sets the messaging_report of this AnalyticsMessagingReportModel.

        The time series messaging report.  # noqa: E501

        :param messaging_report: The messaging_report of this AnalyticsMessagingReportModel.  # noqa: E501
        :type: list[AnalyticsMessagingReportListItemModel]
        """

        self._messaging_report = messaging_report

    @property
    def unique_active_customers(self):
        """Gets the unique_active_customers of this AnalyticsMessagingReportModel.  # noqa: E501

        Unique active customers over requested timeframe.  # noqa: E501

        :return: The unique_active_customers of this AnalyticsMessagingReportModel.  # noqa: E501
        :rtype: int
        """
        return self._unique_active_customers

    @unique_active_customers.setter
    def unique_active_customers(self, unique_active_customers):
        """Sets the unique_active_customers of this AnalyticsMessagingReportModel.

        Unique active customers over requested timeframe.  # noqa: E501

        :param unique_active_customers: The unique_active_customers of this AnalyticsMessagingReportModel.  # noqa: E501
        :type: int
        """

        self._unique_active_customers = unique_active_customers

    @property
    def unique_active_channels(self):
        """Gets the unique_active_channels of this AnalyticsMessagingReportModel.  # noqa: E501

        Unique active channels over requested timeframe.  # noqa: E501

        :return: The unique_active_channels of this AnalyticsMessagingReportModel.  # noqa: E501
        :rtype: int
        """
        return self._unique_active_channels

    @unique_active_channels.setter
    def unique_active_channels(self, unique_active_channels):
        """Sets the unique_active_channels of this AnalyticsMessagingReportModel.

        Unique active channels over requested timeframe.  # noqa: E501

        :param unique_active_channels: The unique_active_channels of this AnalyticsMessagingReportModel.  # noqa: E501
        :type: int
        """

        self._unique_active_channels = unique_active_channels

    @property
    def unique_active_agents(self):
        """Gets the unique_active_agents of this AnalyticsMessagingReportModel.  # noqa: E501

        Unique active agents over requested timeframe.  # noqa: E501

        :return: The unique_active_agents of this AnalyticsMessagingReportModel.  # noqa: E501
        :rtype: int
        """
        return self._unique_active_agents

    @unique_active_agents.setter
    def unique_active_agents(self, unique_active_agents):
        """Sets the unique_active_agents of this AnalyticsMessagingReportModel.

        Unique active agents over requested timeframe.  # noqa: E501

        :param unique_active_agents: The unique_active_agents of this AnalyticsMessagingReportModel.  # noqa: E501
        :type: int
        """

        self._unique_active_agents = unique_active_agents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsMessagingReportModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsMessagingReportModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
