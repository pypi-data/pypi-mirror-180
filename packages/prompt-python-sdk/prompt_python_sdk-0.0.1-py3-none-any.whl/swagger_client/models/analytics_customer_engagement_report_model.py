# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsCustomerEngagementReportModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp_epoch': 'int',
        'active_customers': 'int',
        'engaged_customers': 'int',
        'new_customers': 'int',
        'customer_opt_outs': 'int'
    }

    attribute_map = {
        'timestamp_epoch': 'timestampEpoch',
        'active_customers': 'activeCustomers',
        'engaged_customers': 'engagedCustomers',
        'new_customers': 'newCustomers',
        'customer_opt_outs': 'customerOptOuts'
    }

    def __init__(self, timestamp_epoch=None, active_customers=None, engaged_customers=None, new_customers=None, customer_opt_outs=None):  # noqa: E501
        """AnalyticsCustomerEngagementReportModel - a model defined in Swagger"""  # noqa: E501
        self._timestamp_epoch = None
        self._active_customers = None
        self._engaged_customers = None
        self._new_customers = None
        self._customer_opt_outs = None
        self.discriminator = None
        if timestamp_epoch is not None:
            self.timestamp_epoch = timestamp_epoch
        if active_customers is not None:
            self.active_customers = active_customers
        if engaged_customers is not None:
            self.engaged_customers = engaged_customers
        if new_customers is not None:
            self.new_customers = new_customers
        if customer_opt_outs is not None:
            self.customer_opt_outs = customer_opt_outs

    @property
    def timestamp_epoch(self):
        """Gets the timestamp_epoch of this AnalyticsCustomerEngagementReportModel.  # noqa: E501

        The timestamp at the start of the default group-by window.  # noqa: E501

        :return: The timestamp_epoch of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_epoch

    @timestamp_epoch.setter
    def timestamp_epoch(self, timestamp_epoch):
        """Sets the timestamp_epoch of this AnalyticsCustomerEngagementReportModel.

        The timestamp at the start of the default group-by window.  # noqa: E501

        :param timestamp_epoch: The timestamp_epoch of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :type: int
        """

        self._timestamp_epoch = timestamp_epoch

    @property
    def active_customers(self):
        """Gets the active_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501

        The number of active customers in this group-by window.  # noqa: E501

        :return: The active_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :rtype: int
        """
        return self._active_customers

    @active_customers.setter
    def active_customers(self, active_customers):
        """Sets the active_customers of this AnalyticsCustomerEngagementReportModel.

        The number of active customers in this group-by window.  # noqa: E501

        :param active_customers: The active_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :type: int
        """

        self._active_customers = active_customers

    @property
    def engaged_customers(self):
        """Gets the engaged_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501

        The number of engaged customers in this group-by window.  # noqa: E501

        :return: The engaged_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :rtype: int
        """
        return self._engaged_customers

    @engaged_customers.setter
    def engaged_customers(self, engaged_customers):
        """Sets the engaged_customers of this AnalyticsCustomerEngagementReportModel.

        The number of engaged customers in this group-by window.  # noqa: E501

        :param engaged_customers: The engaged_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :type: int
        """

        self._engaged_customers = engaged_customers

    @property
    def new_customers(self):
        """Gets the new_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501

        The number of new customers in this group-by window.  # noqa: E501

        :return: The new_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :rtype: int
        """
        return self._new_customers

    @new_customers.setter
    def new_customers(self, new_customers):
        """Sets the new_customers of this AnalyticsCustomerEngagementReportModel.

        The number of new customers in this group-by window.  # noqa: E501

        :param new_customers: The new_customers of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :type: int
        """

        self._new_customers = new_customers

    @property
    def customer_opt_outs(self):
        """Gets the customer_opt_outs of this AnalyticsCustomerEngagementReportModel.  # noqa: E501

        The number of customer Opt-Outs in this group-by window.  # noqa: E501

        :return: The customer_opt_outs of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :rtype: int
        """
        return self._customer_opt_outs

    @customer_opt_outs.setter
    def customer_opt_outs(self, customer_opt_outs):
        """Sets the customer_opt_outs of this AnalyticsCustomerEngagementReportModel.

        The number of customer Opt-Outs in this group-by window.  # noqa: E501

        :param customer_opt_outs: The customer_opt_outs of this AnalyticsCustomerEngagementReportModel.  # noqa: E501
        :type: int
        """

        self._customer_opt_outs = customer_opt_outs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsCustomerEngagementReportModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsCustomerEngagementReportModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
