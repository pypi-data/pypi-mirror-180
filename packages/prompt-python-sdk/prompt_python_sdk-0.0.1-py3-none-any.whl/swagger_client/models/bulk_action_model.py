# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkActionModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'org_channels': 'list[OrgChannelModel]',
        'creator_id': 'int',
        'created_timestamp': 'int',
        'fulfillment': 'BulkActionFulfillmentModel',
        'status': 'str',
        'contact_count': 'int',
        'progress': 'int',
        'error_count': 'int',
        'is_manual': 'bool',
        'start_delivery': 'int',
        'delivery_window_start': 'int',
        'delivery_window_end': 'int',
        'use_existing_channels': 'bool',
        'match_area_codes': 'bool',
        'minimum_channels': 'int',
        'is_test_mode': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'org_channels': 'orgChannels',
        'creator_id': 'creatorId',
        'created_timestamp': 'createdTimestamp',
        'fulfillment': 'fulfillment',
        'status': 'status',
        'contact_count': 'contactCount',
        'progress': 'progress',
        'error_count': 'errorCount',
        'is_manual': 'isManual',
        'start_delivery': 'startDelivery',
        'delivery_window_start': 'deliveryWindowStart',
        'delivery_window_end': 'deliveryWindowEnd',
        'use_existing_channels': 'useExistingChannels',
        'match_area_codes': 'matchAreaCodes',
        'minimum_channels': 'minimumChannels',
        'is_test_mode': 'isTestMode',
        'description': 'description'
    }

    def __init__(self, id=None, org_channels=None, creator_id=None, created_timestamp=None, fulfillment=None, status=None, contact_count=None, progress=None, error_count=None, is_manual=None, start_delivery=None, delivery_window_start=None, delivery_window_end=None, use_existing_channels=None, match_area_codes=None, minimum_channels=None, is_test_mode=None, description=None):  # noqa: E501
        """BulkActionModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._org_channels = None
        self._creator_id = None
        self._created_timestamp = None
        self._fulfillment = None
        self._status = None
        self._contact_count = None
        self._progress = None
        self._error_count = None
        self._is_manual = None
        self._start_delivery = None
        self._delivery_window_start = None
        self._delivery_window_end = None
        self._use_existing_channels = None
        self._match_area_codes = None
        self._minimum_channels = None
        self._is_test_mode = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if org_channels is not None:
            self.org_channels = org_channels
        if creator_id is not None:
            self.creator_id = creator_id
        if created_timestamp is not None:
            self.created_timestamp = created_timestamp
        if fulfillment is not None:
            self.fulfillment = fulfillment
        if status is not None:
            self.status = status
        if contact_count is not None:
            self.contact_count = contact_count
        if progress is not None:
            self.progress = progress
        if error_count is not None:
            self.error_count = error_count
        if is_manual is not None:
            self.is_manual = is_manual
        if start_delivery is not None:
            self.start_delivery = start_delivery
        if delivery_window_start is not None:
            self.delivery_window_start = delivery_window_start
        if delivery_window_end is not None:
            self.delivery_window_end = delivery_window_end
        if use_existing_channels is not None:
            self.use_existing_channels = use_existing_channels
        if match_area_codes is not None:
            self.match_area_codes = match_area_codes
        if minimum_channels is not None:
            self.minimum_channels = minimum_channels
        if is_test_mode is not None:
            self.is_test_mode = is_test_mode
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this BulkActionModel.  # noqa: E501

        The system generated unique id for this Bulk Action.  # noqa: E501

        :return: The id of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BulkActionModel.

        The system generated unique id for this Bulk Action.  # noqa: E501

        :param id: The id of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org_channels(self):
        """Gets the org_channels of this BulkActionModel.  # noqa: E501

        The org channels used for sending for message or Instant App actions  # noqa: E501

        :return: The org_channels of this BulkActionModel.  # noqa: E501
        :rtype: list[OrgChannelModel]
        """
        return self._org_channels

    @org_channels.setter
    def org_channels(self, org_channels):
        """Sets the org_channels of this BulkActionModel.

        The org channels used for sending for message or Instant App actions  # noqa: E501

        :param org_channels: The org_channels of this BulkActionModel.  # noqa: E501
        :type: list[OrgChannelModel]
        """

        self._org_channels = org_channels

    @property
    def creator_id(self):
        """Gets the creator_id of this BulkActionModel.  # noqa: E501

        ID of the user that created the Contact List fulfillment.  # noqa: E501

        :return: The creator_id of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this BulkActionModel.

        ID of the user that created the Contact List fulfillment.  # noqa: E501

        :param creator_id: The creator_id of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this BulkActionModel.  # noqa: E501

        The time the Bulk Action was created.  # noqa: E501

        :return: The created_timestamp of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this BulkActionModel.

        The time the Bulk Action was created.  # noqa: E501

        :param created_timestamp: The created_timestamp of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._created_timestamp = created_timestamp

    @property
    def fulfillment(self):
        """Gets the fulfillment of this BulkActionModel.  # noqa: E501


        :return: The fulfillment of this BulkActionModel.  # noqa: E501
        :rtype: BulkActionFulfillmentModel
        """
        return self._fulfillment

    @fulfillment.setter
    def fulfillment(self, fulfillment):
        """Sets the fulfillment of this BulkActionModel.


        :param fulfillment: The fulfillment of this BulkActionModel.  # noqa: E501
        :type: BulkActionFulfillmentModel
        """

        self._fulfillment = fulfillment

    @property
    def status(self):
        """Gets the status of this BulkActionModel.  # noqa: E501

        Status of the bulk action.  # noqa: E501

        :return: The status of this BulkActionModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BulkActionModel.

        Status of the bulk action.  # noqa: E501

        :param status: The status of this BulkActionModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["SENDING", "COMPLETED", "ABORTED", "SCHEDULED", "INITIALIZING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def contact_count(self):
        """Gets the contact_count of this BulkActionModel.  # noqa: E501

        The number of contacts the action will be performed on.  # noqa: E501

        :return: The contact_count of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._contact_count

    @contact_count.setter
    def contact_count(self, contact_count):
        """Sets the contact_count of this BulkActionModel.

        The number of contacts the action will be performed on.  # noqa: E501

        :param contact_count: The contact_count of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._contact_count = contact_count

    @property
    def progress(self):
        """Gets the progress of this BulkActionModel.  # noqa: E501

        The number of contacts who have been processed so far.  # noqa: E501

        :return: The progress of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this BulkActionModel.

        The number of contacts who have been processed so far.  # noqa: E501

        :param progress: The progress of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def error_count(self):
        """Gets the error_count of this BulkActionModel.  # noqa: E501

        The number of contacts that an error has occurred on  # noqa: E501

        :return: The error_count of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this BulkActionModel.

        The number of contacts that an error has occurred on  # noqa: E501

        :param error_count: The error_count of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def is_manual(self):
        """Gets the is_manual of this BulkActionModel.  # noqa: E501

        If there must be a manual button press for each message sent  # noqa: E501

        :return: The is_manual of this BulkActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this BulkActionModel.

        If there must be a manual button press for each message sent  # noqa: E501

        :param is_manual: The is_manual of this BulkActionModel.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    @property
    def start_delivery(self):
        """Gets the start_delivery of this BulkActionModel.  # noqa: E501

        When Bulk Action will start sending  # noqa: E501

        :return: The start_delivery of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._start_delivery

    @start_delivery.setter
    def start_delivery(self, start_delivery):
        """Sets the start_delivery of this BulkActionModel.

        When Bulk Action will start sending  # noqa: E501

        :param start_delivery: The start_delivery of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._start_delivery = start_delivery

    @property
    def delivery_window_start(self):
        """Gets the delivery_window_start of this BulkActionModel.  # noqa: E501

        Start of the window for what time of day messages can be sent  # noqa: E501

        :return: The delivery_window_start of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_window_start

    @delivery_window_start.setter
    def delivery_window_start(self, delivery_window_start):
        """Sets the delivery_window_start of this BulkActionModel.

        Start of the window for what time of day messages can be sent  # noqa: E501

        :param delivery_window_start: The delivery_window_start of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._delivery_window_start = delivery_window_start

    @property
    def delivery_window_end(self):
        """Gets the delivery_window_end of this BulkActionModel.  # noqa: E501

        End of the window for what time of day messages can be sent  # noqa: E501

        :return: The delivery_window_end of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._delivery_window_end

    @delivery_window_end.setter
    def delivery_window_end(self, delivery_window_end):
        """Sets the delivery_window_end of this BulkActionModel.

        End of the window for what time of day messages can be sent  # noqa: E501

        :param delivery_window_end: The delivery_window_end of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._delivery_window_end = delivery_window_end

    @property
    def use_existing_channels(self):
        """Gets the use_existing_channels of this BulkActionModel.  # noqa: E501

        If a prior conversational history exists with a customer, prioritize use of their last used channel if possible  # noqa: E501

        :return: The use_existing_channels of this BulkActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_existing_channels

    @use_existing_channels.setter
    def use_existing_channels(self, use_existing_channels):
        """Sets the use_existing_channels of this BulkActionModel.

        If a prior conversational history exists with a customer, prioritize use of their last used channel if possible  # noqa: E501

        :param use_existing_channels: The use_existing_channels of this BulkActionModel.  # noqa: E501
        :type: bool
        """

        self._use_existing_channels = use_existing_channels

    @property
    def match_area_codes(self):
        """Gets the match_area_codes of this BulkActionModel.  # noqa: E501

        Match the outgoing number area codes to the customer's area code if possible  # noqa: E501

        :return: The match_area_codes of this BulkActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._match_area_codes

    @match_area_codes.setter
    def match_area_codes(self, match_area_codes):
        """Sets the match_area_codes of this BulkActionModel.

        Match the outgoing number area codes to the customer's area code if possible  # noqa: E501

        :param match_area_codes: The match_area_codes of this BulkActionModel.  # noqa: E501
        :type: bool
        """

        self._match_area_codes = match_area_codes

    @property
    def minimum_channels(self):
        """Gets the minimum_channels of this BulkActionModel.  # noqa: E501

        The minimum amount of channels this bulk action will operate on at a time. Defaults to 1. Must be less than or equal to the total number of channels  # noqa: E501

        :return: The minimum_channels of this BulkActionModel.  # noqa: E501
        :rtype: int
        """
        return self._minimum_channels

    @minimum_channels.setter
    def minimum_channels(self, minimum_channels):
        """Sets the minimum_channels of this BulkActionModel.

        The minimum amount of channels this bulk action will operate on at a time. Defaults to 1. Must be less than or equal to the total number of channels  # noqa: E501

        :param minimum_channels: The minimum_channels of this BulkActionModel.  # noqa: E501
        :type: int
        """

        self._minimum_channels = minimum_channels

    @property
    def is_test_mode(self):
        """Gets the is_test_mode of this BulkActionModel.  # noqa: E501

        Test Mode. All messages will instead be sent as whispers rather than being sent via text  # noqa: E501

        :return: The is_test_mode of this BulkActionModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_test_mode

    @is_test_mode.setter
    def is_test_mode(self, is_test_mode):
        """Sets the is_test_mode of this BulkActionModel.

        Test Mode. All messages will instead be sent as whispers rather than being sent via text  # noqa: E501

        :param is_test_mode: The is_test_mode of this BulkActionModel.  # noqa: E501
        :type: bool
        """

        self._is_test_mode = is_test_mode

    @property
    def description(self):
        """Gets the description of this BulkActionModel.  # noqa: E501

        A name or short description of the bulk action or campaign  # noqa: E501

        :return: The description of this BulkActionModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BulkActionModel.

        A name or short description of the bulk action or campaign  # noqa: E501

        :param description: The description of this BulkActionModel.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkActionModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkActionModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
