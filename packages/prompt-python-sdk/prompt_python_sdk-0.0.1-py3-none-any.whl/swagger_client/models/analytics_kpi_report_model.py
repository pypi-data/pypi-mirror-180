# coding: utf-8

"""
    Prompt.io APIs

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsKpiReportModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp_epoch': 'int',
        'engagement_report': 'AnalyticsCustomerEngagementReportModel',
        'messaging_report': 'AnalyticsMessagingReportListItemModel',
        'bulk_action_report': 'AnalyticsBulkActionReportModel',
        'instant_app_report': 'AnalyticsInstantAppReportModel',
        'error_report': 'AnalyticsErrorReportModel',
        'api_report': 'AnalyticsApiReportModel'
    }

    attribute_map = {
        'timestamp_epoch': 'timestampEpoch',
        'engagement_report': 'engagementReport',
        'messaging_report': 'messagingReport',
        'bulk_action_report': 'bulkActionReport',
        'instant_app_report': 'instantAppReport',
        'error_report': 'errorReport',
        'api_report': 'apiReport'
    }

    def __init__(self, timestamp_epoch=None, engagement_report=None, messaging_report=None, bulk_action_report=None, instant_app_report=None, error_report=None, api_report=None):  # noqa: E501
        """AnalyticsKpiReportModel - a model defined in Swagger"""  # noqa: E501
        self._timestamp_epoch = None
        self._engagement_report = None
        self._messaging_report = None
        self._bulk_action_report = None
        self._instant_app_report = None
        self._error_report = None
        self._api_report = None
        self.discriminator = None
        if timestamp_epoch is not None:
            self.timestamp_epoch = timestamp_epoch
        if engagement_report is not None:
            self.engagement_report = engagement_report
        if messaging_report is not None:
            self.messaging_report = messaging_report
        if bulk_action_report is not None:
            self.bulk_action_report = bulk_action_report
        if instant_app_report is not None:
            self.instant_app_report = instant_app_report
        if error_report is not None:
            self.error_report = error_report
        if api_report is not None:
            self.api_report = api_report

    @property
    def timestamp_epoch(self):
        """Gets the timestamp_epoch of this AnalyticsKpiReportModel.  # noqa: E501

        The timestamp at the start of the default group-by window as a Unix timestamp.  # noqa: E501

        :return: The timestamp_epoch of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: int
        """
        return self._timestamp_epoch

    @timestamp_epoch.setter
    def timestamp_epoch(self, timestamp_epoch):
        """Sets the timestamp_epoch of this AnalyticsKpiReportModel.

        The timestamp at the start of the default group-by window as a Unix timestamp.  # noqa: E501

        :param timestamp_epoch: The timestamp_epoch of this AnalyticsKpiReportModel.  # noqa: E501
        :type: int
        """

        self._timestamp_epoch = timestamp_epoch

    @property
    def engagement_report(self):
        """Gets the engagement_report of this AnalyticsKpiReportModel.  # noqa: E501


        :return: The engagement_report of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: AnalyticsCustomerEngagementReportModel
        """
        return self._engagement_report

    @engagement_report.setter
    def engagement_report(self, engagement_report):
        """Sets the engagement_report of this AnalyticsKpiReportModel.


        :param engagement_report: The engagement_report of this AnalyticsKpiReportModel.  # noqa: E501
        :type: AnalyticsCustomerEngagementReportModel
        """

        self._engagement_report = engagement_report

    @property
    def messaging_report(self):
        """Gets the messaging_report of this AnalyticsKpiReportModel.  # noqa: E501


        :return: The messaging_report of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: AnalyticsMessagingReportListItemModel
        """
        return self._messaging_report

    @messaging_report.setter
    def messaging_report(self, messaging_report):
        """Sets the messaging_report of this AnalyticsKpiReportModel.


        :param messaging_report: The messaging_report of this AnalyticsKpiReportModel.  # noqa: E501
        :type: AnalyticsMessagingReportListItemModel
        """

        self._messaging_report = messaging_report

    @property
    def bulk_action_report(self):
        """Gets the bulk_action_report of this AnalyticsKpiReportModel.  # noqa: E501


        :return: The bulk_action_report of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: AnalyticsBulkActionReportModel
        """
        return self._bulk_action_report

    @bulk_action_report.setter
    def bulk_action_report(self, bulk_action_report):
        """Sets the bulk_action_report of this AnalyticsKpiReportModel.


        :param bulk_action_report: The bulk_action_report of this AnalyticsKpiReportModel.  # noqa: E501
        :type: AnalyticsBulkActionReportModel
        """

        self._bulk_action_report = bulk_action_report

    @property
    def instant_app_report(self):
        """Gets the instant_app_report of this AnalyticsKpiReportModel.  # noqa: E501


        :return: The instant_app_report of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: AnalyticsInstantAppReportModel
        """
        return self._instant_app_report

    @instant_app_report.setter
    def instant_app_report(self, instant_app_report):
        """Sets the instant_app_report of this AnalyticsKpiReportModel.


        :param instant_app_report: The instant_app_report of this AnalyticsKpiReportModel.  # noqa: E501
        :type: AnalyticsInstantAppReportModel
        """

        self._instant_app_report = instant_app_report

    @property
    def error_report(self):
        """Gets the error_report of this AnalyticsKpiReportModel.  # noqa: E501


        :return: The error_report of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: AnalyticsErrorReportModel
        """
        return self._error_report

    @error_report.setter
    def error_report(self, error_report):
        """Sets the error_report of this AnalyticsKpiReportModel.


        :param error_report: The error_report of this AnalyticsKpiReportModel.  # noqa: E501
        :type: AnalyticsErrorReportModel
        """

        self._error_report = error_report

    @property
    def api_report(self):
        """Gets the api_report of this AnalyticsKpiReportModel.  # noqa: E501


        :return: The api_report of this AnalyticsKpiReportModel.  # noqa: E501
        :rtype: AnalyticsApiReportModel
        """
        return self._api_report

    @api_report.setter
    def api_report(self, api_report):
        """Sets the api_report of this AnalyticsKpiReportModel.


        :param api_report: The api_report of this AnalyticsKpiReportModel.  # noqa: E501
        :type: AnalyticsApiReportModel
        """

        self._api_report = api_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsKpiReportModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsKpiReportModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
