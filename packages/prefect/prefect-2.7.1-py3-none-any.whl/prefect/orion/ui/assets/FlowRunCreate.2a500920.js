import{d as k,i as v,Z as D,u as b,a as F,c as p,b as x,g as t,o as B,e as S,w as d,f as i,ao as T,ap as I,k as N,aq as V,ar as Z,z as y,ak as f}from"./index.a71d6c38.js";import{u as q}from"./usePageTitle.6ac38a71.js";const Q=k({__name:"FlowRunCreate",setup(z){const u=v(),a=D("deploymentId"),n=b(),w=F(u.deployments.getDeployment,[a]),e=p(()=>w.response),_=async s=>{var r,o,c;try{const l=await u.deployments.createDeploymentFlowRun(a.value,s),m=(c=(o=(r=s.state)==null?void 0:r.stateDetails)==null?void 0:o.scheduledTime)!=null?c:void 0,g=!m,h=V(Z,{flowRun:l,flowRunRoute:y.flowRun,router:n,immediate:g,startTime:m});f(h,"success"),n.push(y.deployment(a.value))}catch(l){f("Something went wrong trying to create a flow run","error"),console.error(l)}},C=()=>{n.back()},R=p(()=>e.value?`Create Flow Run for Deployment: ${e.value.name}`:"Create Flow Run for Deployment");return q(R),(s,r)=>{const o=x("p-layout-default");return t(e)?(B(),S(o,{key:0},{header:d(()=>[i(t(T),{deployment:t(e)},null,8,["deployment"])]),default:d(()=>[i(t(I),{deployment:t(e),onSubmit:_,onCancel:C},null,8,["deployment"])]),_:1})):N("",!0)}}});export{Q as default};
