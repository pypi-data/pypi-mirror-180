/**
 * Cirneco Grammar (Simple Python)
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */
 
/* Top Level */

Source = EOL? {
    (Expression / '`' Expression '`' / Chunk )*
    #Source
} EOF

Chunk = {
    (!Expression .)+ 
    #Chunk
}


/* Code Layout */

EOF          = !.
LF           = '\n' / EOF
S            = [ \t\u200B\v\r　] / '\\\n'

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
_A           = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / '\n' / BLOCKCOMMENT / LINECOMMENT )*
SPC          = ( S / BLOCKCOMMENT / LINECOMMENT )+
_SKIP         = ('\n' _ &'\n')*

BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
LINECOMMENT  = [#＃] ( !LF . )*

EOL          = _ LF (_ LF)*
INDENT       = '\n' [ \t　]+

/* Expression */

/* FIXME: cirneco.pegtree より LambdaExpression は削除 */

Expression = Operator (_IfExpr / _ForExpr)?

_IfExpr = {
    then:^  
    "if" cond: Expression 
    "else" else: Expression 
    #IfExpr 
}

_ForExpr = {
    append:^
    ("for" ForExpr)+
    #ForListExpr
}

ForExpr = {
    names: Names __
    "in"
    iterable: Expression __
    ("if" cond: Expression)? __
    #ForExpr
}

Names = {
    Name ("," Name)* #Name
}

Operator =
	AndExpr (left:^ { OR _ right: AndExpr #Or })*

OR = 'or' !W / '||'

AndExpr =
	NotExpr (left:^ { AND _ right: NotExpr #And })*

AND = 'and' !W / '&&'

NotExpr =
	{ NOT _ NotExpr #Not } / EqExpr

NOT = 'not' !W / '!' / '！'

EqExpr =
	SumExpr (left:^ { name: { EQ #Name } _ right: SumExpr #Infix })*

EQ =
	/ '==' '='? 
	/ '!=' '='? 
	/ '<=' !'=' 
	/ '>=' !'=' 
	/ '<'  !'<' 
	/ '>'  !'>' 
    / '=' !'='  
    / ':=' !'='
    / ('not' !W _)? 'in' !W
    / 'is' !W (_ 'not' !W)?

SumExpr =
	ProdExpr (left:^ { name: { SUM #Name } _ right: ProdExpr #Infix })*

SUM = [+\-|＋ー｜]

ProdExpr =
	PowExpr (left:^ { name: { PROD #Name } _ right: PowExpr #Infix })*

PROD =
    / '//' / '<<' / '>>' / '／／' / '＜＜' / '＞＞'
	/ [*/%^&＊・／％＾＆×÷]

PowExpr = UnaryExpr (left:^ { name: { '**' #Name } _ right: UnaryExpr #Infix })*

UnaryExpr
	= { name: {PRE #Name } _ expr: UnaryExpr #Unary }
    / SuffixExpr

PRE = [+\-~＋ー〜]

SuffixExpr =
	Primary (
	    recv:^ { "." name: Name "(" params: Arguments __ ")" #MethodExpr }
	    / recv:^ { "." name: Name #GetExpr }
	    / name:^ { "(" params: Arguments __ ")"  #ApplyExpr }
	    / recv:^ { "[" index: Expression "]" #IndexExpr }
        / _SliceExpr
	)*

_SliceExpr = { 
    recv:^
    "[" 
    (start: Expression)? (":" (end: Expression)? )?
    (":" (step: Expression)? )?  
    (
        "," (start2: Expression)? (":" (end2: Expression)?)?
        (":" (step2: Expression)? )?  
    )?
    "]" 
    #SliceExpr
}

example Expression a[1:2]
example Expression a[1:]
example Expression a[:2]

Arguments = {
	( !(NAME _ '=' !'=') Expression)? 
    ( "," __ !(NAME _ '=' !'=') Expression )*
    (ListArgument / NamedArguments)?
    #Arguments
}

ListArgument = {
    '*' '*'? _ Expression
    #ListArgument
}

NamedArguments = {
    ("," __ )?
    NamedArgument ( "," __ NamedArgument )*
    #Option
}

NamedArgument = {
    name: Name
    !'==' "="  
    value: Expression
    #KeyValue
}

example Expression Circle(500, 500)
example Expression Circle(500, 500, clicked=cat_clicked)
example Expression Circle(clicked=1, move=1)

/* Primary */

example Primary, Expression (1,2) //
example Primary, Expression (1)
example Primary, Expression (1,)
example Primary, Expression [1,2,3]
example Primary, Expression '''
{ 
    name: 'naruto', 
    "age": 17,
}
'''

Primary =
    / GroupExpr
    / ListExpr {^ "*" Expression #Mul }?
    / DataExpr
    / Constant
    / Name

GroupExpr = 
    / { "(" Expression ")" #Group }
    / { "(" Expression ("," __ Expression)*  ","? __ ")" #Tuple }

ListExpr = { "[" (Expression ("," __ Expression)* )? ","?  __ "]" #List }

DataExpr = 
    / { "{" (KeyValue ("," __ KeyValue)*)? ","? __ "}" #Data }
    / { "{" (Expression ("," __ Expression)* )? ","?  __ "}" #Set }

DELIM = [.:+\-*/%<>=!(){}[\],\n]

KeyValue = {
	name: (Name /StringExpr / CharExpr / Expression)
	":"
	value: Expression
	#KeyValue
}

/* Type */

"[<" = [<[［＜] _
">]" = [\]>］＞] _
"->" = [=-] '>' _

Type = FuncType {^ ("|" Type)+ #UnionType }?

FuncType = PrimaryType {^ "->" Type #FuncType }*

PrimaryType =
    / { "(" (Type ("," Type)*)? ")" #TupleType } _ParamType*
    / { NAME #BaseType } _ _ParamType*

_ParamType = {^ "[<" (Type ("," Type)*)? ">]" #ParamType }

/* Name, Identifier */

Name = { NAME #Name } _

NAME = [A-Za-z_] W*

W = [A-Za-z0-9_]

/* Literal */

Constant =
    / FormatString
    / LongString
	/ StringExpr {^ "*" Expression #Mul}?
	/ CharExpr
	/ Number
	/ TrueExpr
	/ FalseExpr
	/ NullExpr

example Expression f'{a}+{1}'

FormatString = [Ff] (
    '\'\'\'' { FormatContent3* #Format } '\'\'\''
    / '\'' { FormatContent1* #Format } '\''
    / '"""' { FormatContent3D* #Format } '"""'
    / '"' { FormatContent1D* #Format } '"' ) _

FormatContent3 =
    '{' Expression FORMAT_OPTION? '}' / { (!'\'\'\'' !'{' .)* #StringPart }

FormatContent1 =
    '{' Expression FORMAT_OPTION? '}' / { (!'\'' !'{' .)* #StringPart }

FormatContent3D =
    '{' Expression FORMAT_OPTION? '}' / { (!'"""' !'{' .)* #StringPart }

FormatContent1D =
    '{' Expression FORMAT_OPTION? '}' / { (!'"' !'{' .)* #StringPart }

FORMAT_OPTION = ':' (!'}' .)*

LongString = 
    '\'\'' { '\'' ( ESCAPE / ![\\'] . / !'\'\'\'' '\'' )* '\'' #MultiString } '\'\'' _
    / '""' { '"' ( ESCAPE / ![\\"] . / !'"""' '"' )* '"' #MultiString } '""' _

StringExpr = 
    / { '"' STRING* '"' #QString } _
    / DQ { ZSTRING* #ZString } DQ _

CharExpr = 
    / { '\'' CHAR* '\'' #QString } _
    / SQ {  ZCHAR* #ZChar } SQ _

SQ = ['’‘＇]
DQ = ["”“＂]
STRING = ESCAPE / ![\"\n\\] .
CHAR   = ESCAPE / !['\n\\] .
ZSTRING = ESCAPE / !DQ ![\n\\] .
ZCHAR   = ESCAPE / !SQ ![\n\\] .

ESCAPE =
	'\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
    / '\\' [0-7] [0-7]
    / '\\' [0-7]
	/ '\\' [uU] HEX HEX HEX HEX
	/ '\\' [xX] HEX HEX

/* Number,Unit */

Number = FloatExpr / IntExpr

IntExpr = {
	(HEXADECIMAL / BINARY / DECIMAL )
	#Int
} _

DECIMAL = !'_' DIGIT ( DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
DIGIT = [0-9０-９_]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #Double
} _

FLOAT = !'_' (
	FRACTION EXPONENT? / DIGIT+ EXPONENT
)

FRACTION =
	/ DIGIT* "." !'_' DIGIT+
    / DIGIT DIGIT* "." !'.'

EXPONENT =
	[eE] [+\-]? !'_' DIGIT+

/* Const */

TrueExpr  = { [Tt] 'rue' #True } _
FalseExpr = { [Ff] 'alse' #False } _
NullExpr  = { ('None' / 'null') #Null } _

/* Character */

HIRA = [ぁ-ん]
KATA = [ァ-ヶ]
KANJI = [㐀-䶵一-龠々〇〻ー]
TENIWOHA = [はがもをとにへまか]

//W     = [ァ-ヶ㐀-䶵一-龠々〇〻Ａ-Ｚー]
//DIGIT = [０-９]

"{" = [{｛] __
"}" = [}｝] _
"[" = [[［] __
"]" = [\]］] _
"(" = [(（] __
")" = [)）] _
"=" = [=＝] ![=＝] _
"." = [.．。] _
"," = [,，、] _
";" = ([;；] _)+
":" = [:：] _
"_" = [_＿]

example Expression not 1 == 2
example Expression not 1 == 2 and 1 > 3

example Source return f(a)
example Source `math.sin(df['A'])`を適用する
example Source a,_ = df['a'].name
