# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': 'src'}

packages = \
['szurubooru_toolkit', 'szurubooru_toolkit.scripts']

package_data = \
{'': ['*']}

install_requires = \
['Pillow>=9.1.1,<10.0.0',
 'Pybooru>=4.2.2,<5.0.0',
 'beautifulsoup4>=4.10.0,<5.0.0',
 'keras>=2.8.0,<3.0.0',
 'loguru>=0.6.0,<0.7.0',
 'lxml>=4.8.0,<5.0.0',
 'numpy>=1.22.1,<2.0.0',
 'pathvalidate>=2.5.0,<3.0.0',
 'pygelbooru>=0.3.2,<0.4.0',
 'pysaucenao>=1.6.1,<2.0.0',
 'pyszuru>=0.2.4,<0.3.0',
 'requests>=2.25.1,<3.0.0',
 'syncer>=1.3.0,<2.0.0',
 'tensorflow>=2.8.0,<3.0.0',
 'tomlkit>=0.10.0,<0.11.0',
 'tqdm>=4.59.0,<5.0.0',
 'tweepy>=4.10.0,<5.0.0',
 'validators>=0.18.2,<0.19.0']

entry_points = \
{'console_scripts': ['auto-tagger = '
                     'szurubooru_toolkit.scripts.auto_tagger:main',
                     'create-tags = '
                     'szurubooru_toolkit.scripts.create_tags:main',
                     'delete-posts = '
                     'szurubooru_toolkit.scripts.delete_posts:main',
                     'import-from-booru = '
                     'szurubooru_toolkit.scripts.import_from_booru:main',
                     'import-from-twitter = '
                     'szurubooru_toolkit.scripts.import_from_twitter:main',
                     'reset-posts = '
                     'szurubooru_toolkit.scripts.reset_posts:main',
                     'tag-posts = szurubooru_toolkit.scripts.tag_posts:main',
                     'upload-media = '
                     'szurubooru_toolkit.scripts.upload_media:main']}

setup_kwargs = {
    'name': 'szurubooru-toolkit',
    'version': '0.7.6',
    'description': 'Python package and script collection to manage szurubooru.',
    'long_description': '<p align="center">\n<img src="https://cdn-icons-png.flaticon.com/512/2581/2581053.png"\n  alt="szurubooru-toolkit icon"\n  width="128" height="128">\n</p>\n\n# szurubooru-toolkit\nPython package and script collection to manage your [szurubooru](https://github.com/rr-/szurubooru) image board.\n\n## :ballot_box_with_check: Requirements\nIn order to run the included scripts, a Python release `>=3.8` and the configuratrion file `config.toml` is required.\n\nThe `config.toml` file needs to be always present in your current working directory from where you are executing the scripts.\nYou can find a sample config file in the [GitHub repository](https://github.com/reluce/szurubooru-toolkit) of this package.\n\n## :hammer_and_wrench: Installation\nThis package is available on [PyPI](https://pypi.org/project/szurubooru-toolkit/) and can be installed with pip:\n`pip install szurubooru-toolkit`\n\nAlternatively, you can clone the package from GitHub and set everything up with [Poetry](https://python-poetry.org/docs/). In the root directory of this repository, execute `poetry install`.\n\nPlease note this package requires Tensorflow for Deepbooru tagging and other required packages which do take up quite a lot of disk space (>400MB).\nA future release of this package will offer an option without the need to install Tensorflow if you don\'t want to use Deepbooru tagging.\n\n### Docker Instructions\nIf you would like to run the toolkit in a Docker container instead, follow the\ninstructions below.\n\n1. Copy `docker-compose.yml` to the location where you want to run the toolkit.\n1. Copy `config_sample.toml` to the same location, renaming to `config.toml` and\nreplacing with your configuration.\n1. Copy `crontab_sample` to the same location, renaming to `crontab` and adding\n   the commands you would like to run regularly. An example command is provided\n   in `crontab_sample`.\n1. Make sure to set the `src_path` option in `config.toml` to use\n   `/szurubooru-toolkit/upload_src`. If you\'re using a different directory than\n   `upload_src`, you may need to update the `docker-compose.yml` binding to be\n   something like `./uploads:/szurubooru-toolkit/uploads`, and set\n   `/szurubooru-toolkit/uploads` as the `src_path` option instead.\n1. If you would like to use deepbooru or tag files, create `misc/deepbooru`\n   and/or `misc/tags` in the same location and follow the instructions linked\n   below\n1. Run `touch szurubooru_toolkit.log` in the same location to create a file for\n   the log. You may need to set the log location to\n   `/szurubooru-toolkit/szurubooru_toolkit.log` in `config.toml`\n1. Use `docker-compose up` or `docker-compose up -d` to start the container, or\n   start the container in the background, respectively. You can use\n   `docker-compose logs` or `docker-compose logs -f` to inspect the container\n   output, which will include szuru toolkit\'s output if you append your cron\n   jobs with `>/proc/1/fd/1 2>&1` like in the example job.\n1. If you just want to run a one-time command, leave the `crontab` file blank\n   and start the container with `docker-compose up -d`, taking note of the\n   `container_name` option in `docker-compose.yml`. Then, you can run commands\n   inside of the running container like this: `docker exec -it container_name\n   auto-tagger`, replacing `container_name` with the container name.\n1. If you would like the container to run a one-time command and then quit with\n   `docker-compose.yml`, add a `command` configuration [like\n   this](https://docs.docker.com/compose/compose-file/compose-file-v3/#command).\n\n## :memo: User configuration\nMake your changes in the `config_sample.toml` file provided in the git repo and rename it to `config.toml` afterwards.\n\nNote that path names have to be specified with forward slashes (/) if you\'re using Windows.\n\n<details>\n  <summary>:information_source: config.toml reference</summary>\n\n| Section | Option | Description | Examples/Default |\n|---------|--------|-------------|-----------------|\n| `szurubooru` | `url` | The URL of your szurubooru | `"https://szuru.example.com"` |\n| `szurubooru` | `username` | Username which connects to the szuruboori API | `"my_szuru_user"` |\n| `szurubooru` | `api_token` | API token of `username`. Generate one in szurubooru from _Account_ > _Login tokens_ > _Create token_ | `"my_api_token"` |\n| `szurubooru` | `public` | If your szurubooru is reachable over the internet | `false` |\n| `auto_tagger` | `saucenao_api_token` | In case you want to increase your daily query limit | `"my_saucenao_api_token"` |\n| `auto_tagger` | `saucenao_enabled` | Set this to `false` and `deepbooru_enabled` to `true` if you only want to tag with Deepbooru | `true` |\n| `auto_tagger` | `deepbooru_enabled` | If enabled, tag the post with Deepbooru if no tags with SauceNAO were found | `false` |\n| `auto_tagger` | `deepbooru_model` | Path to the Deepbooru model | `"./misc/deepbooru/model-resnet_custom_v3.h5"` |\n| `auto_tagger` | `deepbooru_threshold` | Define how accurate the matched tag from Deepbooru has to be | `"0.7"` |\n| `auto_tagger` | `deepbooru_forced` | Always tag with SauceNAO and Deepbooru | `false` |\n| `auto_tagger` | `deepbooru_set_tag` | Tag Deepbooru post with tag `deepbooru` | `true` |\n| `auto_tagger` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `danbooru` | `user` | Danbooru user | `"None"` |\n| `danbooru` | `api_key` | Danbooru api key | `"None"` |\n| `gelbooru` | `user` | Gelbooru user | `"None"` |\n| `gelbooru` | `api_key` | Gelbooru api key | `"None"` |\n| `konachan` | `user` | Konachan user | `"None"` |\n| `konachan` | `password` | Konachan password | `"None"` |\n| `yandere` | `user` | Yandere user | `"None"` |\n| `yandere` | `password` | Yandere password | `"None"` |\n| `pixiv` | `user` | Pixiv user. Currently not being used. | `"None"` |\n| `pixiv` | `password` | Pixiv password. Currently not being used. | `"None"` |\n| `pixiv` | `token` | Pixiv token. Currently not being used. | `"None"` |\n| `twitter` | `user_id` | The user id which should be queried. | `"None"` |\n| `twitter` | `consumer_key` | See https://developer.twitter.com/en/docs/authentication/oauth-1-0a | `"None"` |\n| `twitter` | `consumer_secret` | See https://developer.twitter.com/en/docs/authentication/oauth-1-0a | `"None"` |\n| `twitter` | `access_token` | See https://developer.twitter.com/en/docs/authentication/oauth-1-0a | `"None"` |\n| `twitter` | `access_token_secret` | See https://developer.twitter.com/en/docs/authentication/oauth-1-0a | `"None"` |\n| `upload_media` | `src_path` | Every valid media file under this dir (recursively) will get uploaded | `"/local/path/to/upload/dir"` |\n| `upload_media` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `upload_media` | `cleanup` | Set this to true if images in the `src_path` should be deleted after upload | `false` |\n| `upload_media` | `tags` | These tags will get set for all uploaded posts. Separate them by a comma. | `["tagme", "tag1", "tag2", "tagN"]` |\n| `upload_media` | `auto_tag` | Set this to true if you want your post to be automatically tagged after upload | `false` |\n| `upload_media` | `max_similarity` | Adjust this value to ignore posts if a similar post higher than the threshold has already been uploaded | `"0.99"` |\n| `upload_media` | `convert_to_jpg` | Convert images to JPG to save disk space. This won\'t overwrite the source files and only affects the uploaded image. Images might slip through identical post check. | `false` |\n| `upload_media` | `convert_quality` | Only images above this threshold will be converted to jpg if `convert_to_jpg` is True. | `"3MB\\|500KB"` |\n| `upload_media` | `shrink` | Set to true to shrink images to shrink_dimensions based on shrink_threshold below. Images might slip through identical post check. | `false` |\n| `upload_media` | `shrink_threshold` | Images which total pixel size exceeds this treshold will be resized to `shrink_size`. E.g. 2000x3000 results in 6000000. | `"6000000"` |\n| `upload_media` | `shrink_dimensions` | Set the max value for width/height. Keeps aspect ratio. E.g. 2000x4000 results in 700x1400, 4000x2000 in 1400x700 (with `"1400x1400"`). | `"2500x2500"` |\n| `import_from_booru` | `deepbooru_enabled` | Apply Deepbooru tagging additionally besides fetched tags from Booru | `false` |\n| `import_from_booru` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `import_from_twitter` | `saucenao_enabled` | Tag posts with SauceNAO | `false` |\n| `import_from_twitter` | `deepbooru_enabled` | Tag posts with Deepbooru | `false` |\n| `import_from_twitter` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `create_tags` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `delete_posts` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `reset_posts` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `tag_posts` | `hide_progress` | Set this to true to hide the progress bar | `false` |\n| `logging` | `log_enabled` | If logging to a log file should be enabled | `false` |\n| `logging` | `log_file` | Specify the path of the log file | `"C:/Users/Foo/Desktop/szurubooru_toolkit.log"` |\n| `logging` | `log_level` | Specify the log level. `DEBUG` logs the most information | `"DEBUG"\\|"INFO"\\|"WARNING"\\|"ERROR"\\|"CRITICAL"` |\n| `logging` | `log_colorized` | If the log file should be colorized. Requires compatible viewer (e.g. `less -r <log_file>`). | `true` |\n</details>\n\nCreating a SauceNAO account and an API key is recommended.\nPlease consider supporting the SauceNAO team as well by upgrading your plan.\nWith a free plan, you can request up to 200 posts in 24h.\n\nFor Deepbooru support, download the current release [here](https://github.com/KichangKim/DeepDanbooru/releases/tag/v3-20211112-sgd-e28) (v3-20211112-sgd-e28) and extract the contents of the zip file. Specify the path of the folder with the extracted files in `deepbooru_model`.\nPlease note that you have to set `deepbooru_enabled` if you want to use it.\n\n## :page_with_curl: Scripts\nFollowing scripts are currently available:\n\n* `auto-tagger`: Batch tagging of posts with SauceNAO and Deepbooru\n* `create-tags`: Batch creation of tags with their categories\n* `delete-posts`: Batch delete of posts\n* `import-from-booru`: Batch importing of posts with their tags from various Boorus\n* `import-from-twitter`: Batch importing of Twitter favorites\n* `reset-posts`: Batch resetting of posts (remove tags and sources)\n* `upload-media`: Batch upload of media files from local source folder\n* `tag-posts`: Manual batch tagging\n\nSee the descriptions below on how to use them.\n\nIf you installed this package with pip, you can generally just call the scripts from your shell (if your $PATH is set correctly).\n\nIf you cloned the repo from GitHub, prefix the above scripts with `poetry run`, e.g. `poetry run auto-tagger "date:today"`. Note that your current working directory has to be the the root of the GitHub project.\n\n### :gear: auto-tagger\nThis script accepts a szurubooru query as a user input, fetches all posts returned by it and attempts to tag it using SauceNAO/Deepbooru.\n\nIf no matches from SauceNAO were found, the script keeps the previously set tags of the post and additionally appends the tag `tagme`.\n\nYou can set `deepbooru_enabled` to `true` in your config.toml file. In that case, the script falls back to tag posts with the supplied Deepbooru model.\nIf you only want to use Deepbooru, set `deepbooru_enabled` to `true` and `saucenao_enabled` to `false`. If you want to use SauceNAO and Deepbooru, set following options to `true`: `saucenao_enabled`, `deepbooru_enabled` and `deepbooru_forced`.\n\n__Usage__\n```\nusage: auto-tagger [-h] [--sankaku_url SANKAKU_URL] [--add-tags ADD_TAGS] [--remove-tags REMOVE_TAGS] query\n\nThis script will automagically tag your szurubooru posts based on your input query.\n\npositional arguments:\n  query                 Specify a single post id to tag or a szuru query. E.g. "date:today tag-count:0"\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --sankaku_url SANKAKU_URL\n                        Fetch tags from specified Sankaku URL instead of searching SauceNAO.\n  --add-tags ADD_TAGS   Specify tags, separated by a comma, which will be added to all posts matching your query\n  --remove-tags REMOVE_TAGS\n                        Specify tags, separated by a comma, which will be removed from all posts matching your query\n```\n\n__Examples__\n* `auto-tagger "date:today tag-count:0"`\n* `auto-tagger "date:2021-04-07"`\n* `auto-tagger "tagme"`\n* `auto-tagger "id:100..111"`\n* `auto-tagger "id:100,101"`\n* `auto-tagger --add-tags "foo,bar" --remove-tags "baz" "tagme"`\n\nIf we want to tag a single post, we can omit the keyword `id` in our query:\n\n* `auto-tagger 100`\n\nAlternatively, we can tag a single post and specify `--sankaku_url` to fetch the tags from the supplied URL (_untested with current release_):\n\n`auto-tagger --sankaku_url https://chan.sankakucomplex.com/post/show/<id> 100`\n\nThis is especially useful since Sankaku has changed their API and aggregator sites like SauceNAO don\'t have the latest results there.\n\n### :arrow_lower_right:\timport-from-booru\nThis scripts imports posts and their tags from various Boorus that matched your input query.\n\nIn the `config.toml` file, you can set if the post should be additionally tagged with Deepbooru and if the progress bar should be shown.\nSince this script is using the `upload-media` script to upload the post, following settings apply from the `upload-media` section:\n* max_similarity\n* convert_to_jpg\n* convert_threshold\n* shrink\n* shrink_threshold\n* shrink_dimensions\n\n__Usage__\n```\nusage: import-from-booru [-h] [--limit LIMIT] {danbooru,gelbooru,konachan,yandere,all} query\n\nThis script downloads and tags posts from various Boorus based on your input query.\n\npositional arguments:\n  {danbooru,gelbooru,konachan,yandere,all}\n                        Specify the Booru which you want to query. Use all to query all Boorus.\n  query                 The search query for the posts you want to download and tag\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --limit LIMIT         Limit the search results to be returned (default: 100)\n```\n\n__Examples__\n* `import-from-booru danbooru "tag1 tagN"`\n* `import-from-booru yandere "tag1 tag2 -tagN"`\n* `import-from-booru all "tag1 -tagN"`\n\nNote that if you specify `all` to download from all Boorus, you are limited to two tags because free Danbooru accounts are limited to two tags per query.\nIf you have a Gold/Platinum account, set your credentials in `config.toml`. Note that it\'s currently untested if the script will work with upgraded accounts.\n\n### :dove: import-from-twitter\nThis script fetches media files from your Twitter likes, uploads and optionally tags them.\n\n:warning: __OAuth 1.0a credentials are required to read the likes from a user. See https://developer.twitter.com/en/docs/authentication/oauth-1-0a on how to generate them.__\n\nThe `user_id` can be converted on sites like https://tweeterid.com/. If you configured above credentials, you can also get your own ID from the `access_token`, which is in following format: `<user_id>-<random_string>`\n\nIn the `config.toml` file, you can set if the post should be additionally tagged with SauceNAO or Deepbooru and if the progress bar should be shown.\nSince this script is using the `upload-media` script to upload the post, following settings apply from the `upload-media` section:\n* max_similarity\n* convert_to_jpg\n* convert_threshold\n* shrink\n* shrink_threshold\n* shrink_dimensions\n\n__Usage__\n```\nusage: import-from-twitter [-h] [--limit LIMIT] [--user-id USER_ID]\n\nThis script fetches media files from your Twitter likes, uploads and optionally tags them.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  --limit LIMIT      Limit the amount of Twitter posts returned (default: 25)\n  --user-id USER_ID  Fetch likes from the specified user id\n```\n\n__Examples__\n* `import-from-twitter --limit 50`\n* `import-from-twitter --limit 50 --user_id 123`\n\n### :arrow_upper_right: upload-media\nThis script searches through your specified upload folder in the `config.toml` file for any image/video files and uploads them to your szurubooru.\n\n__Usage__\n\n* `upload-media`\n\n### :label: tag-posts\n__Usage__\n```\nusage: tag-posts [-h] [--add-tags ADD_TAGS] [--remove-tags REMOVE_TAGS] [--mode {append,overwrite}] query\n\nThis script will tag your szurubooru posts based on your input arguments and mode.\n\npositional arguments:\n  query                 The search query for the posts you want to tag\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --add-tags ADD_TAGS   Specify tags, separated by a comma, which will be added to all posts matching your query.\n  --remove-tags REMOVE_TAGS\n                        Specify tags, separated by a comma, which will be removed from all posts matching your query.\n  --mode {append,overwrite}\n                        Set mode to overwrite to remove already set tags, set append to keep them (default: append).\n  --update-implications\n                        Fetches all tags from the posts matching the query and updates them if tag implications are missing (default: False)\n```\n\n__Examples__\n* `tag-posts --add-tags "foo,bar" "date:2021-04-07"`\n* `tag-posts --add-tags "foo,bar" --mode "overwrite" "foo bar"`\n* `tag-posts --add-tags "foo,bar" --remove-tags "baz" "foo"`\n\n### :arrows_counterclockwise: reset-posts\n__Usage__\n```\nusage: reset-posts [-h] [--except-ids EXCEPT_IDS] [--add-tags ADD_TAGS] query\n\nThis script will remove tags and sources from your szurubooru posts based on your input search query.\n\npositional arguments:\n  query                 The search query for the posts you want to reset.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --except-ids EXCEPT_IDS\n                        Specify the post ids, separated by a comma, which should not be reset. Example: --except-ids "3,4,5"\n  --add-tags ADD_TAGS   Specify tags, separated by a comma, which will be added to all posts matching your query after resetting.\n```\n\n__Examples__\n* `reset-posts "foobar"`\n* `reset-posts --add-tags "tagme" "foobar"`\n* `reset-posts --add-tags "tagme,foo" "foobar"`\n* `reset-posts --except-ids "2,4" --add-tags "tagme,foo" "foobar"`\n\n### :wastebasket:\tdelete-posts\n__Usage__\n```\nusage: delete-posts [-h] [--except-ids EXCEPT_IDS] query\n\nThis script will delete your szurubooru posts based on your input search query.\n\npositional arguments:\n  query                 The search query for the posts you want to delete.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --except-ids EXCEPT_IDS\n                        Specify the post ids, separated by a comma, which should not be deleted. Example: --except-ids "3,4,5\n```\n\n__Examples__\n* `delete-posts "id:10,11,100,23"`\n* `delete-posts --except-ids "12,23,44" "id:10..50"`\n\n### :label: create-tags\n__Usage__\n```\nusage: create-tags [-h] [--tag-file TAG_FILE] [--query QUERY] [--min-post-count MIN_POST_COUNT] [--limit LIMIT] [--overwrite]\n\nThis script will read the tags from specified file and create them in your szurubooru.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --tag-file TAG_FILE   Specify the local path to the file containing the tags and categories. If specified, ignores other arguments.\n  --query QUERY         Search for specific tags (default: "*").\n  --min-post-count MIN_POST_COUNT\n                        The minimum amount of posts the tag should have been used in (default: 10).\n  --limit LIMIT         The amount of tags that should be downloaded. Start from the most recent ones (default: 100).\n  --overwrite           Overwrite tag category if the tag already exists.\n```\n\nIf no `tag_file` is specified, the script will download the most recent 100 tags from Danbooru which have been used at least ten times.\n\nYou can use tools like [Grabber](https://github.com/Bionus/imgbrd-grabber) to download a tag list from common boorus.\n\nThe `tag_file` has to be in following format:\n\n```\n<tag_a>,<category_name>\n<tag_b>,<category_name>\n<tag_..n>,<category_name>\n```\n\nThe category has to be created beforehand manually (e.g. default, artist, series, character and meta).\n\n__Examples__\n* `create-tags`\n* `create-tags --query genshin* --overwrite`\n* `create-tags --tag-file tags.txt`\n\n## :information_source:\tImage credit\nGitHub repo icon: <a href="https://www.flaticon.com/free-icons/code" title="code icons">Code icons created by Smashicons - Flaticon</a>\n',
    'author': 'reluce',
    'author_email': 'reluce@fkosquad.moe',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/reluce/szurubooru-toolkit',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<3.11',
}


setup(**setup_kwargs)
