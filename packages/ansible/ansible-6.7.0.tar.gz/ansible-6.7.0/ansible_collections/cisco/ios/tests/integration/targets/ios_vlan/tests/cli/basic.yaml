---
- ansible.builtin.debug: msg="START cli/basic.yaml on connection={{ ansible_connection }}"

- ansible.builtin.set_fact: switch_type="{{ switch_type }}"

- block:
    - name: Setup - remove VLAN used in test
      cisco.ios.ios_config:
        lines:
          - no vlan 100
          - no vlan 200
          - no vlan 300

    - name: Setup - remove switchport settings on interfaces used in test
      loop:
        - interface GigabitEthernet0/1
        - interface GigabitEthernet0/2
      cisco.ios.ios_config:
        lines:
          - switchport mode access
          - no switchport access vlan 100
        parents: "{{ item }}"

    - name: Create VLAN
      register: result
      cisco.ios.ios_vlan: &id001
        vlan_id: 100
        name: test-vlan

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'vlan 100' in result.commands"
          - "'name test-vlan' in result.commands"

    - name: Create VLAN (idempotent)
      register: result
      cisco.ios.ios_vlan: *id001
    - ansible.builtin.assert:
        that:
          - result.changed == false

    - name: Add interfaces to VLAN
      register: result
      cisco.ios.ios_vlan: &id002
        vlan_id: 100
        interfaces:
          - GigabitEthernet0/1
          - GigabitEthernet0/2

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'interface GigabitEthernet0/1' in result.commands"
          - "'switchport mode access' in result.commands"
          - "'switchport access vlan 100' in result.commands"
          - "'interface GigabitEthernet0/2' in result.commands"
          - "'switchport mode access' in result.commands"
          - "'switchport access vlan 100' in result.commands"

    - name: Add interfaces to VLAN (idempotent)
      register: result
      cisco.ios.ios_vlan: *id002
    - ansible.builtin.assert:
        that:
          - result.changed == false

    - name: Check interface assigned to VRF (intent)
      register: result
      cisco.ios.ios_vlan:
        vlan_id: 100
        associated_interfaces:
          - GigabitEthernet0/1
          - GigabitEthernet0/2

    - ansible.builtin.assert:
        that:
          - result.failed == false

    - name: Check interface assigned to VRF (fail)
      ignore_errors: true
      register: result
      cisco.ios.ios_vlan:
        vlan_id: 100
        associated_interfaces:
          - test

    - ansible.builtin.assert:
        that:
          - result.failed == True

    - name: Remove interface from VLAN
      register: result
      cisco.ios.ios_vlan: &id003
        vlan_id: 100
        interfaces:
          - GigabitEthernet0/1

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'vlan 100' in result.commands"
          - "'interface GigabitEthernet0/2' in result.commands"
          - "'switchport mode access' in result.commands"
          - "'no switchport access vlan 100' in result.commands"

    - name: Remove interface from VLAN (idempotent)
      register: result
      cisco.ios.ios_vlan: *id003
    - ansible.builtin.assert:
        that:
          - result.changed == false

    - name: Suspend VLAN
      register: result
      cisco.ios.ios_vlan:
        vlan_id: 100
        state: suspend

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'vlan 100' in result.commands"
          - "'state suspend' in result.commands"

    - name: Unsuspend VLAN
      register: result
      cisco.ios.ios_vlan:
        vlan_id: 100
        state: active

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'vlan 100' in result.commands"
          - "'state active' in result.commands"

    - name: Delete VLAN
      register: result
      cisco.ios.ios_vlan: &id004
        vlan_id: 100
        state: absent

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'no vlan 100' in result.commands"

    - name: Delete VLAN (idempotent)
      register: result
      cisco.ios.ios_vlan: *id004
    - ansible.builtin.assert:
        that:
          - result.changed == false

    - name: Create vlans using aggregate
      register: result
      cisco.ios.ios_vlan: &id005
        aggregate:
          - vlan_id: 200
            name: vlan-200

          - vlan_id: 300
            name: vlan-300

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'vlan 200' in result.commands"
          - "'name vlan-200' in result.commands"
          - "'vlan 300' in result.commands"
          - "'name vlan-300' in result.commands"

    - name: Create vlans using aggregate (idempotent)
      register: result
      cisco.ios.ios_vlan: *id005
    - ansible.builtin.assert:
        that:
          - result.changed == false

    - name: Delete vlans using aggregate
      register: result
      cisco.ios.ios_vlan: &id006
        aggregate:
          - vlan_id: 200
            name: vlan-200

          - vlan_id: 300
            name: vlan-300
        state: absent

    - ansible.builtin.assert:
        that:
          - result.changed == true
          - "'no vlan 200' in result.commands"
          - "'no vlan 300' in result.commands"

    - name: Delete vlans using aggregate (idempotent)
      register: result
      cisco.ios.ios_vlan: *id006
    - ansible.builtin.assert:
        that:
          - result.changed == false

    - name: Teardown(part1)
      cisco.ios.ios_config:
        lines:
          - no vlan 100
          - no vlan 200
          - no vlan 300

    - name: Teardown(part2)
      loop:
        - interface GigabitEthernet0/1
        - interface GigabitEthernet0/2
      cisco.ios.ios_config:
        lines:
          - switchport mode access
          - no switchport access vlan 100
        parents: "{{ item }}"
  when: switch_type == 'L2'

- ansible.builtin.debug: msg="END cli/basic.yaml on connection={{ ansible_connection }}"
