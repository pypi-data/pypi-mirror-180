# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeListDegradationEventsRequestQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firewall_id': 'str',
        'category_ids': 'list[str]',
        'time_filter': 'RimeTimeInterval'
    }

    attribute_map = {
        'firewall_id': 'firewallId',
        'category_ids': 'categoryIds',
        'time_filter': 'timeFilter'
    }

    def __init__(self, firewall_id=None, category_ids=None, time_filter=None):  # noqa: E501
        """RimeListDegradationEventsRequestQuery - a model defined in Swagger"""  # noqa: E501
        self._firewall_id = None
        self._category_ids = None
        self._time_filter = None
        self.discriminator = None
        if firewall_id is not None:
            self.firewall_id = firewall_id
        if category_ids is not None:
            self.category_ids = category_ids
        if time_filter is not None:
            self.time_filter = time_filter

    @property
    def firewall_id(self):
        """Gets the firewall_id of this RimeListDegradationEventsRequestQuery.  # noqa: E501

        Required field specifying the firewall ID.  # noqa: E501

        :return: The firewall_id of this RimeListDegradationEventsRequestQuery.  # noqa: E501
        :rtype: str
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this RimeListDegradationEventsRequestQuery.

        Required field specifying the firewall ID.  # noqa: E501

        :param firewall_id: The firewall_id of this RimeListDegradationEventsRequestQuery.  # noqa: E501
        :type: str
        """

        self._firewall_id = firewall_id

    @property
    def category_ids(self):
        """Gets the category_ids of this RimeListDegradationEventsRequestQuery.  # noqa: E501

        If not specified, return all degradation events across categories.  # noqa: E501

        :return: The category_ids of this RimeListDegradationEventsRequestQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids):
        """Sets the category_ids of this RimeListDegradationEventsRequestQuery.

        If not specified, return all degradation events across categories.  # noqa: E501

        :param category_ids: The category_ids of this RimeListDegradationEventsRequestQuery.  # noqa: E501
        :type: list[str]
        """

        self._category_ids = category_ids

    @property
    def time_filter(self):
        """Gets the time_filter of this RimeListDegradationEventsRequestQuery.  # noqa: E501


        :return: The time_filter of this RimeListDegradationEventsRequestQuery.  # noqa: E501
        :rtype: RimeTimeInterval
        """
        return self._time_filter

    @time_filter.setter
    def time_filter(self, time_filter):
        """Sets the time_filter of this RimeListDegradationEventsRequestQuery.


        :param time_filter: The time_filter of this RimeListDegradationEventsRequestQuery.  # noqa: E501
        :type: RimeTimeInterval
        """

        self._time_filter = time_filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeListDegradationEventsRequestQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeListDegradationEventsRequestQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
