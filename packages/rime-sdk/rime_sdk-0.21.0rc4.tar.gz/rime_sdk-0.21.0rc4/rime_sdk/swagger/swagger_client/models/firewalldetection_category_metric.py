# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FirewalldetectionCategoryMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_id': 'str',
        'category_metric_name': 'str',
        'time_series': 'list[DetectionObservation]'
    }

    attribute_map = {
        'category_id': 'categoryId',
        'category_metric_name': 'categoryMetricName',
        'time_series': 'timeSeries'
    }

    def __init__(self, category_id=None, category_metric_name=None, time_series=None):  # noqa: E501
        """FirewalldetectionCategoryMetric - a model defined in Swagger"""  # noqa: E501
        self._category_id = None
        self._category_metric_name = None
        self._time_series = None
        self.discriminator = None
        if category_id is not None:
            self.category_id = category_id
        if category_metric_name is not None:
            self.category_metric_name = category_metric_name
        if time_series is not None:
            self.time_series = time_series

    @property
    def category_id(self):
        """Gets the category_id of this FirewalldetectionCategoryMetric.  # noqa: E501

        All high-level metrics we are interested in will be associated with Category tests. TODO: change this to an enum to give us more type safety.  # noqa: E501

        :return: The category_id of this FirewalldetectionCategoryMetric.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this FirewalldetectionCategoryMetric.

        All high-level metrics we are interested in will be associated with Category tests. TODO: change this to an enum to give us more type safety.  # noqa: E501

        :param category_id: The category_id of this FirewalldetectionCategoryMetric.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def category_metric_name(self):
        """Gets the category_metric_name of this FirewalldetectionCategoryMetric.  # noqa: E501

        TODO: change this to an enum to give us more type safety.  # noqa: E501

        :return: The category_metric_name of this FirewalldetectionCategoryMetric.  # noqa: E501
        :rtype: str
        """
        return self._category_metric_name

    @category_metric_name.setter
    def category_metric_name(self, category_metric_name):
        """Sets the category_metric_name of this FirewalldetectionCategoryMetric.

        TODO: change this to an enum to give us more type safety.  # noqa: E501

        :param category_metric_name: The category_metric_name of this FirewalldetectionCategoryMetric.  # noqa: E501
        :type: str
        """

        self._category_metric_name = category_metric_name

    @property
    def time_series(self):
        """Gets the time_series of this FirewalldetectionCategoryMetric.  # noqa: E501

        The time series will extend across the `event_context` time bound. Note: be careful about making the context too large so this message does not grow too large.  # noqa: E501

        :return: The time_series of this FirewalldetectionCategoryMetric.  # noqa: E501
        :rtype: list[DetectionObservation]
        """
        return self._time_series

    @time_series.setter
    def time_series(self, time_series):
        """Sets the time_series of this FirewalldetectionCategoryMetric.

        The time series will extend across the `event_context` time bound. Note: be careful about making the context too large so this message does not grow too large.  # noqa: E501

        :param time_series: The time_series of this FirewalldetectionCategoryMetric.  # noqa: E501
        :type: list[DetectionObservation]
        """

        self._time_series = time_series

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FirewalldetectionCategoryMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FirewalldetectionCategoryMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
