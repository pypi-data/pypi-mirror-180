{"version":3,"file":"247.13abfeca9a0f37225518.js?v=13abfeca9a0f37225518","mappings":"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","sources":["webpack://@deathbeds/jupikchr/./src/icons.ts","webpack://@deathbeds/jupikchr/./style/img/alpha-p-box.svg","webpack://@deathbeds/jupikchr/./style/img/fit-to-page-outline.svg","webpack://@deathbeds/jupikchr/./src/toolbar.ts","webpack://@deathbeds/jupikchr/./src/plugin.ts"],"sourcesContent":["import { LabIcon } from '@jupyterlab/ui-components';\n\nimport ALPHA_P_BOX from '../style/img/alpha-p-box.svg';\nimport FIT_BOX from '../style/img/fit-to-page-outline.svg';\n\nexport namespace ICONS {\n  export const P_BOX = new LabIcon({ name: 'pikchr:p-box', svgstr: ALPHA_P_BOX });\n  export const FIT = new LabIcon({ name: 'pikchr:fit', svgstr: FIT_BOX });\n}\n","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\">\\n  <g class=\\\"jp-icon-brand0 jp-icon-selectable\\\" fill=\\\"#0288D1\\\">\\n    <path d=\\\"M9,7V17H11V13H13A2,2 0 0,0 15,11V9A2,2 0 0,0 13,7H9M11,9H13V11H11V9M5,3H19A2,2 0 0,1 21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3Z\\\" />\\n  </g>\\n</svg>\\n\";","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\">\\n  <g class=\\\"jp-icon3 jp-icon-selectable\\\" fill=\\\"#616161\\\">\\n    <path d=\\\"M20,2H4C2.89,2 2,2.89 2,4V20C2,21.11 2.89,22 4,22H20C21.11,22 22,21.11 22,20V4C22,2.89 21.11,2 20,2M20,20H4V4H20M13,8V10H11V8H9L12,5L15,8M16,15V13H14V11H16V9L19,12M10,13H8V15L5,12L8,9V11H10M15,16L12,19L9,16H11V14H13V16\\\" />\\n  </g>\\n</svg>\\n\";","import { CommandRegistry } from '@lumino/commands';\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\nimport { CommandToolbarButton } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\nimport { CommandIDs } from './tokens';\n\n/**\n * A notebook widget extension that adds a button to the toolbar.\n */\nexport class PikchrDocumentToolbar\n  implements DocumentRegistry.IWidgetExtension<any, any>\n{\n  commands: CommandRegistry;\n\n  constructor(commands: CommandRegistry) {\n    this.commands = commands;\n  }\n\n  createNew(panel: any, context: DocumentRegistry.IContext<any>): IDisposable {\n    const img = new CommandToolbarButton({\n      commands: this.commands,\n      id: CommandIDs.img,\n    });\n\n    const fit = new CommandToolbarButton({\n      commands: this.commands,\n      id: CommandIDs.fit,\n    });\n\n    panel.toolbar.insertItem(8, 'img', img);\n    panel.toolbar.insertItem(9, 'fit', fit);\n\n    return new DisposableDelegate(() => {\n      fit.dispose();\n      img.dispose();\n    });\n  }\n}\n","import type MarkdownIt from 'markdown-it';\n\nimport {\n  IMimeDocumentTracker,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n} from '@jupyterlab/application';\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { ICodeMirror } from '@jupyterlab/codemirror';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { imageIcon } from '@jupyterlab/ui-components';\n\nimport { ExportMap, IJupyterWidgetRegistry } from '@jupyter-widgets/base';\n\nimport { simpleMarkdownItPlugin } from '@agoose77/jupyterlab-markup';\n\nimport { ICONS } from './icons';\nimport { RenderedPikchr } from './mime';\nimport {\n  CSS,\n  CommandIDs,\n  DOT_PIKCHR,\n  LAUNCHER_CATEGORY,\n  NAME,\n  NS,\n  PALETTE_CATEGORY,\n  VERSION,\n} from './tokens';\nimport { PikchrDocumentToolbar } from './toolbar';\n\nexport interface IMdItPlugin {\n  (md: MarkdownIt): void;\n}\n\nlet _PLUGIN: IMdItPlugin | null = null;\n\n/**\n * Provides ASCII diagrams in code blocks\n */\nexport const markdownPlugin = simpleMarkdownItPlugin(NS, {\n  id: `pikchr`,\n  title: 'pikchr',\n  description: 'pikchr diagrams',\n  documentationUrls: {\n    plugin: 'https://github.com/deathbeds/jupikchr',\n    pikchr: 'https://pikchr.org',\n  },\n  examples: {\n    pikchr: `\n  \\`\\`\\`pikchr\n  arrow right 200% \"Markdown\" \"Source\"\n  box rad 10px \"Markdown\" \"Formatter\" \"(markdown.c)\" fit\n  arrow right 200% \"HTML+SVG\" \"Output\"\n  arrow <-> down 70% from last box.s\n  box same \"Pikchr\" \"Formatter\" \"(pikchr.c)\" fit\n  \\`\\`\\`\n          `,\n  },\n  plugin: async () => {\n    let cachedPlugin = _PLUGIN;\n\n    if (cachedPlugin !== null) {\n      return [cachedPlugin];\n    }\n\n    const { renderPikchrMarkdownIt } = await import('./md-it-plugin');\n    let loadedPlugin = (_PLUGIN = renderPikchrMarkdownIt);\n    return [loadedPlugin];\n  },\n});\n\nconst widgetPlugin: JupyterFrontEndPlugin<void> = {\n  id: `${NS}:widget`,\n  requires: [IJupyterWidgetRegistry],\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, registry: IJupyterWidgetRegistry) => {\n    const reg = {\n      name: NS,\n      version: VERSION,\n      exports: async () => {\n        return (await import('./widget')) as ExportMap;\n      },\n    };\n    registry.registerWidget(reg);\n  },\n};\n\n/**\n * Initialization data for the jupyterlab_robotmode extension.\n */\nconst modePlugin: JupyterFrontEndPlugin<void> = {\n  id: `${NS}:codemirror`,\n  autoStart: true,\n  requires: [ICodeMirror],\n  activate: async (app: JupyterFrontEnd, codeMirror: ICodeMirror) => {\n    const { definePikchrMode } = await import('@deathbeds/codemirror-pikchr');\n    definePikchrMode(codeMirror);\n  },\n};\n\nconst filePlugin: JupyterFrontEndPlugin<void> = {\n  id: `${NS}:file`,\n  autoStart: true,\n  optional: [\n    ITranslator,\n    IFileBrowserFactory,\n    ILauncher,\n    IMainMenu,\n    ICommandPalette,\n    IMimeDocumentTracker,\n  ],\n  activate: (\n    app: JupyterFrontEnd,\n    translator?: ITranslator,\n    browserFactory?: IFileBrowserFactory,\n    launcher?: ILauncher,\n    menu?: IMainMenu,\n    palette?: ICommandPalette,\n    mime?: IMimeDocumentTracker\n  ) => {\n    const { commands, contextMenu } = app;\n\n    const trans = (translator || nullTranslator).load(modePlugin.id);\n\n    commands.addCommand(CommandIDs.createNew, {\n      label: (args) =>\n        args['isPalette'] || args['isContextMenu']\n          ? trans.__('New %1 File', NAME)\n          : trans.__('%1 File', NAME),\n      caption: trans.__('Create a new %1 file', NAME),\n      icon: (args) => (args['isPalette'] ? void 0 : ICONS.P_BOX),\n      execute: async (args) => {\n        const cwd =\n          args['cwd'] ?? browserFactory?.defaultBrowser.model.path ?? undefined;\n        const model = await commands.execute('docmanager:new-untitled', {\n          path: cwd,\n          type: 'file',\n          ext: DOT_PIKCHR,\n        });\n        return commands.execute('docmanager:open', {\n          path: model.path,\n          factory: NAME,\n        });\n      },\n    });\n\n    // add to the file browser context menu\n    contextMenu.addItem({\n      command: CommandIDs.createNew,\n      args: { isContextMenu: true },\n      selector: CSS.CONTEXT_SELECTOR,\n      rank: 3,\n    });\n\n    function getRenderer(): RenderedPikchr | null {\n      if (!mime) {\n        return null;\n      }\n      const { currentWidget } = mime;\n      if (!(currentWidget && currentWidget instanceof MainAreaWidget)) {\n        return null;\n      }\n      const { renderer } = currentWidget.content;\n      if (!(renderer && renderer instanceof RenderedPikchr)) {\n        return null;\n      }\n      return renderer;\n    }\n\n    if (mime) {\n      commands.addCommand(CommandIDs.fit, {\n        icon: ICONS.FIT,\n        caption: trans.__('Toggle fit to container'),\n        execute: async (args: any) => getRenderer()?.toggleFit(),\n      });\n      commands.addCommand(CommandIDs.img, {\n        icon: imageIcon,\n        caption: trans.__('Toggle image rendering'),\n        execute: async (args: any) => getRenderer()?.toggleImage(),\n      });\n      const toolbar = new PikchrDocumentToolbar(commands);\n\n      app.docRegistry.addWidgetExtension(NAME, toolbar);\n    }\n\n    // add to the launcher\n    if (launcher) {\n      launcher.add({\n        command: CommandIDs.createNew,\n        category: LAUNCHER_CATEGORY,\n        rank: 1,\n      });\n    }\n\n    // add to the palette\n    if (palette) {\n      palette.addItem({\n        command: CommandIDs.createNew,\n        args: { isPalette: true },\n        category: PALETTE_CATEGORY,\n      });\n    }\n\n    // add to the menu\n    if (menu) {\n      menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew }], 30);\n    }\n  },\n};\n\nexport default [markdownPlugin, widgetPlugin, modePlugin, filePlugin];\n"],"names":["ICONS","P_BOX","LabIcon","name","svgstr","FIT","PikchrDocumentToolbar","constructor","commands","this","createNew","panel","context","img","CommandToolbarButton","id","fit","toolbar","insertItem","DisposableDelegate","dispose","_PLUGIN","markdownPlugin","simpleMarkdownItPlugin","NS","title","description","documentationUrls","plugin","pikchr","examples","async","renderPikchrMarkdownIt","widgetPlugin","requires","IJupyterWidgetRegistry","autoStart","activate","app","registry","reg","version","exports","registerWidget","modePlugin","ICodeMirror","codeMirror","definePikchrMode","filePlugin","optional","ITranslator","IFileBrowserFactory","ILauncher","IMainMenu","ICommandPalette","IMimeDocumentTracker","translator","browserFactory","launcher","menu","palette","mime","contextMenu","trans","nullTranslator","load","getRenderer","currentWidget","MainAreaWidget","renderer","content","RenderedPikchr","addCommand","label","args","__","caption","icon","execute","cwd","defaultBrowser","model","path","undefined","type","ext","factory","addItem","command","isContextMenu","selector","rank","toggleFit","imageIcon","toggleImage","docRegistry","addWidgetExtension","add","category","isPalette","fileMenu","newMenu","addGroup"],"sourceRoot":""}