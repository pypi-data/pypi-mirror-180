{"version":3,"file":"346.5a03066a604b4d261258.js?v=5a03066a604b4d261258","mappings":"+KA0EUA,E,2BApEH,MAAMC,UAAmB,EAAAC,cAC9BC,WAAWC,GACTC,MAAMF,WAAWC,IACFE,KAAKC,cAAgBD,KAAKE,SAClCC,SAAS,aAChBH,KAAKI,MAAMC,GACT,4CACAL,KAAKM,eACLN,MAEFA,KAAKI,MAAMC,GAAG,eAAgBL,KAAKO,cAAeP,KACpD,CAEAQ,SACET,MAAMS,SACDR,KAAKM,iBACVN,KAAKO,eACP,CAEAA,gBACEP,KAAKS,GAAGC,UAAYV,KAAKI,MAAMO,IAAI,QACrC,CAEAC,uBACE,MAAMC,EAASb,KAAKI,MAAMO,IAAI,SACxBG,QAAepB,EAAQqB,OAAOP,OAAO,CACzCO,OAAQf,KAAKI,MAAMO,IAAI,UACvBK,SAAUhB,KAAKI,MAAMO,IAAI,aACzBM,IAAKjB,KAAKI,MAAMO,IAAI,OACpBO,SAAUlB,KAAKI,MAAMO,IAAI,eAEvBE,IAAWC,IACbd,KAAKI,MAAMe,IAAI,CAAEC,MAAON,IACxBd,KAAKqB,QAET,EAGK,MAAMC,UAAoB,EAAAC,eAS/BC,WACE,MAAO,IACFzB,MAAMyB,WACTC,YAAaH,EAAYI,WACzBC,cAAe,EAAAC,GACfC,sBAAuB,KACvBC,WAAYR,EAAYS,UACxBC,aAAc,EAAAJ,GACdK,qBAAsB,KACtBC,OAAQ,GACRd,MAAO,GACPe,UAAW,KACXC,UAAW,KAEf,CAEAvC,WAAWwC,EAAiCC,GAC1CvC,MAAMF,WAAWwC,EAAYC,EAC/B,EA1BO,EAAAZ,WAAa,cACb,EAAAa,aAAe,EAAAX,GACf,EAAAY,qBAAuB,KAEvB,EAAAT,UAAY,aACZ,EAAAU,YAAc,EAAAb,GACd,EAAAc,oBAAsB,KAuB/B,SAAUhD,GACK,EAAAqB,OAAS,gBACvB,CAFD,CAAUrB,IAAAA,EAAO,I","sources":["webpack://@deathbeds/jupikchr/./src/widget.ts"],"sourcesContent":["import type { IBackboneModelOptions } from '@jupyter-widgets/base';\nimport { DOMWidgetModel, DOMWidgetView, WidgetView } from '@jupyter-widgets/base';\n\nimport { Pikchr } from './pikchr';\nimport { CSS, NS, VERSION } from './tokens';\n\nexport class PikchrView extends DOMWidgetView {\n  initialize(parameters: WidgetView.IInitializeParameters<PikchrModel>): void {\n    super.initialize(parameters);\n    const widget = this.luminoWidget || this.pWidget;\n    widget.addClass(CSS.WIDGET);\n    this.model.on(\n      'change:source change:dark_mode change:tag',\n      this.onSourceChange,\n      this\n    );\n    this.model.on('change:value', this.onValueChange, this);\n  }\n\n  render() {\n    super.render();\n    void this.onSourceChange();\n    this.onValueChange();\n  }\n\n  onValueChange() {\n    this.el.innerHTML = this.model.get('value');\n  }\n\n  async onSourceChange() {\n    const oldSvg = this.model.get('value');\n    const newSvg = await Private.pikchr.render({\n      pikchr: this.model.get('source'),\n      darkMode: this.model.get('dark_mode'),\n      tag: this.model.get('tag'),\n      cssClass: this.model.get('css_class'),\n    });\n    if (oldSvg !== newSvg) {\n      this.model.set({ value: newSvg });\n      this.touch();\n    }\n  }\n}\n\nexport class PikchrModel extends DOMWidgetModel {\n  static model_name = 'PikchrModel';\n  static model_module = NS;\n  static model_module_version = VERSION;\n\n  static view_name = 'PikchrView';\n  static view_module = NS;\n  static view_module_version = VERSION;\n\n  defaults() {\n    return {\n      ...super.defaults(),\n      _model_name: PikchrModel.model_name,\n      _model_module: NS,\n      _model_module_version: VERSION,\n      _view_name: PikchrModel.view_name,\n      _view_module: NS,\n      _view_module_version: VERSION,\n      source: '',\n      value: '',\n      dark_mode: null,\n      css_class: null,\n    };\n  }\n\n  initialize(attributes: Backbone.ObjectHash, options: IBackboneModelOptions) {\n    super.initialize(attributes, options);\n  }\n}\n\nnamespace Private {\n  export const pikchr = Pikchr.initialize();\n}\n"],"names":["Private","PikchrView","DOMWidgetView","initialize","parameters","super","this","luminoWidget","pWidget","addClass","model","on","onSourceChange","onValueChange","render","el","innerHTML","get","async","oldSvg","newSvg","pikchr","darkMode","tag","cssClass","set","value","touch","PikchrModel","DOMWidgetModel","defaults","_model_name","model_name","_model_module","NS","_model_module_version","_view_name","view_name","_view_module","_view_module_version","source","dark_mode","css_class","attributes","options","model_module","model_module_version","view_module","view_module_version"],"sourceRoot":""}