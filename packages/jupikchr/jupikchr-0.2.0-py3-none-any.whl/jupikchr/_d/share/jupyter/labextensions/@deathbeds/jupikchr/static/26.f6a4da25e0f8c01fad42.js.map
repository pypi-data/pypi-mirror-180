{"version":3,"file":"26.f6a4da25e0f8c01fad42.js?v=f6a4da25e0f8c01fad42","mappings":"uKA+BUA,E,kBA1BH,SAASC,EAAuBC,GACrC,IAAI,MAAEC,GAAUD,EAAGE,SAASC,MAE5BH,EAAGE,SAASC,MAAMF,MAAQ,CAACG,EAAQC,EAAKC,EAASC,EAAKC,KACpD,MAAM,KAAEC,EAAI,QAAEC,GAAYN,EAAOC,GAC3BM,EAAOF,EAAKG,OAAOC,MAAM,QAAQ,GAEvC,IAAK,cAAeF,GAClB,OAAOV,EAAQA,EAAMG,EAAQC,EAAKC,EAASC,EAAKC,GAAO,GAGzD,MAAMM,EAAgBhB,EAAQiB,SACxBC,EAAc,YAAYF,QAE1BG,EAAuC,CAC3CC,OAAQR,EACRS,IAAK,MACLC,eAAe,GAKjB,OAFKtB,EAAQuB,YAAYJ,EAAeH,GAEjCE,CAAW,CAEtB,EAEA,SAAUlB,GACK,EAAAoB,OAAS,iBACtB,IAAII,EAAU,EAIdC,eAAeC,IACb,aAAa,IAAIC,SAAQ,CAACC,EAASC,IAAWC,WAAWF,EAAS,MACpE,CAqBOH,eAAeM,EACpBf,EACAgB,EACAC,EAAU,GAEV,MAAMC,EAAOC,SAASC,eAAepB,GACrC,IAAIkB,EAIJ,OAAID,EAAU,SACNP,UACOK,EAAmBf,EAAegB,EAAQC,EAAU,SAEnEI,QAAQC,KAAK,GAAG,qCAPdJ,EAAKK,UAAYP,CASrB,CA1CgB,EAAAf,OAAhB,WACE,MAAO,gBAAgBO,GACzB,EAIsB,EAAAD,YAAfE,eAAeF,EACpBJ,EACAH,EACAiB,EAAU,GAEV,IAAID,EACJ,IACEA,QAAehC,EAAQoB,OAAOoB,OAAOrB,E,CACrC,MACA,OAAIc,EAAU,SACNP,UACOH,EAAYJ,EAAeH,EAAeiB,EAAU,SAEjEI,QAAQC,KAAK,GAAG,wB,OAIdP,EAAmBf,EAAegB,EAC1C,EAEsB,EAAAD,mBAAkB,CAiBzC,CA9CD,CAAU/B,IAAAA,EAAO,I","sources":["webpack://@deathbeds/jupikchr/./src/md-it-plugin.ts"],"sourcesContent":["import type MarkdownIt from 'markdown-it';\n\nimport { Pikchr } from './pikchr';\nimport { EMOJI, LANGS } from './tokens';\n\nexport function renderPikchrMarkdownIt(md: MarkdownIt): void {\n  let { fence } = md.renderer.rules;\n\n  md.renderer.rules.fence = (tokens, idx, options, env, slf) => {\n    const { info, content } = tokens[idx];\n    const lang = info.trim().split(/\\s+/g)[0];\n\n    if (!LANGS.includes(lang)) {\n      return fence ? fence(tokens, idx, options, env, slf) : '';\n    }\n\n    const placeholderId = Private.nextId();\n    const placeholder = `<img id=\"${placeholderId}\" />`;\n\n    const renderOptions: Pikchr.IRenderOptions = {\n      pikchr: content,\n      tag: 'img',\n      addDimensions: true,\n    };\n\n    void Private.renderLater(renderOptions, placeholderId);\n\n    return placeholder;\n  };\n}\n\nnamespace Private {\n  export const pikchr = Pikchr.initialize();\n  let _nextId = 0;\n  export function nextId() {\n    return `md-it-pikchr-${_nextId++}`;\n  }\n  async function sleep(): Promise<void> {\n    return await new Promise((resolve, reject) => setTimeout(resolve, 100));\n  }\n  export async function renderLater(\n    renderOptions: Pikchr.IRenderOptions,\n    placeholderId: string,\n    retries = 5\n  ): Promise<void> {\n    let imgStr: string;\n    try {\n      imgStr = await Private.pikchr.render(renderOptions);\n    } catch {\n      if (retries > 0) {\n        await sleep();\n        return await renderLater(renderOptions, placeholderId, retries - 1);\n      } else {\n        console.warn(`${EMOJI} failed to render`);\n        return;\n      }\n    }\n    await replacePlaceholder(placeholderId, imgStr);\n  }\n\n  export async function replacePlaceholder(\n    placeholderId: string,\n    imgStr: string,\n    retries = 5\n  ): Promise<void> {\n    const node = document.getElementById(placeholderId);\n    if (node) {\n      node.outerHTML = imgStr;\n      return;\n    }\n    if (retries > 0) {\n      await sleep();\n      return await replacePlaceholder(placeholderId, imgStr, retries - 1);\n    }\n    console.warn(`${EMOJI} failed to update placeholder`);\n    return;\n  }\n}\n"],"names":["Private","renderPikchrMarkdownIt","md","fence","renderer","rules","tokens","idx","options","env","slf","info","content","lang","trim","split","placeholderId","nextId","placeholder","renderOptions","pikchr","tag","addDimensions","renderLater","_nextId","async","sleep","Promise","resolve","reject","setTimeout","replacePlaceholder","imgStr","retries","node","document","getElementById","console","warn","outerHTML","render"],"sourceRoot":""}