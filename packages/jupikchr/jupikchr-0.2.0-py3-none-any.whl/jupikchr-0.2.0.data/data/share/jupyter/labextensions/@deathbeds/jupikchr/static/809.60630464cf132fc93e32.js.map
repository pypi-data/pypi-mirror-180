{"version":3,"file":"809.60630464cf132fc93e32.js?v=60630464cf132fc93e32","mappings":"wKACO,MAGMA,EAAY,gBAGZC,EAAY,SASZC,EAAa,CAHO,UCMjC,IAAYC,GAAZ,SAAYA,GACV,YACA,iBACA,kBACA,eACA,eACA,eACA,WACA,cACA,eACA,YACA,cACA,gBACA,mBACA,iBACA,gBACA,iBACA,qBACA,qBACA,yBACA,gBACA,cACA,WACA,gBACA,iBACD,CAzBD,CAAYA,IAAAA,EAAE,KAmCd,MAAMC,EAAc,0BAGpB,SAASC,EACPC,EACAC,EACAC,GAAO,EACPC,GAEA,MAAO,CACLH,MAAQE,EAAe,IAAIE,OAAOJ,EAAMK,OAASP,EAAYO,OAAQL,EAAMM,OAA5DN,EACfC,WACGE,EAEP,CAGA,MAAMI,EAAiC,CAAC,EAElCC,EAAOT,EAAE,+DAAgEF,EAAGY,IAE5EC,EAAiBX,EACrB,8EACAF,EAAGc,IAGCC,EAASb,EAAE,wBAAyBF,EAAGgB,IAEvCC,EAAUf,EAAE,oBAAqBF,EAAGkB,IAAI,GAExCC,EAAWjB,EAAE,mBAAoBF,EAAGoB,IAAI,GAExCC,EAAYnB,EAAE,MAAOF,EAAGsB,IAAI,GAE5BC,EAAYrB,EAAE,YAAaF,EAAGwB,IAAI,GAElCC,EAAUvB,EAAE,SAAUF,EAAG0B,IAAI,GAE7BC,EAAczB,EAClB,iUACAF,EAAG4B,IAGCC,EAAc3B,EAAE,qBAAsBF,EAAG4B,IAEzCE,EAAY5B,EAAE,4CAA6CF,EAAG+B,IAE9DC,EAAQ9B,EAAE,uBAAwBF,EAAGiC,IAErCC,EAAahC,EACjB,kGACAF,EAAGmC,IAGCC,EAAQlC,EAAE,eAAgBF,EAAGqC,IAE7BC,EAAWpC,EAAE,kCAAmCF,EAAGqC,IAEnDE,EAAerC,EACnB,08CACAF,EAAGqC,IAGCG,EAAStC,EACb,6GACAF,EAAGyC,IAGCC,EAAgBxC,EAAE,QAASF,EAAGyC,IAE9BE,EAAazC,EAAE,oDAAqDF,EAAGyC,IAEvEG,EAAa1C,EAAE,sDAAuDF,EAAG6C,IAEzEC,EAAc5C,EAClB,iEACAF,EAAGyC,IAGCM,EAAc7C,EAClB,wFACAF,EAAGmC,IAGCa,EAAc9C,EAClB,kEACAF,EAAGmC,IAQCc,EAAuB,CAC3B5B,EACAmB,EACAG,EACAD,EACA/B,EACAY,EACAR,EACAe,EACAiB,EAdc7C,EAAE,iBAAkBF,EAAGmC,IAErBjC,EAAE,uCAAwCF,EAAGyC,IAe7DZ,EACAK,EACAT,EACAc,EACAK,EACAE,EACAE,EACA7B,EACAiB,EACAE,EACAzB,EACAc,EACAK,EACAf,GAOK,SAASiC,GAAiB,WAAEC,IAQjCA,EAAWC,iBAA6BtD,EAAW,IAAKY,EAAQ2C,KAP1B,CACpCA,KAAM,CACJC,iBAAkB,CAAC,WACnBC,YAAa,QAMjBJ,EAAWK,WAAW3D,EAAWC,GAEjC,MAAM2D,EAAW,CACfC,IAAK3D,EACL4D,KAAM9D,EACN+D,KAAM9D,EACN+D,KD1LsB,UC6LxBV,EAAWW,SAASC,KAAKN,EAC3B,CAvBA/C,EAAOsD,MAAQ,IAAIf,E","sources":["webpack://@deathbeds/jupikchr/../codemirror-pikchr/src/tokens.ts","webpack://@deathbeds/jupikchr/../codemirror-pikchr/src/mode.ts"],"sourcesContent":["/** The npm namespace */\nexport const NS = '@deathbeds/codemirror-pikchr';\n\n/** well-known mime type for pikchr */\nexport const MIME_TYPE = 'text/x-pikchr';\n\n/** the canonical CodeMirror mode name */\nexport const MODE_NAME = 'pikchr';\n\n/** the human-readable name of the CodeMirror mode */\nexport const MODE_LABEL = 'Pikchr';\n\n/** primary file extension */\nexport const DEFAULT_EXTENSION = 'pikchr';\n\n/** all recognized file extensions */\nexport const EXTENSIONS = [DEFAULT_EXTENSION];\n","/// <reference path=\"../../../node_modules/@jupyterlab/codemirror/typings/codemirror/codemirror.d.ts\" />\nimport type { ISimpleMeta, ISimpleState } from 'codemirror';\n\nimport type { ICodeMirror } from '@jupyterlab/codemirror';\n\nimport { EXTENSIONS, MIME_TYPE, MODE_LABEL, MODE_NAME } from './tokens';\n\n/** All the possible states: pushing non-existing states == bad */\nexport type TState =\n  | 'start'\n  | 'comment'\n  | 'attribute'\n  | 'expr'\n  | 'object'\n  | 'place'\n  | 'position'\n  | 'statement';\n\n/** the tokens we (might) use */\nexport enum TT {\n  AM = 'atom',\n  AT = 'attribute',\n  BE = 'builtin.em',\n  BI = 'builtin',\n  BK = 'bracket',\n  CM = 'comment',\n  DF = 'def',\n  HL = 'header',\n  KW = 'keyword',\n  MT = 'meta',\n  NB = 'number',\n  OP = 'operator',\n  PC = 'punctuation',\n  QF = 'qualifier',\n  PR = 'property',\n  SE = 'string.em',\n  SH = 'string.header',\n  SS = 'string.strong',\n  SSE = 'string.strong.em',\n  S2 = 'string-2',\n  ST = 'string',\n  TG = 'tag',\n  VB = 'variable',\n  V2 = 'variable-2',\n}\n\n/** Our custom state. */\ntype TPikchrState = ISimpleState<TState, TT>;\n\n/** Our overall states */\nexport type TPikchrStates = {\n  [key in TState]: TPikchrState[];\n};\n\nconst RE_SRC_TERM = /(?=($|[;,.\\s<>{}()\\\\]))/;\n\n/** helper function for compactly representing a rule */\nfunction r(\n  regex: RegExp,\n  token?: TT | TT[],\n  term = true,\n  opt?: Partial<TPikchrState>\n): TPikchrState {\n  return {\n    regex: !term ? regex : new RegExp(regex.source + RE_SRC_TERM.source, regex.flags),\n    token,\n    ...opt,\n  };\n}\n\n/** collects the states that we build */\nconst states: Partial<TPikchrStates> = {};\n\nconst R_OP = r(/(=|\\+=|-=|\\*=|\\/=|\\+|\\-|abs|cos|dist|int|max|min|sin|sqrt|%)/, TT.OP);\n\nconst R_OBJECT_CLASS = r(\n  /(arc|arrow|box|circle|cylinder|dot|ellipse|file|line|move|oval|spline|text)/,\n  TT.AM\n);\n\nconst R_META = r(/(define|print|assert)/, TT.MT);\n\nconst R_LABEL = r(/[A-Z][a-zA-Z\\d_]*/, TT.DF, false);\n\nconst R_STRING = r(/\"([^\"\\\\]|\\\\\")*?\"/, TT.ST, false);\n\nconst R_COMMENT = r(/#.*/, TT.CM, false);\n\nconst R_BRACKET = r(/[\\][(){}]/, TT.BK, false);\n\nconst R_PUNCT = r(/[;\\\\,]/, TT.PC, false);\n\nconst R_PIK_VALUE = r(\n  /(arcrad|arrowht|arrowwid|bottommargin|boxht|boxrad|boxwid|charht|charwid|circlerad|color|cylht|cylrad|cylwid|dashwid|debug_label_color|dotrad|ellipseht|ellipsewid|fileht|filerad|filewid|fill|fontscale|leftmargin|lineht|linerad|linewid|margin|movewid|ovalht|ovalwid|rightmargin|scale|textht|textwid|thickness|topmargin)/,\n  TT.BI\n);\n\nconst R_DIRECTION = r(/right|down|left|up/, TT.BI);\n\nconst R_ORDINAL = r(/this|first|last|previous|\\d+(st|nd|rd|th)/, TT.KW);\n\nconst R_VAR = r(/[\\$@a-z][a-zA-Z\\d_]*/, TT.V2);\n\nconst R_EDGENAME = r(\n  /(\\.?)(n|north|t|top|ne|e|east|right|se|s|south|bot|bottom|sw|w|west|left|nw|c|center|start|end)/,\n  TT.QF\n);\n\nconst R_HEX = r(/0x[\\da-f]{6}/, TT.NB);\n\nconst R_NUMBER = r(/[\\d][\\d\\.]+(in|cm|px|pt|pc|mm)?/, TT.NB);\n\nconst R_HTML_COLOR = r(\n  /aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|none|off|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen/i,\n  TT.NB\n);\n\nconst R_ATTR = r(\n  /(same|same as|dashed|dotted|color|fill|behind|cw|ccw|invis|invisible|thick|thing|solid|chop|fit|<-|->|<->)/,\n  TT.AT\n);\n\nconst R_FANCY_ARROW = r(/→|←|↔/, TT.AT);\n\nconst R_ENT_ATTR = r(/&(rarr|rightarrow|larr|leftarrow|leftrightarrow);/, TT.AT);\n\nconst R_NUM_PROP = r(/(diameter|ht|height|rad|radius|thickness|width|wid)/, TT.PR);\n\nconst R_TEXT_ATTR = r(\n  /(above|aligned|below|big|bold|center|italic|ljust|rjust|small)/,\n  TT.AT\n);\n\nconst R_WHICH_WAY = r(\n  /((above|below|heading)|((right|left|n|north|ne|e|east|se|s|south|sw|w|west|nw)\\s+of))/,\n  TT.QF\n);\n\nconst R_PATH_ATTR = r(\n  /(at|with|from|then|go|to|close|even\\s+with|until\\s+even\\s+with)/,\n  TT.QF\n);\n\nconst R_PLACE = r(/(vertex|of|in)/, TT.QF);\n\nconst R_LOC_POS = r(/(of the way between|and|way between)/, TT.AT);\n\n/** base isn't a state. these are the \"normal business\" that any state might use */\nconst base: TPikchrState[] = [\n  R_COMMENT,\n  R_ATTR,\n  R_ENT_ATTR,\n  R_FANCY_ARROW,\n  R_OP,\n  R_BRACKET,\n  R_META,\n  R_ORDINAL,\n  R_WHICH_WAY,\n  R_PLACE,\n  R_LOC_POS,\n  R_DIRECTION,\n  R_EDGENAME,\n  R_PUNCT,\n  R_HTML_COLOR,\n  R_NUM_PROP,\n  R_TEXT_ATTR,\n  R_PATH_ATTR,\n  R_STRING,\n  R_HEX,\n  R_NUMBER,\n  R_OBJECT_CLASS,\n  R_PIK_VALUE,\n  R_VAR,\n  R_LABEL,\n];\n\n/** the starting state (begining of a file) */\nstates.start = [...base];\n\n/** the actual exported function that will install the mode in CodeMirror */\nexport function definePikchrMode({ CodeMirror }: ICodeMirror) {\n  const meta: ISimpleMeta<TState, TT> = {\n    meta: {\n      dontIndentStates: ['comment'],\n      lineComment: '#',\n    },\n  };\n\n  CodeMirror.defineSimpleMode<TState, TT>(MODE_NAME, { ...states, meta: meta as any });\n\n  CodeMirror.defineMIME(MIME_TYPE, MODE_NAME);\n\n  const mimeInfo = {\n    ext: EXTENSIONS,\n    mime: MIME_TYPE,\n    mode: MODE_NAME,\n    name: MODE_LABEL,\n  };\n\n  CodeMirror.modeInfo.push(mimeInfo);\n}\n"],"names":["MIME_TYPE","MODE_NAME","EXTENSIONS","TT","RE_SRC_TERM","r","regex","token","term","opt","RegExp","source","flags","states","R_OP","OP","R_OBJECT_CLASS","AM","R_META","MT","R_LABEL","DF","R_STRING","ST","R_COMMENT","CM","R_BRACKET","BK","R_PUNCT","PC","R_PIK_VALUE","BI","R_DIRECTION","R_ORDINAL","KW","R_VAR","V2","R_EDGENAME","QF","R_HEX","NB","R_NUMBER","R_HTML_COLOR","R_ATTR","AT","R_FANCY_ARROW","R_ENT_ATTR","R_NUM_PROP","PR","R_TEXT_ATTR","R_WHICH_WAY","R_PATH_ATTR","base","definePikchrMode","CodeMirror","defineSimpleMode","meta","dontIndentStates","lineComment","defineMIME","mimeInfo","ext","mime","mode","name","modeInfo","push","start"],"sourceRoot":""}