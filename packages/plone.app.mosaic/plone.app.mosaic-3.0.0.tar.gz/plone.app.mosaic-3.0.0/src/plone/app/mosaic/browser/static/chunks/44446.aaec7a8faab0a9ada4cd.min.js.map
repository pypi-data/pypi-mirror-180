{"version":3,"file":"chunks/44446.aaec7a8faab0a9ada4cd.min.js","mappings":"6GAMA,EAAQ,M,oBCEP,WACG,aAEA,IAAIA,EAAWC,QAAQC,KAAKC,MAAMC,QAAQ,yBAEtCC,EAAWJ,QAAQC,KAAKC,MAAMC,QAAQ,eAEtCE,EAASL,QAAQC,KAAKC,MAAMC,QAAQ,sBAuDpCG,EAAO,SAAUC,GACnB,IAAIC,EAvBe,SAAUD,GAC7B,IAAIE,EAAW,GACXC,EAASH,EAAOI,IAAID,OACpBE,EAlCgB,SAAUL,GAC9B,OAAOA,EAAOM,SAAS,gBAAiB,GAAI,SAC9C,CAgCqBC,CAAgBP,GACnCE,GAAY,eAAiBC,EAAOH,EAAOQ,gBAAgBC,UAAY,KACvE,IAAIC,EAjCwB,SAAUV,GACtC,OAAOA,EAAOM,SAAS,oBAAoB,EAAO,UACpD,CA+BaK,CAAwBX,GAAU,2BAA6B,GAC1EF,EAAOc,KAAKZ,EAAOa,YAAY,SAAUC,GACvCZ,GAAY,gDAAkDC,EAAOH,EAAOQ,gBAAgBO,WAAWD,IAAQ,IAAMJ,EAAO,GAC9H,IACIL,IACFH,GAAY,0BAA4BG,EAAe,YAEzD,IAAIW,EArBU,SAAUhB,GACxB,IAAIgB,EAAShB,EAAOM,SAAS,UAAW,UAAW,UACnD,OAA6B,IAAzBU,EAAOC,QAAQ,KACVD,EAPW,SAAUhB,GAC9B,IAAIgB,EAAShB,EAAOM,SAAS,UAAW,GAAI,QAC5C,OAAOU,EAAOhB,EAAOkB,KAAOF,CAC9B,CAMWG,CAAgBnB,EAE3B,CAceoB,CAAUpB,GACnBqB,EAlCa,SAAUrB,GAC3B,IAAIqB,EAAYrB,EAAOM,SAAS,aAAc,GAAI,UAClD,OAAgC,IAA5Be,EAAUJ,QAAQ,KACbI,EAPc,SAAUrB,GAEjC,OADgBA,EAAOM,SAAS,aAAc,GAAI,QACjCN,EAAOkB,KAAO,EACjC,CAMWI,CAAmBtB,EAE9B,CA2BkBuB,CAAavB,GAEzBwB,EAA6B,4KADV3B,EAAS4B,IAAM,YAAc,0BACnB,iDAC7BC,EAAiB1B,EAAO2B,UAAUC,IAClCC,EAAUH,EAAiB,SAAWvB,EAAOuB,GAAkB,IAAM,GAEzE,MADkB,8BAA0CxB,EAA1C,oBAAgFC,EAAOa,GAAU,6BAA+Bb,EAAOkB,GAAa,IAAMQ,EAAU,IAAM7B,EAAO8B,aAAeN,EAAhM,gBAEpB,CAGgBO,CAAe/B,GACfA,EAAOgC,cAAcjC,KAAK,CACtCkC,MAAO,UACPC,KAAM,QACNC,KAAM,CACJC,KAAM,QACNC,MAAO,CAAC,CACJC,KAAM,UACNF,KAAM,SACNG,WAAW,KAGjBC,QAAS,CAAC,CACNJ,KAAM,SACNE,KAAM,QACNG,KAAM,QACNC,SAAS,IAEbC,YAAa,CAAEC,QAAS3C,KAElB4C,MAAM,QAChB,EAyBErD,EAASsD,IAAI,WAAW,SAAU9C,IAvBnB,SAAUA,GACzBA,EAAO+C,WAAW,cAAc,WAC9BhD,EAAKC,EACP,GACF,CAoBIgD,CAAWhD,GAlBA,SAAUA,GACvB,IAAIiD,EAAW,WACb,OAAOjD,EAAOkD,YAAY,aAC5B,EACAlD,EAAOmD,GAAGC,SAASC,UAAU,UAAW,CACtCC,KAAM,UACNC,QAAS,UACTN,SAAUA,IAEZjD,EAAOmD,GAAGC,SAASI,YAAY,UAAW,CACxCF,KAAM,UACNb,KAAM,UACNQ,SAAUA,GAEd,CAKIQ,CAASzD,EACX,GAKN,CArHA,E","sources":["webpack://plone-mosaic/./node_modules/tinymce/plugins/preview/index.js","webpack://plone-mosaic/./node_modules/tinymce/plugins/preview/plugin.js"],"sourcesContent":["// Exports the \"preview\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/preview')\n//   ES2015:\n//     import 'tinymce/plugins/preview'\nrequire('./plugin.js');","/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.10.7 (2022-12-06)\n */\n(function () {\n    'use strict';\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.Env');\n\n    var global = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getContentStyle = function (editor) {\n      return editor.getParam('content_style', '', 'string');\n    };\n    var shouldUseContentCssCors = function (editor) {\n      return editor.getParam('content_css_cors', false, 'boolean');\n    };\n    var getBodyClassByHash = function (editor) {\n      var bodyClass = editor.getParam('body_class', '', 'hash');\n      return bodyClass[editor.id] || '';\n    };\n    var getBodyClass = function (editor) {\n      var bodyClass = editor.getParam('body_class', '', 'string');\n      if (bodyClass.indexOf('=') === -1) {\n        return bodyClass;\n      } else {\n        return getBodyClassByHash(editor);\n      }\n    };\n    var getBodyIdByHash = function (editor) {\n      var bodyId = editor.getParam('body_id', '', 'hash');\n      return bodyId[editor.id] || bodyId;\n    };\n    var getBodyId = function (editor) {\n      var bodyId = editor.getParam('body_id', 'tinymce', 'string');\n      if (bodyId.indexOf('=') === -1) {\n        return bodyId;\n      } else {\n        return getBodyIdByHash(editor);\n      }\n    };\n\n    var getPreviewHtml = function (editor) {\n      var headHtml = '';\n      var encode = editor.dom.encode;\n      var contentStyle = getContentStyle(editor);\n      headHtml += '<base href=\"' + encode(editor.documentBaseURI.getURI()) + '\">';\n      var cors = shouldUseContentCssCors(editor) ? ' crossorigin=\"anonymous\"' : '';\n      global.each(editor.contentCSS, function (url) {\n        headHtml += '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + encode(editor.documentBaseURI.toAbsolute(url)) + '\"' + cors + '>';\n      });\n      if (contentStyle) {\n        headHtml += '<style type=\"text/css\">' + contentStyle + '</style>';\n      }\n      var bodyId = getBodyId(editor);\n      var bodyClass = getBodyClass(editor);\n      var isMetaKeyPressed = global$1.mac ? 'e.metaKey' : 'e.ctrlKey && !e.altKey';\n      var preventClicksOnLinksScript = '<script>' + 'document.addEventListener && document.addEventListener(\"click\", function(e) {' + 'for (var elm = e.target; elm; elm = elm.parentNode) {' + 'if (elm.nodeName === \"A\" && !(' + isMetaKeyPressed + ')) {' + 'e.preventDefault();' + '}' + '}' + '}, false);' + '</script> ';\n      var directionality = editor.getBody().dir;\n      var dirAttr = directionality ? ' dir=\"' + encode(directionality) + '\"' : '';\n      var previewHtml = '<!DOCTYPE html>' + '<html>' + '<head>' + headHtml + '</head>' + '<body id=\"' + encode(bodyId) + '\" class=\"mce-content-body ' + encode(bodyClass) + '\"' + dirAttr + '>' + editor.getContent() + preventClicksOnLinksScript + '</body>' + '</html>';\n      return previewHtml;\n    };\n\n    var open = function (editor) {\n      var content = getPreviewHtml(editor);\n      var dataApi = editor.windowManager.open({\n        title: 'Preview',\n        size: 'large',\n        body: {\n          type: 'panel',\n          items: [{\n              name: 'preview',\n              type: 'iframe',\n              sandboxed: true\n            }]\n        },\n        buttons: [{\n            type: 'cancel',\n            name: 'close',\n            text: 'Close',\n            primary: true\n          }],\n        initialData: { preview: content }\n      });\n      dataApi.focus('close');\n    };\n\n    var register$1 = function (editor) {\n      editor.addCommand('mcePreview', function () {\n        open(editor);\n      });\n    };\n\n    var register = function (editor) {\n      var onAction = function () {\n        return editor.execCommand('mcePreview');\n      };\n      editor.ui.registry.addButton('preview', {\n        icon: 'preview',\n        tooltip: 'Preview',\n        onAction: onAction\n      });\n      editor.ui.registry.addMenuItem('preview', {\n        icon: 'preview',\n        text: 'Preview',\n        onAction: onAction\n      });\n    };\n\n    function Plugin () {\n      global$2.add('preview', function (editor) {\n        register$1(editor);\n        register(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"],"names":["global$2","tinymce","util","Tools","resolve","global$1","global","open","editor","content","headHtml","encode","dom","contentStyle","getParam","getContentStyle","documentBaseURI","getURI","cors","shouldUseContentCssCors","each","contentCSS","url","toAbsolute","bodyId","indexOf","id","getBodyIdByHash","getBodyId","bodyClass","getBodyClassByHash","getBodyClass","preventClicksOnLinksScript","mac","directionality","getBody","dir","dirAttr","getContent","getPreviewHtml","windowManager","title","size","body","type","items","name","sandboxed","buttons","text","primary","initialData","preview","focus","add","addCommand","register$1","onAction","execCommand","ui","registry","addButton","icon","tooltip","addMenuItem","register"],"sourceRoot":""}