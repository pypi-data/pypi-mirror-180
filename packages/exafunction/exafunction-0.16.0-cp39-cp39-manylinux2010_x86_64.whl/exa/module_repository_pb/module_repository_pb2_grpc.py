# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from exa.module_repository_pb import module_repository_pb2 as exa_dot_module__repository__pb_dot_module__repository__pb2


class ModuleRepositoryStub(object):
    """buf:lint:ignore SERVICE_SUFFIX
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterObject = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/RegisterObject',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterObjectRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterObjectResponse.FromString,
                )
        self.GetObjectMetadata = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/GetObjectMetadata',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectMetadataRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectMetadataResponse.FromString,
                )
        self.GetSerializedObjectMetadata = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/GetSerializedObjectMetadata',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetSerializedObjectMetadataRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetSerializedObjectMetadataResponse.FromString,
                )
        self.GetObjectIdFromTag = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/GetObjectIdFromTag',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectIdFromTagRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectIdFromTagResponse.FromString,
                )
        self.AddTagForObjectId = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/AddTagForObjectId',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.AddTagForObjectIdRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.AddTagForObjectIdResponse.FromString,
                )
        self.BatchGetObjectMetadata = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/BatchGetObjectMetadata',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectMetadataRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectMetadataResponse.FromString,
                )
        self.BatchGetObjectIdFromTag = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/BatchGetObjectIdFromTag',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectIdFromTagRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectIdFromTagResponse.FromString,
                )
        self.GetAllTagsWithObjectIds = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/GetAllTagsWithObjectIds',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetAllTagsWithObjectIdsRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetAllTagsWithObjectIdsResponse.FromString,
                )
        self.RegisterBlob = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/RegisterBlob',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobResponse.FromString,
                )
        self.RegisterBlobStreaming = channel.stream_unary(
                '/exa.module_repository_pb.ModuleRepository/RegisterBlobStreaming',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobStreamingRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobStreamingResponse.FromString,
                )
        self.GetBlob = channel.unary_stream(
                '/exa.module_repository_pb.ModuleRepository/GetBlob',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobResponse.FromString,
                )
        self.ExistsBlob = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/ExistsBlob',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExistsBlobRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExistsBlobResponse.FromString,
                )
        self.GetBlobStoragePath = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/GetBlobStoragePath',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobStoragePathRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobStoragePathResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/HealthCheck',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.HealthCheckResponse.FromString,
                )
        self.ClearData = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/ClearData',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ClearDataRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ClearDataResponse.FromString,
                )
        self.Exit = channel.unary_unary(
                '/exa.module_repository_pb.ModuleRepository/Exit',
                request_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExitRequest.SerializeToString,
                response_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExitResponse.FromString,
                )


class ModuleRepositoryServicer(object):
    """buf:lint:ignore SERVICE_SUFFIX
    """

    def RegisterObject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSerializedObjectMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectIdFromTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTagForObjectId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetObjectMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetObjectIdFromTag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTagsWithObjectIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterBlob(self, request, context):
        """Exists for backwards compatibility only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterBlobStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExistsBlob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlobStoragePath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModuleRepositoryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterObject': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterObject,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterObjectRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterObjectResponse.SerializeToString,
            ),
            'GetObjectMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectMetadata,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectMetadataRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectMetadataResponse.SerializeToString,
            ),
            'GetSerializedObjectMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSerializedObjectMetadata,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetSerializedObjectMetadataRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetSerializedObjectMetadataResponse.SerializeToString,
            ),
            'GetObjectIdFromTag': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectIdFromTag,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectIdFromTagRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectIdFromTagResponse.SerializeToString,
            ),
            'AddTagForObjectId': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTagForObjectId,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.AddTagForObjectIdRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.AddTagForObjectIdResponse.SerializeToString,
            ),
            'BatchGetObjectMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetObjectMetadata,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectMetadataRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectMetadataResponse.SerializeToString,
            ),
            'BatchGetObjectIdFromTag': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetObjectIdFromTag,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectIdFromTagRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectIdFromTagResponse.SerializeToString,
            ),
            'GetAllTagsWithObjectIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTagsWithObjectIds,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetAllTagsWithObjectIdsRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetAllTagsWithObjectIdsResponse.SerializeToString,
            ),
            'RegisterBlob': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterBlob,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobResponse.SerializeToString,
            ),
            'RegisterBlobStreaming': grpc.stream_unary_rpc_method_handler(
                    servicer.RegisterBlobStreaming,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobStreamingRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobStreamingResponse.SerializeToString,
            ),
            'GetBlob': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBlob,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobResponse.SerializeToString,
            ),
            'ExistsBlob': grpc.unary_unary_rpc_method_handler(
                    servicer.ExistsBlob,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExistsBlobRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExistsBlobResponse.SerializeToString,
            ),
            'GetBlobStoragePath': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlobStoragePath,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobStoragePathRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobStoragePathResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.HealthCheckRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.HealthCheckResponse.SerializeToString,
            ),
            'ClearData': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearData,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ClearDataRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ClearDataResponse.SerializeToString,
            ),
            'Exit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exit,
                    request_deserializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExitRequest.FromString,
                    response_serializer=exa_dot_module__repository__pb_dot_module__repository__pb2.ExitResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exa.module_repository_pb.ModuleRepository', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModuleRepository(object):
    """buf:lint:ignore SERVICE_SUFFIX
    """

    @staticmethod
    def RegisterObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/RegisterObject',
            exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterObjectRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterObjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/GetObjectMetadata',
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectMetadataRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSerializedObjectMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/GetSerializedObjectMetadata',
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetSerializedObjectMetadataRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetSerializedObjectMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectIdFromTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/GetObjectIdFromTag',
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectIdFromTagRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetObjectIdFromTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTagForObjectId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/AddTagForObjectId',
            exa_dot_module__repository__pb_dot_module__repository__pb2.AddTagForObjectIdRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.AddTagForObjectIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchGetObjectMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/BatchGetObjectMetadata',
            exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectMetadataRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchGetObjectIdFromTag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/BatchGetObjectIdFromTag',
            exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectIdFromTagRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.BatchGetObjectIdFromTagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllTagsWithObjectIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/GetAllTagsWithObjectIds',
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetAllTagsWithObjectIdsRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetAllTagsWithObjectIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterBlob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/RegisterBlob',
            exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterBlobStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/exa.module_repository_pb.ModuleRepository/RegisterBlobStreaming',
            exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobStreamingRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.RegisterBlobStreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/exa.module_repository_pb.ModuleRepository/GetBlob',
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExistsBlob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/ExistsBlob',
            exa_dot_module__repository__pb_dot_module__repository__pb2.ExistsBlobRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.ExistsBlobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlobStoragePath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/GetBlobStoragePath',
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobStoragePathRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.GetBlobStoragePathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/HealthCheck',
            exa_dot_module__repository__pb_dot_module__repository__pb2.HealthCheckRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/ClearData',
            exa_dot_module__repository__pb_dot_module__repository__pb2.ClearDataRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.ClearDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exa.module_repository_pb.ModuleRepository/Exit',
            exa_dot_module__repository__pb_dot_module__repository__pb2.ExitRequest.SerializeToString,
            exa_dot_module__repository__pb_dot_module__repository__pb2.ExitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
