# Generated from DurakLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,55,411,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
        2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,
        10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
        16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,
        23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,
        29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,
        36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
        42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
        49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,1,0,1,
        0,1,0,1,0,1,0,1,0,5,0,124,8,0,10,0,12,0,127,9,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,5,1,138,8,1,10,1,12,1,141,9,1,1,1,1,1,1,1,1,
        1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,6,4,6,168,8,6,11,6,12,6,169,1,7,4,7,173,8,7,
        11,7,12,7,174,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,11,4,11,194,8,11,11,11,12,11,195,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,24,1,24,5,24,272,8,24,10,24,12,24,275,9,
        24,1,25,1,25,1,25,1,25,1,26,1,26,5,26,283,8,26,10,26,12,26,286,9,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,4,28,295,8,28,11,28,12,28,
        296,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,38,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,
        1,49,1,49,1,49,1,49,1,50,4,50,368,8,50,11,50,12,50,369,1,51,4,51,
        373,8,51,11,51,12,51,374,1,51,1,51,4,51,379,8,51,11,51,12,51,380,
        1,52,1,52,5,52,385,8,52,10,52,12,52,388,9,52,1,52,1,52,1,52,5,52,
        393,8,52,10,52,12,52,396,9,52,1,52,3,52,399,8,52,1,53,1,53,1,53,
        1,53,1,54,1,54,5,54,407,8,54,10,54,12,54,410,9,54,2,125,139,0,55,
        7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,
        13,33,14,35,15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,
        24,55,25,57,26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,
        35,77,36,79,37,81,38,83,39,85,40,87,41,89,42,91,43,93,44,95,45,97,
        46,99,47,101,48,103,49,105,50,107,51,109,52,111,53,113,54,115,55,
        7,0,1,2,3,4,5,6,9,1,0,60,60,5,0,45,45,48,58,65,90,95,95,97,122,3,
        0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,5,0,45,45,48,57,65,90,95,95,97,122,1,0,48,57,1,0,34,34,1,
        0,39,39,419,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,2,23,1,0,0,0,2,
        25,1,0,0,0,2,27,1,0,0,0,2,29,1,0,0,0,2,31,1,0,0,0,3,33,1,0,0,0,3,
        35,1,0,0,0,3,37,1,0,0,0,3,39,1,0,0,0,3,41,1,0,0,0,3,43,1,0,0,0,3,
        45,1,0,0,0,3,47,1,0,0,0,3,49,1,0,0,0,3,51,1,0,0,0,3,53,1,0,0,0,3,
        55,1,0,0,0,3,57,1,0,0,0,4,59,1,0,0,0,4,61,1,0,0,0,5,63,1,0,0,0,5,
        65,1,0,0,0,6,67,1,0,0,0,6,69,1,0,0,0,6,71,1,0,0,0,6,73,1,0,0,0,6,
        75,1,0,0,0,6,77,1,0,0,0,6,79,1,0,0,0,6,81,1,0,0,0,6,83,1,0,0,0,6,
        85,1,0,0,0,6,87,1,0,0,0,6,89,1,0,0,0,6,91,1,0,0,0,6,93,1,0,0,0,6,
        95,1,0,0,0,6,97,1,0,0,0,6,99,1,0,0,0,6,101,1,0,0,0,6,103,1,0,0,0,
        6,105,1,0,0,0,6,107,1,0,0,0,6,109,1,0,0,0,6,111,1,0,0,0,6,113,1,
        0,0,0,6,115,1,0,0,0,7,117,1,0,0,0,9,132,1,0,0,0,11,147,1,0,0,0,13,
        151,1,0,0,0,15,156,1,0,0,0,17,162,1,0,0,0,19,167,1,0,0,0,21,172,
        1,0,0,0,23,179,1,0,0,0,25,183,1,0,0,0,27,188,1,0,0,0,29,193,1,0,
        0,0,31,197,1,0,0,0,33,201,1,0,0,0,35,206,1,0,0,0,37,213,1,0,0,0,
        39,218,1,0,0,0,41,228,1,0,0,0,43,233,1,0,0,0,45,237,1,0,0,0,47,241,
        1,0,0,0,49,251,1,0,0,0,51,260,1,0,0,0,53,264,1,0,0,0,55,269,1,0,
        0,0,57,276,1,0,0,0,59,280,1,0,0,0,61,289,1,0,0,0,63,294,1,0,0,0,
        65,300,1,0,0,0,67,304,1,0,0,0,69,306,1,0,0,0,71,308,1,0,0,0,73,310,
        1,0,0,0,75,312,1,0,0,0,77,314,1,0,0,0,79,316,1,0,0,0,81,320,1,0,
        0,0,83,322,1,0,0,0,85,325,1,0,0,0,87,328,1,0,0,0,89,331,1,0,0,0,
        91,334,1,0,0,0,93,337,1,0,0,0,95,340,1,0,0,0,97,344,1,0,0,0,99,348,
        1,0,0,0,101,351,1,0,0,0,103,355,1,0,0,0,105,360,1,0,0,0,107,367,
        1,0,0,0,109,372,1,0,0,0,111,398,1,0,0,0,113,400,1,0,0,0,115,404,
        1,0,0,0,117,118,5,60,0,0,118,119,5,33,0,0,119,120,5,45,0,0,120,121,
        5,45,0,0,121,125,1,0,0,0,122,124,9,0,0,0,123,122,1,0,0,0,124,127,
        1,0,0,0,125,126,1,0,0,0,125,123,1,0,0,0,126,128,1,0,0,0,127,125,
        1,0,0,0,128,129,5,45,0,0,129,130,5,45,0,0,130,131,5,62,0,0,131,8,
        1,0,0,0,132,133,5,60,0,0,133,134,5,33,0,0,134,135,5,62,0,0,135,139,
        1,0,0,0,136,138,9,0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,140,
        1,0,0,0,139,137,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,
        5,60,0,0,143,144,5,33,0,0,144,145,5,47,0,0,145,146,5,62,0,0,146,
        10,1,0,0,0,147,148,5,60,0,0,148,149,5,47,0,0,149,150,5,62,0,0,150,
        12,1,0,0,0,151,152,5,60,0,0,152,153,5,33,0,0,153,154,1,0,0,0,154,
        155,6,3,0,0,155,14,1,0,0,0,156,157,5,60,0,0,157,158,5,36,0,0,158,
        159,1,0,0,0,159,160,6,4,1,0,160,161,6,4,1,0,161,16,1,0,0,0,162,163,
        5,60,0,0,163,164,1,0,0,0,164,165,6,5,2,0,165,18,1,0,0,0,166,168,
        8,0,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,
        1,0,0,0,170,20,1,0,0,0,171,173,7,1,0,0,172,171,1,0,0,0,173,174,1,
        0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,177,6,
        7,3,0,177,178,6,7,4,0,178,22,1,0,0,0,179,180,5,62,0,0,180,181,1,
        0,0,0,181,182,6,8,3,0,182,24,1,0,0,0,183,184,5,47,0,0,184,185,5,
        62,0,0,185,186,1,0,0,0,186,187,6,9,3,0,187,26,1,0,0,0,188,189,5,
        61,0,0,189,190,1,0,0,0,190,191,6,10,1,0,191,28,1,0,0,0,192,194,7,
        1,0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,
        0,0,0,196,30,1,0,0,0,197,198,7,2,0,0,198,199,1,0,0,0,199,200,6,12,
        5,0,200,32,1,0,0,0,201,202,5,105,0,0,202,203,5,102,0,0,203,204,1,
        0,0,0,204,205,6,13,1,0,205,34,1,0,0,0,206,207,5,101,0,0,207,208,
        5,108,0,0,208,209,5,105,0,0,209,210,5,102,0,0,210,211,1,0,0,0,211,
        212,6,14,1,0,212,36,1,0,0,0,213,214,5,101,0,0,214,215,5,108,0,0,
        215,216,5,115,0,0,216,217,5,101,0,0,217,38,1,0,0,0,218,219,5,102,
        0,0,219,220,5,111,0,0,220,221,5,114,0,0,221,222,5,101,0,0,222,223,
        5,97,0,0,223,224,5,99,0,0,224,225,5,104,0,0,225,226,1,0,0,0,226,
        227,6,16,6,0,227,40,1,0,0,0,228,229,5,105,0,0,229,230,5,110,0,0,
        230,231,1,0,0,0,231,232,6,17,1,0,232,42,1,0,0,0,233,234,5,108,0,
        0,234,235,5,101,0,0,235,236,5,116,0,0,236,44,1,0,0,0,237,238,5,61,
        0,0,238,239,1,0,0,0,239,240,6,19,1,0,240,46,1,0,0,0,241,242,5,105,
        0,0,242,243,5,110,0,0,243,244,5,99,0,0,244,245,5,108,0,0,245,246,
        5,117,0,0,246,247,5,100,0,0,247,248,5,101,0,0,248,249,1,0,0,0,249,
        250,6,20,1,0,250,48,1,0,0,0,251,252,5,105,0,0,252,253,5,110,0,0,
        253,254,5,115,0,0,254,255,5,101,0,0,255,256,5,114,0,0,256,257,5,
        116,0,0,257,258,1,0,0,0,258,259,6,21,7,0,259,50,1,0,0,0,260,261,
        5,62,0,0,261,262,1,0,0,0,262,263,6,22,3,0,263,52,1,0,0,0,264,265,
        5,47,0,0,265,266,5,62,0,0,266,267,1,0,0,0,267,268,6,23,3,0,268,54,
        1,0,0,0,269,273,7,3,0,0,270,272,7,4,0,0,271,270,1,0,0,0,272,275,
        1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,56,1,0,0,0,275,273,1,
        0,0,0,276,277,7,2,0,0,277,278,1,0,0,0,278,279,6,25,5,0,279,58,1,
        0,0,0,280,284,7,3,0,0,281,283,7,4,0,0,282,281,1,0,0,0,283,286,1,
        0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,0,286,284,1,
        0,0,0,287,288,6,26,3,0,288,60,1,0,0,0,289,290,7,2,0,0,290,291,1,
        0,0,0,291,292,6,27,5,0,292,62,1,0,0,0,293,295,7,5,0,0,294,293,1,
        0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,298,1,
        0,0,0,298,299,6,28,3,0,299,64,1,0,0,0,300,301,7,2,0,0,301,302,1,
        0,0,0,302,303,6,29,5,0,303,66,1,0,0,0,304,305,5,40,0,0,305,68,1,
        0,0,0,306,307,5,41,0,0,307,70,1,0,0,0,308,309,5,43,0,0,309,72,1,
        0,0,0,310,311,5,45,0,0,311,74,1,0,0,0,312,313,5,42,0,0,313,76,1,
        0,0,0,314,315,5,47,0,0,315,78,1,0,0,0,316,317,5,109,0,0,317,318,
        5,111,0,0,318,319,5,100,0,0,319,80,1,0,0,0,320,321,5,46,0,0,321,
        82,1,0,0,0,322,323,5,61,0,0,323,324,5,61,0,0,324,84,1,0,0,0,325,
        326,5,33,0,0,326,327,5,61,0,0,327,86,1,0,0,0,328,329,5,60,0,0,329,
        330,5,60,0,0,330,88,1,0,0,0,331,332,5,62,0,0,332,333,5,62,0,0,333,
        90,1,0,0,0,334,335,5,60,0,0,335,336,5,61,0,0,336,92,1,0,0,0,337,
        338,5,62,0,0,338,339,5,61,0,0,339,94,1,0,0,0,340,341,5,110,0,0,341,
        342,5,111,0,0,342,343,5,116,0,0,343,96,1,0,0,0,344,345,5,97,0,0,
        345,346,5,110,0,0,346,347,5,100,0,0,347,98,1,0,0,0,348,349,5,111,
        0,0,349,350,5,114,0,0,350,100,1,0,0,0,351,352,5,59,0,0,352,353,1,
        0,0,0,353,354,6,47,3,0,354,102,1,0,0,0,355,356,5,62,0,0,356,357,
        1,0,0,0,357,358,6,48,3,0,358,359,6,48,3,0,359,104,1,0,0,0,360,361,
        5,47,0,0,361,362,5,62,0,0,362,363,1,0,0,0,363,364,6,49,3,0,364,365,
        6,49,3,0,365,106,1,0,0,0,366,368,7,6,0,0,367,366,1,0,0,0,368,369,
        1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,108,1,0,0,0,371,373,
        7,6,0,0,372,371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,375,
        1,0,0,0,375,376,1,0,0,0,376,378,5,46,0,0,377,379,7,6,0,0,378,377,
        1,0,0,0,379,380,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,110,
        1,0,0,0,382,386,5,34,0,0,383,385,8,7,0,0,384,383,1,0,0,0,385,388,
        1,0,0,0,386,384,1,0,0,0,386,387,1,0,0,0,387,389,1,0,0,0,388,386,
        1,0,0,0,389,399,5,34,0,0,390,394,5,39,0,0,391,393,8,8,0,0,392,391,
        1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,397,
        1,0,0,0,396,394,1,0,0,0,397,399,5,39,0,0,398,382,1,0,0,0,398,390,
        1,0,0,0,399,112,1,0,0,0,400,401,7,2,0,0,401,402,1,0,0,0,402,403,
        6,53,5,0,403,114,1,0,0,0,404,408,7,3,0,0,405,407,7,4,0,0,406,405,
        1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,116,
        1,0,0,0,410,408,1,0,0,0,22,0,1,2,3,4,5,6,125,139,169,174,195,273,
        284,296,369,374,380,386,394,398,408,8,5,3,0,5,6,0,5,1,0,4,0,0,5,
        2,0,6,0,0,5,4,0,5,5,0
    ]

class DurakLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ON_TAG = 1
    IN_TAG = 2
    IN_DIRECTIVE = 3
    IN_DIRECTIVE_FOREACH_IDENTIFIER = 4
    IN_DIRECTIVE_INSERT_IDENTIFIER = 5
    IN_EXPR = 6

    COMMENT = 1
    VERBATIM = 2
    CLOSING_TAG = 3
    DIRECTIVE_OPEN = 4
    INJECTION_OPEN = 5
    TAG_OPEN = 6
    TEXT = 7
    TAG_NAME = 8
    TAG_END = 9
    TAG_CLOSE = 10
    TAG_EQ = 11
    TAG_ATTRIBUTE_NAME = 12
    TAG_WS = 13
    DIRECTIVE_IF = 14
    DIRECTIVE_ELIF = 15
    DIRECTIVE_ELSE = 16
    DIRECTIVE_FOREACH = 17
    DIRECTIVE_IN = 18
    DIRECTIVE_LET = 19
    DIRECTIVE_EQ = 20
    DIRECTIVE_INCLUDE = 21
    DIRECTIVE_INSERT = 22
    DIRECTIVE_END = 23
    DIRECTIVE_CLOSE = 24
    DIRECTIVE_IDENTIFIER = 25
    DIRECTIVE_WS = 26
    DIRECTIVE_FOREACH_IDENTIFIER = 27
    DIRECTIVE_FOREACH_WS = 28
    DIRECTIVE_INSERT_IDENTIFIER = 29
    DIRECTIVE_INSERT_WS = 30
    EXPR_LPAREN = 31
    EXPR_RPAREN = 32
    EXPR_PLUS = 33
    EXPR_MINUS = 34
    EXPR_STAR = 35
    EXPR_SLASH = 36
    EXPR_MOD = 37
    EXPR_DOT = 38
    EXPR_EQEQ = 39
    EXPR_NEQ = 40
    EXPR_LT = 41
    EXPR_GT = 42
    EXPR_LE = 43
    EXPR_GE = 44
    EXPR_NOT = 45
    EXPR_AND = 46
    EXPR_OR = 47
    EXPR_COLON = 48
    EXPR_TAG_END = 49
    EXPR_TAG_CLOSE = 50
    EXPR_INT_LITERAL = 51
    EXPR_FLOAT_LITERAL = 52
    EXPR_STRING_LITERAL = 53
    EXPR_WS = 54
    EXPR_IDENT = 55

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "ON_TAG", "IN_TAG", "IN_DIRECTIVE", "IN_DIRECTIVE_FOREACH_IDENTIFIER", 
                  "IN_DIRECTIVE_INSERT_IDENTIFIER", "IN_EXPR" ]

    literalNames = [ "<INVALID>",
            "'</>'", "'<!'", "'<'", "'if'", "'elif'", "'else'", "'foreach'", 
            "'in'", "'let'", "'include'", "'insert'", "'('", "')'", "'+'", 
            "'-'", "'*'", "'/'", "'mod'", "'.'", "'=='", "'!='", "'<<'", 
            "'>>'", "'<='", "'>='", "'not'", "'and'", "'or'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "VERBATIM", "CLOSING_TAG", "DIRECTIVE_OPEN", "INJECTION_OPEN", 
            "TAG_OPEN", "TEXT", "TAG_NAME", "TAG_END", "TAG_CLOSE", "TAG_EQ", 
            "TAG_ATTRIBUTE_NAME", "TAG_WS", "DIRECTIVE_IF", "DIRECTIVE_ELIF", 
            "DIRECTIVE_ELSE", "DIRECTIVE_FOREACH", "DIRECTIVE_IN", "DIRECTIVE_LET", 
            "DIRECTIVE_EQ", "DIRECTIVE_INCLUDE", "DIRECTIVE_INSERT", "DIRECTIVE_END", 
            "DIRECTIVE_CLOSE", "DIRECTIVE_IDENTIFIER", "DIRECTIVE_WS", "DIRECTIVE_FOREACH_IDENTIFIER", 
            "DIRECTIVE_FOREACH_WS", "DIRECTIVE_INSERT_IDENTIFIER", "DIRECTIVE_INSERT_WS", 
            "EXPR_LPAREN", "EXPR_RPAREN", "EXPR_PLUS", "EXPR_MINUS", "EXPR_STAR", 
            "EXPR_SLASH", "EXPR_MOD", "EXPR_DOT", "EXPR_EQEQ", "EXPR_NEQ", 
            "EXPR_LT", "EXPR_GT", "EXPR_LE", "EXPR_GE", "EXPR_NOT", "EXPR_AND", 
            "EXPR_OR", "EXPR_COLON", "EXPR_TAG_END", "EXPR_TAG_CLOSE", "EXPR_INT_LITERAL", 
            "EXPR_FLOAT_LITERAL", "EXPR_STRING_LITERAL", "EXPR_WS", "EXPR_IDENT" ]

    ruleNames = [ "COMMENT", "VERBATIM", "CLOSING_TAG", "DIRECTIVE_OPEN", 
                  "INJECTION_OPEN", "TAG_OPEN", "TEXT", "TAG_NAME", "TAG_END", 
                  "TAG_CLOSE", "TAG_EQ", "TAG_ATTRIBUTE_NAME", "TAG_WS", 
                  "DIRECTIVE_IF", "DIRECTIVE_ELIF", "DIRECTIVE_ELSE", "DIRECTIVE_FOREACH", 
                  "DIRECTIVE_IN", "DIRECTIVE_LET", "DIRECTIVE_EQ", "DIRECTIVE_INCLUDE", 
                  "DIRECTIVE_INSERT", "DIRECTIVE_END", "DIRECTIVE_CLOSE", 
                  "DIRECTIVE_IDENTIFIER", "DIRECTIVE_WS", "DIRECTIVE_FOREACH_IDENTIFIER", 
                  "DIRECTIVE_FOREACH_WS", "DIRECTIVE_INSERT_IDENTIFIER", 
                  "DIRECTIVE_INSERT_WS", "EXPR_LPAREN", "EXPR_RPAREN", "EXPR_PLUS", 
                  "EXPR_MINUS", "EXPR_STAR", "EXPR_SLASH", "EXPR_MOD", "EXPR_DOT", 
                  "EXPR_EQEQ", "EXPR_NEQ", "EXPR_LT", "EXPR_GT", "EXPR_LE", 
                  "EXPR_GE", "EXPR_NOT", "EXPR_AND", "EXPR_OR", "EXPR_COLON", 
                  "EXPR_TAG_END", "EXPR_TAG_CLOSE", "EXPR_INT_LITERAL", 
                  "EXPR_FLOAT_LITERAL", "EXPR_STRING_LITERAL", "EXPR_WS", 
                  "EXPR_IDENT" ]

    grammarFileName = "DurakLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


