{"version":3,"file":"js/module_events.cloning.9015f98e.bundle.js","mappings":"0GAmIGA,OA3HMC,iBAAmB,WACxB,MAAMC,EAAiBC,EAAE,+BACnBC,EAAQD,EAAE,qBACVE,EAAcF,EAAE,gBAAgBG,OAChCC,EAAaH,EAAMI,KAAK,eACxBC,EAAeN,EAAE,iBAAiBG,OAClCI,EAAOR,EAAeS,KAAK,QAE3BC,EAAqBV,EAAeS,KAAK,sBAoBzCE,EAAcC,EAAEC,UAAS,SAASC,GACtC,MAAMC,EAAed,EAAE,wBACjBe,EAAiBf,EAAEgB,MAAMf,EAAMgB,kBAAkB,IAGlDJ,GAASE,IAAmBd,EAAMO,KAAK,kBAM5CP,EAAMO,KAAK,cAAeO,GAE1Bd,EAAMiB,WAAW,CACfC,IAAKpB,EAAeS,KAAK,eACzBY,OAAQ,OACRC,QAAQb,GACN,GAAIA,EAAKa,QAAS,CAChB,MAAMC,EAAepB,EAAYG,KAAK,UAChCkB,EAAWrB,EAAYG,KAAK,aAClCiB,EAAaE,KAAKhB,EAAKiB,OACvBnB,EAAaH,OACbD,EAAYwB,OACZtB,EAAWuB,SAASnB,EAAKiB,OACzBX,EAAac,KAAK,YAAapB,EAAKiB,OACpCvB,EAAYM,KAAK,cAAeA,EAAKqB,OACrCN,EAASI,OAAOnB,EAAKsB,kBACtB,MACCxB,EACGoB,OACArB,KAAK,iBACL0B,KAhDY,iBADFC,EAiDOxB,EAAKwB,MAAMC,SA/C5BD,EAEAhC,EAAE,SAASkC,OAChBF,EAAMG,KAAI,SAASC,GACjB,MAAMC,EAAQrC,EAAE,YAAYkC,OAAOE,EAAK,IAClCE,EAAQtC,EAAE,QAAQkC,OACtBE,EAAK,GAAGD,KAAI,SAASF,GACnB,OAAOjC,EAAE,QAAQwB,KAAKS,EACvB,KAEH,OAAOjC,EAAE,SAASkC,OAAOG,EAAOC,EACjC,MAqCCpC,EAAYC,OAlDpB,IAAqB6B,CAoDhB,IAEJ,GAAE,KAEU,IAATzB,IACFN,EAAMsC,GAAG,SAAU,gBAAiB5B,EAAE6B,QAAQ9B,GAAa,IAC3DT,EAAMsC,GAAG,QAAS,SAAS,SAASE,GAClCA,EAAEC,iBACFhC,GAAY,EACb,KAGCR,EAAYyC,QACdhC,EAAEiC,MAAMjC,EAAE6B,QAAQ9B,GAAa,IAGpB,IAATH,IACFN,EAAMI,KAAK,8BAA8BkC,GAAG,SAAU,wBAAwB,WAC5E,MAAMM,EAAQ7C,EAAE8C,MACVC,EAAetC,EAAmBoC,EAAMG,OACxCC,EAASJ,EAAMK,QAAQ,eAEzBL,EAAMjB,KAAK,WACTmB,EAAaI,UACfJ,EAAaI,SAASC,SAAQ,SAASC,GACrCJ,EAAO5C,KAAK,6BAA6BiD,OAAOD,IAAazB,KAAK,WAAW,EAC9E,IAEMmB,EAAaQ,aACtBR,EAAaQ,YAAYH,SAAQ,SAASC,GACxCJ,EAAO5C,KAAK,cAAciD,OAAOD,IAAazB,KAAK,WAAW,EAC/D,GAEJ,IAGD5B,EAAE,2DAA2DwD,QAAQ,UAErExD,EAAE,iEAAiEwD,QAAQ,WAG7EpD,EAAWqD,KAAK,CACdC,MAAO,CACLC,QAAS,0BAEXjC,KAAM,CACJkC,MAAO,SAETC,UACE,MAAMC,EAAM9D,EAAE,QACR+D,EAAS7D,EAAYM,KAAK,eAAe2B,KAAI,SAASC,GAC1D,OAAOpC,EAAE,QAAQwB,KAAKwC,EAAO5B,EAAK6B,MAAMX,OAAO,SAChD,IAKD,OAJAQ,EAAI5B,OAAO6B,EAAOG,MAAM,EAAG,KACvBH,EAAOpB,OAAS,IAClBmB,EAAI5B,OAAO,gBAEN4B,CACR,GAEJ,C","sources":["webpack:///indico/modules/events/client/js/cloning.js"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2022 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\n(function(global) {\n  global.setupCloneDialog = function setupCloneDialog() {\n    const $formContainer = $('#event-clone-form-container');\n    const $form = $('#event-clone-form');\n    const $eventCount = $('#event-count').hide();\n    const $eventList = $form.find('.event-list');\n    const $cloneErrors = $('#clone-errors').hide();\n    const step = $formContainer.data('step');\n\n    const clonerDependencies = $formContainer.data('clonerDependencies');\n\n    function errorToHTML(error) {\n      if (typeof error === 'string') {\n        return error;\n      } else {\n        return $('<div>').append(\n          error.map(function(item) {\n            const label = $('<strong>').append(item[0]);\n            const items = $('<ul>').append(\n              item[1].map(function(message) {\n                return $('<li>').text(message);\n              })\n            );\n            return $('<div>').append(label, items);\n          })\n        );\n      }\n    }\n\n    const updateCount = _.debounce(function(force) {\n      const $cloneButton = $('.clone-action-button');\n      const serializedForm = $.param($form.serializeArray(), true);\n\n      // make sure the form was actually changed\n      if (!force && serializedForm === $form.data('initialData')) {\n        return;\n      }\n\n      // set 'intiialData' by hand here, so that the if we're in a 'keyup'\n      // event, the successive 'change' event will receive the updated version\n      $form.data('initialData', serializedForm);\n\n      $form.ajaxSubmit({\n        url: $formContainer.data('preview-url'),\n        method: 'POST',\n        success(data) {\n          if (data.success) {\n            const $countNumber = $eventCount.find('.count');\n            const $lastDay = $eventCount.find('.last-day');\n            $countNumber.text(data.count);\n            $cloneErrors.hide();\n            $eventCount.show();\n            $eventList.toggle(!!data.count);\n            $cloneButton.prop('disabled', !data.count);\n            $eventCount.data('event-dates', data.dates);\n            $lastDay.toggle(data.last_day_of_month);\n          } else {\n            $cloneErrors\n              .show()\n              .find('.message-text')\n              .html(errorToHTML(data.error.message));\n            $eventCount.hide();\n          }\n        },\n      });\n    }, 300);\n\n    if (step === 4) {\n      $form.on('change', 'select, input', _.partial(updateCount, false));\n      $form.on('keyup', 'input', function(e) {\n        e.preventDefault();\n        updateCount(false);\n      });\n    }\n\n    if ($eventCount.length) {\n      _.defer(_.partial(updateCount, true));\n    }\n\n    if (step === 2) {\n      $form.find('#form-group-selected_items').on('change', 'input[type=checkbox]', function() {\n        const $this = $(this);\n        const dependencies = clonerDependencies[$this.val()];\n        const $field = $this.closest('.form-field');\n\n        if ($this.prop('checked')) {\n          if (dependencies.requires) {\n            dependencies.requires.forEach(function(optionName) {\n              $field.find('[value={0}]:not(:disabled)'.format(optionName)).prop('checked', true);\n            });\n          }\n        } else if (dependencies.required_by) {\n          dependencies.required_by.forEach(function(optionName) {\n            $field.find('[value={0}]'.format(optionName)).prop('checked', false);\n          });\n        }\n      });\n\n      // first check requirements of checked items\n      $('#form-group-selected_items input[type=checkbox]:checked').trigger('change');\n      // then ensure that nothing is checked that shouldn't be checked\n      $('#form-group-selected_items input[type=checkbox]:not(:checked)').trigger('change');\n    }\n\n    $eventList.qtip({\n      style: {\n        classes: 'cloned-event-list-qtip',\n      },\n      show: {\n        event: 'click',\n      },\n      content() {\n        const $ul = $('<ul>');\n        const events = $eventCount.data('event-dates').map(function(item) {\n          return $('<li>').text(moment(item.date).format('ddd L'));\n        });\n        $ul.append(events.slice(0, 20));\n        if (events.length > 20) {\n          $ul.append('<li>...</li>');\n        }\n        return $ul;\n      },\n    });\n  };\n})(window);\n"],"names":["window","setupCloneDialog","$formContainer","$","$form","$eventCount","hide","$eventList","find","$cloneErrors","step","data","clonerDependencies","updateCount","_","debounce","force","$cloneButton","serializedForm","param","serializeArray","ajaxSubmit","url","method","success","$countNumber","$lastDay","text","count","show","toggle","prop","dates","last_day_of_month","html","error","message","append","map","item","label","items","on","partial","e","preventDefault","length","defer","$this","this","dependencies","val","$field","closest","requires","forEach","optionName","format","required_by","trigger","qtip","style","classes","event","content","$ul","events","moment","date","slice"],"sourceRoot":""}