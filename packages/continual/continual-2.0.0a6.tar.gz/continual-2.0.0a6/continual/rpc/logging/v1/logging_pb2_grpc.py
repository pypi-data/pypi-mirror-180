# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from continual.rpc.logging.v1 import logging_pb2 as continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class LoggingAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogHeartbeat = channel.unary_unary(
                '/continual.rpc.logging.v1.LoggingAPI/LogHeartbeat',
                request_serializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogHeartbeatRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.LogExperiments = channel.unary_unary(
                '/continual.rpc.logging.v1.LoggingAPI/LogExperiments',
                request_serializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogExperimentsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.LogMetrics = channel.unary_unary(
                '/continual.rpc.logging.v1.LoggingAPI/LogMetrics',
                request_serializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogMetricsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.LogModelVersion = channel.unary_unary(
                '/continual.rpc.logging.v1.LoggingAPI/LogModelVersion',
                request_serializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogModelVersionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.LogBatchPrediction = channel.unary_unary(
                '/continual.rpc.logging.v1.LoggingAPI/LogBatchPrediction',
                request_serializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogBatchPredictionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LoggingAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LogHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogExperiments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogModelVersion(self, request, context):
        """rpc LogDataProfile(LogDataProfileRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        post: "/v1/dataProfiles"
        };
        }

        rpc LogDataChecks(LogDataChecksRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        post: "/v1/dataChecks"
        };
        }

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogBatchPrediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoggingAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.LogHeartbeat,
                    request_deserializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogHeartbeatRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'LogExperiments': grpc.unary_unary_rpc_method_handler(
                    servicer.LogExperiments,
                    request_deserializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogExperimentsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'LogMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.LogMetrics,
                    request_deserializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogMetricsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'LogModelVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.LogModelVersion,
                    request_deserializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogModelVersionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'LogBatchPrediction': grpc.unary_unary_rpc_method_handler(
                    servicer.LogBatchPrediction,
                    request_deserializer=continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogBatchPredictionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'continual.rpc.logging.v1.LoggingAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoggingAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LogHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/continual.rpc.logging.v1.LoggingAPI/LogHeartbeat',
            continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogHeartbeatRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogExperiments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/continual.rpc.logging.v1.LoggingAPI/LogExperiments',
            continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogExperimentsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/continual.rpc.logging.v1.LoggingAPI/LogMetrics',
            continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogMetricsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogModelVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/continual.rpc.logging.v1.LoggingAPI/LogModelVersion',
            continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogModelVersionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogBatchPrediction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/continual.rpc.logging.v1.LoggingAPI/LogBatchPrediction',
            continual_dot_rpc_dot_logging_dot_v1_dot_logging__pb2.LogBatchPredictionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
