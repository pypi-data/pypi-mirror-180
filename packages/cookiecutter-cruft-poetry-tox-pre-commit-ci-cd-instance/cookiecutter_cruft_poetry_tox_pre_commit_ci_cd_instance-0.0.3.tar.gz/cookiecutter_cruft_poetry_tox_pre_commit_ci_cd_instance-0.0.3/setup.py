# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance']

package_data = \
{'': ['*']}

install_requires = \
['importlib-metadata>=5.0.0,<6.0.0',
 'jupyter>=1.0.0,<2.0.0',
 'matplotlib>=3.6.2,<4.0.0',
 'python-dotenv>=0.21.0,<0.22.0',
 'rich>=12.5.1,<13.0.0',
 'sentry-sdk>=1.11.0,<2.0.0',
 'structlog-sentry-logger>=0.18.0,<0.19.0',
 'typeguard>=2.13.3,<3.0.0',
 'typer[all]>=0.4,<0.7']

entry_points = \
{'console_scripts': ['cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance '
                     '= '
                     'cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance.main:app']}

setup_kwargs = {
    'name': 'cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance',
    'version': '0.0.3',
    'description': 'Cookiecutter Cruft Poetry Tox Pre Commit Ci Cd Instance',
    'long_description': "cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance\n==============================\n![CI](https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance/workflows/CI/badge.svg)\n![codecov](https://codecov.io/gh/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance/branch/master/graph/badge.svg?token=3HF21UWY82)\n![License](https://img.shields.io/github/license/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance?style=plastic)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance?style=plastic)\n![PyPI](https://img.shields.io/pypi/v/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance?color=informational&style=plastic)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![powered by semgrep](https://img.shields.io/badge/powered%20by-semgrep-1B2F3D?labelColor=lightgrey&link=https://semgrep.dev/&logo=data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAA0AAAAOCAYAAAD0f5bSAAAABmJLR0QA/gD+AP+cH+QUAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAAB3RJTUUH5AYMEy0l8dkqrQAAAvFJREFUKBUB5gIZ/QEAAP8BAAAAAAMG6AD9+hn/GzA//wD//wAAAAD+AAAAAgABAQDl0MEBAwbmAf36GQAAAAAAAQEC9QH//gv/Gi1GFQEC+OoAAAAAAAAAAAABAQAA//8AAAAAAAAAAAD//ggX5tO66gID9AEBFSRxAgYLzRQAAADpAAAAAP7+/gDl0cMPAAAA+wAAAPkbLz39AgICAAAAAAAAAAAs+vU12AEbLz4bAAAA5P8AAAAA//4A5NDDEwEBAO///wABAQEAAP//ABwcMD7hAQEBAAAAAAAAAAAaAgAAAOAAAAAAAQEBAOXRwxUAAADw//8AAgAAAAD//wAAAAAA5OXRwhcAAQEAAAAAAAAAAOICAAAABP3+/gDjzsAT//8A7gAAAAEAAAD+AAAA/wAAAAAAAAAA//8A7ePOwA/+/v4AAAAABAIAAAAAAAAAAAAAAO8AAAABAAAAAAAAAAIAAAABAAAAAAAAAAgAAAD/AAAA8wAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAA8AAAAEAAAA/gAAAP8AAAADAAAA/gAAAP8AAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA7wAAAPsAAAARAAAABAAAAP4AAAAAAAAAAgAAABYAAAAAAAAAAAIAAAD8AwICAB0yQP78/v4GAAAA/wAAAPAAAAD9AAAA/wAAAPr9//8aHTJA6AICAgAAAAD8AgAAADIAAAAAAP//AB4wPvgAAAARAQEA/gEBAP4BAQABAAAAGB0vPeIA//8AAAAAAAAAABAC+vUz1QAAAA8AAAAAAwMDABwwPu3//wAe//8AAv//ABAcMD7lAwMDAAAAAAAAAAAG+vU0+QEBAvUB//4L/xotRhUBAvjqAAAAAAAAAAAAAQEAAP//AAAAAAAAAAAA//4IF+bTuuoCA/QBAQAA/wEAAAAAAwboAP36Gf8bMD//AP//AAAAAP4AAAACAAEBAOXQwQEDBuYB/foZAAAAAAD4I6qbK3+1zQAAAABJRU5ErkJggg==)](https://semgrep.dev/)\n\n\n---\n\n**Documentation**: [https://github.readthedocs.io](https://github.readthedocs.io)\n\n**Source Code**: [https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance](https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance)\n\n---\n\n:teacher: Overview\n------------------\n\n- TODO\n\n:sparkles: Features\n-------------------\n\n- TODO\n\n:information_source: Requirements\n---------------------------------\n\n- TODO\n\n------------\n\nTable of Contents\n\n<!-- toc -->\n\n- [:tada: Installation](#tada-installation)\n- [:rocket: Usage](#rocket-usage)\n  * [:children_crossing: Running The Project](#children_crossing-running-the-project)\n    + [:one: Docker Container Project Environment (recommended)](#one-docker-container-project-environment-recommended)\n    + [:two: Locally via Poetry (development workflow)](#two-locally-via-poetry-development-workflow)\n- [:clipboard: Summary](#clipboard-summary)\n- [:books: Further Reading](#books-further-reading)\n- [:wrench: Development](#wrench-development)\n  * [:building_construction: Package and Dependencies Installation](#building_construction-package-and-dependencies-installation)\n  * [:package: Python Module to C-Extension Compilation](#package-python-module-to-c-extension-compilation)\n  * [:whale: Docker Container Image Building/Deployment Orchestration](#whale-docker-container-image-buildingdeployment-orchestration)\n  * [:white_check_mark: Testing](#white_check_mark-testing)\n  * [:rotating_light: Code Quality](#rotating_light-code-quality)\n    + [:arrows_counterclockwise: Automate via Git Pre-Commit Hooks](#arrows_counterclockwise-automate-via-git-pre-commit-hooks)\n  * [:memo: Documentation](#memo-documentation)\n- [:judge: Legal](#judge-legal)\n  * [:page_facing_up: License](#page_facing_up-license)\n  * [:busts_in_silhouette: Credits](#busts_in_silhouette-credits)\n\n<!-- tocstop -->\n\n:tada: Installation\n===================\n\nYou can install Cookiecutter Cruft Poetry Tox Pre Commit Ci Cd Instance via [pip](https://pip.pypa.io/):\n\n ```shell script\npip install cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance\n```\n\n:rocket: Usage\n==============\n\n- TODO\n    - High-level usage overview\n\n------------\n\n- TODO\n    - Step 0 description\n\n```python\nimport cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance\n\n# TODO\n```\n\n> :fire: **Tip**  \n> All following commands are relative to the project root directory and assume\n> `make` is installed.\n\n\n\n:children_crossing: Running The Project\n----------------------------------------\n\n### :one: Docker Container Project Environment (recommended)\n\nRun:\n\n```shell script\n# Uncomment below to run with corresponding options.\n\n# Note: *any* value other than `false` will trigger an option\n#export IS_INTERACTIVE_SESSION=true\n#export BIND_MOUNT_APPLICATION_DIR_ON_CONTAINER=true\nmake deploy-project-docker-container\n```\n\nwhich will fetch and run the project container image.\n\n> :fire: **Tip**  \n> If you prefer to build and run the container locally, run:\n>  ```shell script\n>  make deploy-project-docker-container-local\n>  ```\n\n### :two: Locally via Poetry (development workflow)\n\nRun:\n\n ```shell script\nmake provision-environment # Note: installs ALL dependencies!\npoetry shell # Activate the project's virtual environment\n\n```\n\n:clipboard: Summary\n===================\n\n- TODO\n\n:books: Further Reading\n=======================\n\n- TODO\n\n---\n\n:wrench: Development\n====================\n\nFor convenience, implementation details of the below processes are abstracted away and\nencapsulated in single [Make](https://www.gnu.org/software/make/) targets.\n\n\n> :fire: **Tip**  \n> Invoking `make` without any arguments will display\n> auto-generated documentation on available commands.\n\n:building_construction: Package and Dependencies Installation\n-------------------------------------------------------------\n\nMake sure you have Python 3.8+ and [`poetry`](https://python-poetry.org/)\ninstalled and configured.\n\nTo install the package and all dev dependencies, run:\n\n```shell script\nmake provision-environment\n```\n\n> :fire: **Tip**  \n> Invoking the above without `poetry` installed will emit a\n> helpful error message letting you know how you can install Poetry.\n\n:package: Python Module to C-Extension Compilation\n--------------------------------------------------\nThe projects's [build.py](./build.py) file specifies which modules to package.\n\nFor manual per-module compilation, see:\n[Mypyc Documentation: Getting started - Compiling and running](https://mypyc.readthedocs.io/en/latest/getting_started.html#compiling-and-running)\n\n:whale: Docker Container Image Building/Deployment Orchestration\n----------------------------------------------------------------\n\nThe following set of `make` targets orchestrate the project's container image build and\ndeploy steps:\n\n```shell\nbuild-container     Build cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance container\ndeploy-project-docker-container Deploy downloaded dockerized project environment with preloaded dependencies\ndeploy-project-docker-container-local Deploy locally-built dockerized project environment with preloaded dependencies\npull-container      Pull cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance container\npush-container      Push cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance container\nstop-container      Stop container forcefully (i.e., when keyboard interrupts are disabled)\n```\n\nNote that the project's container image is insulated from the implementation details of\nthe application's top-level setup and execution logic, which falls under the purview of\nthe project's entrypoint script. As such, Dockerfile modifications will generally only\nbe necessary when updating non-Python environment dependencies (Python dependency\nupdates are automatically reflected in new image builds via the `pyproject.toml`\nand `poetry.lock` files).\n\n:white_check_mark: Testing\n--------------------------\n\nWe use [`tox`](https://tox.readthedocs.io/en/latest/)\nand [`pytest`](https://pytest.readthedocs.io/) for our test automation and testing\nframeworks, respectively.\n\nTo invoke the tests, run:\n\n```shell script\nmake test\n```\n\nRun [mutation tests](https://opensource.com/article/20/7/mutmut-python) to validate test\nsuite robustness (Optional):\n\n```shell script\nmake test-mutations\n```\n\n> :information_source: **Technical Details**  \n> Test time scales with the complexity of the codebase. Results are cached\n> in `.mutmut-cache`, so once you get past the initial [cold start problem](https://en.wikipedia.org/wiki/Cold_start_(recommender_systems)),\n> subsequent mutation test runs will be much faster; new mutations will only\n> be applied to modified code paths.\n\n:rotating_light: Code Quality\n-----------------------------\n\nWe use [`pre-commit`](https://pre-commit.com/) for our static analysis automation and\nmanagement framework.\n\nTo invoke the analyses and auto-formatting over all version-controlled files, run:\n\n```shell script\nmake lint\n```\n\n> :rotating_light: **Danger**  \n> CI will fail if either testing or code quality fail,\n> so it is recommended to automatically run the above locally\n> prior to every commit that is pushed.\n\n### :arrows_counterclockwise: Automate via Git Pre-Commit Hooks\n\nTo automatically run code quality validation on every commit (over to-be-committed\nfiles), run:\n\n```shell script\nmake install-pre-commit-hooks\n```\n\n> :warning:️ Warning  \n> This will prevent commits if any single pre-commit hook fails\n> (unless it is allowed to fail)\n> or a file is modified by an auto-formatting job;\n> in the latter case, you may simply repeat the commit and it should pass.\n\n:memo: Documentation\n--------------------\n\n```shell script\nmake docs-clean docs-html\n```\n\n> :fire: **Tip**  \n> For faster feedback loops, this will attempt to automatically open the newly\n> built documentation static HTML in your browser.\n\n:judge: Legal\n=============\n\n:page_facing_up: License\n------------------------\n\ncookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance is licensed under the Apache License, Version 2.0.\nSee [LICENSE](./LICENSE) for the full license text.\n\n\n:busts_in_silhouette: Credits\n-----------------------------\n\nThis project was generated from\n[`@TeoZosa`'s](https://github.com/TeoZosa)\n[`cookiecutter-cruft-poetry-tox-pre-commit-ci-cd`](https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd)\ntemplate.\n",
    'author': 'YOUR_FIRST_AND_LAST_NAME',
    'author_email': 'action@github.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<3.12',
}
from build import *
build(setup_kwargs)

setup(**setup_kwargs)
