"""
    FreeClimb API

    FreeClimb is a cloud-based application programming interface (API) that puts the power of the Vail platform in your hands. FreeClimb simplifies the process of creating applications that can use a full range of telephony features without requiring specialized or on-site telephony equipment. Using the FreeClimb REST API to write applications is easy! You have the option to use the language of your choice or hit the API directly. Your application can execute a command by issuing a RESTful request to the FreeClimb API. The base URL to send HTTP requests to the FreeClimb REST API is: /apiserver. FreeClimb authenticates and processes your request.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@freeclimb.com
    Generated by: https://openapi-generator.tech
"""


import unittest
from test.helpers import TestHelpers, MockPoolManager

import freeclimb
from freeclimb.api.default_api import DefaultApi  # noqa: E501

from freeclimb.model.account_request import AccountRequest
from freeclimb.model.account_result import AccountResult
from freeclimb.model.application_list import ApplicationList
from freeclimb.model.application_request import ApplicationRequest
from freeclimb.model.application_result import ApplicationResult
from freeclimb.model.available_number_list import AvailableNumberList
from freeclimb.model.buy_incoming_number_request import BuyIncomingNumberRequest
from freeclimb.model.call_list import CallList
from freeclimb.model.call_result import CallResult
from freeclimb.model.conference_list import ConferenceList
from freeclimb.model.conference_participant_list import ConferenceParticipantList
from freeclimb.model.conference_participant_result import ConferenceParticipantResult
from freeclimb.model.conference_result import ConferenceResult
from freeclimb.model.create_conference_request import CreateConferenceRequest
from freeclimb.model.filter_logs_request import FilterLogsRequest
from freeclimb.model.incoming_number_list import IncomingNumberList
from freeclimb.model.incoming_number_request import IncomingNumberRequest
from freeclimb.model.incoming_number_result import IncomingNumberResult
from freeclimb.model.log_list import LogList
from freeclimb.model.make_call_request import MakeCallRequest
from freeclimb.model.message_request import MessageRequest
from freeclimb.model.message_result import MessageResult
from freeclimb.model.messages_list import MessagesList
from freeclimb.model.queue_list import QueueList
from freeclimb.model.queue_member import QueueMember
from freeclimb.model.queue_member_list import QueueMemberList
from freeclimb.model.queue_request import QueueRequest
from freeclimb.model.queue_result import QueueResult
from freeclimb.model.recording_list import RecordingList
from freeclimb.model.recording_result import RecordingResult
from freeclimb.model.update_call_request import UpdateCallRequest
from freeclimb.model.update_conference_participant_request import UpdateConferenceParticipantRequest
from freeclimb.model.update_conference_request import UpdateConferenceRequest

import json

class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        configuration = freeclimb.Configuration(
            username = 'TEST_ACCOUNT_ID',
            password = 'TEST_API_KEY'
        )

        self.api = DefaultApi(freeclimb.ApiClient(configuration))  # noqa: E501
        self.auth_header = configuration.get_basic_auth_token()
        self.base_url = self.api.api_client.configuration.host
        self.mock_pool = MockPoolManager(self)
        self.api.api_client.rest_client.pool_manager = self.mock_pool

    def tearDown(self):
        pass

    def test_buy_a_phone_number(self):
        """Test case for buy_a_phone_number

        Buy a Phone Number  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        buy_incoming_number_request = TestHelpers.build_body_param('buy_incoming_number_request', BuyIncomingNumberRequest)
        body = TestHelpers.serialize_body_param(buy_incoming_number_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/IncomingPhoneNumbers', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.buy_a_phone_number(buy_incoming_number_request=buy_incoming_number_request)

    def test_create_a_conference(self):
        """Test case for create_a_conference

        Create a Conference  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        create_conference_request = TestHelpers.build_body_param('create_conference_request', CreateConferenceRequest)
        body = TestHelpers.serialize_body_param(create_conference_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.create_a_conference(create_conference_request=create_conference_request)

    def test_create_a_queue(self):
        """Test case for create_a_queue

        Create a Queue  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_request = TestHelpers.build_body_param('queue_request', QueueRequest)
        body = TestHelpers.serialize_body_param(queue_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.create_a_queue(queue_request=queue_request)

    def test_create_an_application(self):
        """Test case for create_an_application

        Create an application  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        application_request = TestHelpers.build_body_param('application_request', ApplicationRequest)
        body = TestHelpers.serialize_body_param(application_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Applications', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.create_an_application(application_request=application_request)

    def test_delete_a_recording(self):
        """Test case for delete_a_recording

        Delete a Recording  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        recording_id = TestHelpers.build_path_param('recording_id')
        path_params['recordingId'] = recording_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Recordings/{recordingId}', path_params)
        
        self.mock_pool.expect_request(
            'DELETE',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.delete_a_recording(recording_id=recording_id)

    def test_delete_an_application(self):
        """Test case for delete_an_application

        Delete an application  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        application_id = TestHelpers.build_path_param('application_id')
        path_params['applicationId'] = application_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Applications/{applicationId}', path_params)
        
        self.mock_pool.expect_request(
            'DELETE',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.delete_an_application(application_id=application_id)

    def test_delete_an_incoming_number(self):
        """Test case for delete_an_incoming_number

        Delete an Incoming Number  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        phone_number_id = TestHelpers.build_path_param('phone_number_id')
        path_params['phoneNumberId'] = phone_number_id
        url = TestHelpers.build_url('/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}', path_params)
        
        self.mock_pool.expect_request(
            'DELETE',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.delete_an_incoming_number(phone_number_id=phone_number_id)

    def test_dequeue_a_member(self):
        """Test case for dequeue_a_member

        Dequeue a Member  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}/Members/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.dequeue_a_member(queue_id=queue_id,call_id=call_id)

    def test_dequeue_head_member(self):
        """Test case for dequeue_head_member

        Dequeue Head Member  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}/Members/Front', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.dequeue_head_member(queue_id=queue_id)

    def test_download_a_recording_file(self):
        """Test case for download_a_recording_file

        Download a Recording File  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        recording_id = TestHelpers.build_path_param('recording_id')
        path_params['recordingId'] = recording_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Recordings/{recordingId}/Download', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'audio/x-wav',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.download_a_recording_file(recording_id=recording_id)

    def test_filter_logs(self):
        """Test case for filter_logs

        Filter Logs  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        filter_logs_request = TestHelpers.build_body_param('filter_logs_request', FilterLogsRequest)
        body = TestHelpers.serialize_body_param(filter_logs_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Logs', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.filter_logs(filter_logs_request=filter_logs_request)

    def test_get_a_call(self):
        """Test case for get_a_call

        Get a Call  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Calls/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_a_call(call_id=call_id)

    def test_get_a_conference(self):
        """Test case for get_a_conference

        Get a Conference  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        conference_id = TestHelpers.build_path_param('conference_id')
        path_params['conferenceId'] = conference_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences/{conferenceId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_a_conference(conference_id=conference_id)

    def test_get_a_member(self):
        """Test case for get_a_member

        Get a Member  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}/Members/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_a_member(queue_id=queue_id,call_id=call_id)

    def test_get_a_participant(self):
        """Test case for get_a_participant

        Get a Participant  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        conference_id = TestHelpers.build_path_param('conference_id')
        path_params['conferenceId'] = conference_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_a_participant(conference_id=conference_id,call_id=call_id)

    def test_get_a_queue(self):
        """Test case for get_a_queue

        Get a Queue  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_a_queue(queue_id=queue_id)

    def test_get_a_recording(self):
        """Test case for get_a_recording

        Get a Recording  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        recording_id = TestHelpers.build_path_param('recording_id')
        path_params['recordingId'] = recording_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Recordings/{recordingId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_a_recording(recording_id=recording_id)

    def test_get_an_account(self):
        """Test case for get_an_account

        Get an Account  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        url = TestHelpers.build_url('/Accounts/{accountId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_an_account()

    def test_get_an_application(self):
        """Test case for get_an_application

        Get an Application  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        application_id = TestHelpers.build_path_param('application_id')
        path_params['applicationId'] = application_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Applications/{applicationId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_an_application(application_id=application_id)

    def test_get_an_incoming_number(self):
        """Test case for get_an_incoming_number

        Get an Incoming Number  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        phone_number_id = TestHelpers.build_path_param('phone_number_id')
        path_params['phoneNumberId'] = phone_number_id
        url = TestHelpers.build_url('/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_an_incoming_number(phone_number_id=phone_number_id)

    def test_get_an_sms_message(self):
        """Test case for get_an_sms_message

        Get an SMS Message  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        message_id = TestHelpers.build_path_param('message_id')
        path_params['messageId'] = message_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Messages/{messageId}', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_an_sms_message(message_id=message_id)

    def test_get_head_member(self):
        """Test case for get_head_member

        Get Head Member  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}/Members/Front', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.get_head_member(queue_id=queue_id)

    def test_list_active_queues(self):
        """Test case for list_active_queues

        List Active Queues  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        alias = TestHelpers.build_query_param('alias')
        query_params['alias'] = alias
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_active_queues(alias=alias)

    def test_list_all_account_logs(self):
        """Test case for list_all_account_logs

        List All Account Logs  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Logs', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_all_account_logs()

    def test_list_applications(self):
        """Test case for list_applications

        List applications  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        alias = TestHelpers.build_query_param('alias')
        query_params['alias'] = alias
        url = TestHelpers.build_url('/Accounts/{accountId}/Applications', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_applications(alias=alias)

    def test_list_available_numbers(self):
        """Test case for list_available_numbers

        List available numbers  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        phone_number = TestHelpers.build_query_param('phone_number')
        query_params['phoneNumber'] = phone_number
        region = TestHelpers.build_query_param('region')
        query_params['region'] = region
        country = TestHelpers.build_query_param('country')
        query_params['country'] = country
        voice_enabled = TestHelpers.build_query_param('voice_enabled')
        query_params['voiceEnabled'] = voice_enabled
        sms_enabled = TestHelpers.build_query_param('sms_enabled')
        query_params['smsEnabled'] = sms_enabled
        capabilities_voice = TestHelpers.build_query_param('capabilities_voice')
        query_params['capabilitiesVoice'] = capabilities_voice
        capabilities_sms = TestHelpers.build_query_param('capabilities_sms')
        query_params['capabilitiesSms'] = capabilities_sms
        capabilities_toll_free = TestHelpers.build_query_param('capabilities_toll_free')
        query_params['capabilitiesTollFree'] = capabilities_toll_free
        capabilities_ten_dlc = TestHelpers.build_query_param('capabilities_ten_dlc')
        query_params['capabilitiesTenDlc'] = capabilities_ten_dlc
        capabilities_short_code = TestHelpers.build_query_param('capabilities_short_code')
        query_params['capabilitiesShortCode'] = capabilities_short_code
        url = TestHelpers.build_url('/AvailablePhoneNumbers', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_available_numbers(phone_number=phone_number,region=region,country=country,voice_enabled=voice_enabled,sms_enabled=sms_enabled,capabilities_voice=capabilities_voice,capabilities_sms=capabilities_sms,capabilities_toll_free=capabilities_toll_free,capabilities_ten_dlc=capabilities_ten_dlc,capabilities_short_code=capabilities_short_code)

    def test_list_call_logs(self):
        """Test case for list_call_logs

        List Call Logs  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Calls/{callId}/Logs', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_call_logs(call_id=call_id)

    def test_list_call_recordings(self):
        """Test case for list_call_recordings

        List Call Recordings  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        date_created = TestHelpers.build_query_param('date_created')
        query_params['dateCreated'] = date_created
        url = TestHelpers.build_url('/Accounts/{accountId}/Calls/{callId}/Recordings', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_call_recordings(call_id=call_id,date_created=date_created)

    def test_list_calls(self):
        """Test case for list_calls

        List Calls  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        active = TestHelpers.build_query_param('active')
        query_params['active'] = active
        to = TestHelpers.build_query_param('to')
        query_params['to'] = to
        _from = TestHelpers.build_query_param('_from')
        query_params['_from'] = _from
        status = TestHelpers.build_query_param('status')
        query_params['status'] = status
        start_time = TestHelpers.build_query_param('start_time')
        query_params['startTime'] = start_time
        end_time = TestHelpers.build_query_param('end_time')
        query_params['endTime'] = end_time
        parent_call_id = TestHelpers.build_query_param('parent_call_id')
        query_params['parentCallId'] = parent_call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Calls', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_calls(active=active,to=to,_from=_from,status=status,start_time=start_time,end_time=end_time,parent_call_id=parent_call_id)

    def test_list_conferences(self):
        """Test case for list_conferences

        List Conferences  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        status = TestHelpers.build_query_param('status')
        query_params['status'] = status
        alias = TestHelpers.build_query_param('alias')
        query_params['alias'] = alias
        date_created = TestHelpers.build_query_param('date_created')
        query_params['dateCreated'] = date_created
        date_updated = TestHelpers.build_query_param('date_updated')
        query_params['dateUpdated'] = date_updated
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_conferences(status=status,alias=alias,date_created=date_created,date_updated=date_updated)

    def test_list_incoming_numbers(self):
        """Test case for list_incoming_numbers

        List Incoming Numbers  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        phone_number = TestHelpers.build_query_param('phone_number')
        query_params['phoneNumber'] = phone_number
        alias = TestHelpers.build_query_param('alias')
        query_params['alias'] = alias
        region = TestHelpers.build_query_param('region')
        query_params['region'] = region
        country = TestHelpers.build_query_param('country')
        query_params['country'] = country
        application_id = TestHelpers.build_query_param('application_id')
        query_params['applicationId'] = application_id
        has_application = TestHelpers.build_query_param('has_application')
        query_params['hasApplication'] = has_application
        voice_enabled = TestHelpers.build_query_param('voice_enabled')
        query_params['voiceEnabled'] = voice_enabled
        sms_enabled = TestHelpers.build_query_param('sms_enabled')
        query_params['smsEnabled'] = sms_enabled
        capabilities_voice = TestHelpers.build_query_param('capabilities_voice')
        query_params['capabilitiesVoice'] = capabilities_voice
        capabilities_sms = TestHelpers.build_query_param('capabilities_sms')
        query_params['capabilitiesSms'] = capabilities_sms
        capabilities_toll_free = TestHelpers.build_query_param('capabilities_toll_free')
        query_params['capabilitiesTollFree'] = capabilities_toll_free
        capabilities_ten_dlc = TestHelpers.build_query_param('capabilities_ten_dlc')
        query_params['capabilitiesTenDlc'] = capabilities_ten_dlc
        capabilities_short_code = TestHelpers.build_query_param('capabilities_short_code')
        query_params['capabilitiesShortCode'] = capabilities_short_code
        offnet = TestHelpers.build_query_param('offnet')
        query_params['offnet'] = offnet
        url = TestHelpers.build_url('/Accounts/{accountId}/IncomingPhoneNumbers', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_incoming_numbers(phone_number=phone_number,alias=alias,region=region,country=country,application_id=application_id,has_application=has_application,voice_enabled=voice_enabled,sms_enabled=sms_enabled,capabilities_voice=capabilities_voice,capabilities_sms=capabilities_sms,capabilities_toll_free=capabilities_toll_free,capabilities_ten_dlc=capabilities_ten_dlc,capabilities_short_code=capabilities_short_code,offnet=offnet)

    def test_list_members(self):
        """Test case for list_members

        List Members  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}/Members', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_members(queue_id=queue_id)

    def test_list_participants(self):
        """Test case for list_participants

        List Participants  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        conference_id = TestHelpers.build_path_param('conference_id')
        path_params['conferenceId'] = conference_id
        talk = TestHelpers.build_query_param('talk')
        query_params['talk'] = talk
        listen = TestHelpers.build_query_param('listen')
        query_params['listen'] = listen
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences/{conferenceId}/Participants', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_participants(conference_id=conference_id,talk=talk,listen=listen)

    def test_list_recordings(self):
        """Test case for list_recordings

        List Recordings  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        call_id = TestHelpers.build_query_param('call_id')
        query_params['callId'] = call_id
        conference_id = TestHelpers.build_query_param('conference_id')
        query_params['conferenceId'] = conference_id
        date_created = TestHelpers.build_query_param('date_created')
        query_params['dateCreated'] = date_created
        url = TestHelpers.build_url('/Accounts/{accountId}/Recordings', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_recordings(call_id=call_id,conference_id=conference_id,date_created=date_created)

    def test_list_sms_messages(self):
        """Test case for list_sms_messages

        List SMS Messages  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        to = TestHelpers.build_query_param('to')
        query_params['to'] = to
        _from = TestHelpers.build_query_param('_from')
        query_params['_from'] = _from
        begin_time = TestHelpers.build_query_param('begin_time')
        query_params['beginTime'] = begin_time
        end_time = TestHelpers.build_query_param('end_time')
        query_params['endTime'] = end_time
        direction = TestHelpers.build_query_param('direction')
        query_params['direction'] = direction
        url = TestHelpers.build_url('/Accounts/{accountId}/Messages', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.list_sms_messages(to=to,_from=_from,begin_time=begin_time,end_time=end_time,direction=direction)

    def test_make_a_call(self):
        """Test case for make_a_call

        Make a Call  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        make_call_request = TestHelpers.build_body_param('make_call_request', MakeCallRequest)
        body = TestHelpers.serialize_body_param(make_call_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Calls', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.make_a_call(make_call_request=make_call_request)

    def test_remove_a_participant(self):
        """Test case for remove_a_participant

        Remove a Participant  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        conference_id = TestHelpers.build_path_param('conference_id')
        path_params['conferenceId'] = conference_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'DELETE',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.remove_a_participant(conference_id=conference_id,call_id=call_id)

    def test_send_an_sms_message(self):
        """Test case for send_an_sms_message

        Send an SMS Message  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        message_request = TestHelpers.build_body_param('message_request', MessageRequest)
        body = TestHelpers.serialize_body_param(message_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Messages', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.send_an_sms_message(message_request=message_request)

    def test_stream_a_recording_file(self):
        """Test case for stream_a_recording_file

        Stream a Recording File  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        recording_id = TestHelpers.build_path_param('recording_id')
        path_params['recordingId'] = recording_id
        url = TestHelpers.build_url('/Accounts/{accountId}/Recordings/{recordingId}/Stream', path_params)
        
        self.mock_pool.expect_request(
            'GET',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'audio/x-wav',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.stream_a_recording_file(recording_id=recording_id)

    def test_update_a_conference(self):
        """Test case for update_a_conference

        Update a Conference  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        conference_id = TestHelpers.build_path_param('conference_id')
        path_params['conferenceId'] = conference_id
        update_conference_request = TestHelpers.build_body_param('update_conference_request', UpdateConferenceRequest)
        body = TestHelpers.serialize_body_param(update_conference_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences/{conferenceId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_a_conference(conference_id=conference_id,update_conference_request=update_conference_request)

    def test_update_a_live_call(self):
        """Test case for update_a_live_call

        Update a Live Call  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        update_call_request = TestHelpers.build_body_param('update_call_request', UpdateCallRequest)
        body = TestHelpers.serialize_body_param(update_call_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Calls/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_a_live_call(call_id=call_id,update_call_request=update_call_request)

    def test_update_a_participant(self):
        """Test case for update_a_participant

        Update a Participant  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        conference_id = TestHelpers.build_path_param('conference_id')
        path_params['conferenceId'] = conference_id
        call_id = TestHelpers.build_path_param('call_id')
        path_params['callId'] = call_id
        update_conference_participant_request = TestHelpers.build_body_param('update_conference_participant_request', UpdateConferenceParticipantRequest)
        body = TestHelpers.serialize_body_param(update_conference_participant_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Conferences/{conferenceId}/Participants/{callId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_a_participant(conference_id=conference_id,call_id=call_id,update_conference_participant_request=update_conference_participant_request)

    def test_update_a_queue(self):
        """Test case for update_a_queue

        Update a Queue  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        queue_id = TestHelpers.build_path_param('queue_id')
        path_params['queueId'] = queue_id
        queue_request = TestHelpers.build_body_param('queue_request', QueueRequest)
        body = TestHelpers.serialize_body_param(queue_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Queues/{queueId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_a_queue(queue_id=queue_id,queue_request=queue_request)

    def test_update_an_account(self):
        """Test case for update_an_account

        Manage an account  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        account_request = TestHelpers.build_body_param('account_request', AccountRequest)
        body = TestHelpers.serialize_body_param(account_request)
        url = TestHelpers.build_url('/Accounts/{accountId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_an_account(account_request=account_request)

    def test_update_an_application(self):
        """Test case for update_an_application

        Update an application  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        application_id = TestHelpers.build_path_param('application_id')
        path_params['applicationId'] = application_id
        application_request = TestHelpers.build_body_param('application_request', ApplicationRequest)
        body = TestHelpers.serialize_body_param(application_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/Applications/{applicationId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_an_application(application_id=application_id,application_request=application_request)

    def test_update_an_incoming_number(self):
        """Test case for update_an_incoming_number

        Update an Incoming Number  # noqa: E501
        """
        query_params = {}
        path_params = {}
        body = None
        account_id = TestHelpers.build_path_param('account_id')
        path_params['accountId'] = account_id
        phone_number_id = TestHelpers.build_path_param('phone_number_id')
        path_params['phoneNumberId'] = phone_number_id
        incoming_number_request = TestHelpers.build_body_param('incoming_number_request', IncomingNumberRequest)
        body = TestHelpers.serialize_body_param(incoming_number_request)
        url = TestHelpers.build_url('/Accounts/{accountId}/IncomingPhoneNumbers/{phoneNumberId}', path_params)
        
        self.mock_pool.expect_request(
            'POST',
            self.base_url + url,
            body=body,
            fields=TestHelpers.serialize_query_params(query_params),
            headers={
                'Accept':  'application/json',
                'Content-Type':  'application/json',
                'Authorization': self.auth_header,
                'User-Agent': 'OpenAPI-Generator/4.0.6/python',
            },
            preload_content=True,
            timeout=None
        )

        self.api.update_an_incoming_number(phone_number_id=phone_number_id,incoming_number_request=incoming_number_request)


if __name__ == '__main__':
    unittest.main()
