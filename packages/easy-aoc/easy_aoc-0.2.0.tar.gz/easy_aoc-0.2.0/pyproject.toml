[tool.poetry]
name = "easy_aoc"
version = "0.2.0"
description = "Tools for the Advent of Code"
license = "MIT"
authors = ["Sebastiaan Zeeff <sebastiaan.zeeff@gmail.nl>"]
packages = [{ include = "easy_aoc", from = "src" }]

[tool.poetry.dependencies]
python = "^3.10"
attrs = "^22.1.0"
appdirs = "^1.4.4"
requests = "^2.28.1"
yarl = "^1.8.2"
sqlalchemy = {version = "^2.0.0b4", allow-prereleases = true}
beautifulsoup4 = "^4.11.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
black = "^22.10.0"
mypy = "^0.991"
pylint = "^2.15.7"
isort = "^5.10.1"
types-requests = "^2.28.11.5"
pytest-cov = "^4.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.10"

disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_return_any = true
warn_redundant_casts = true

warn_unused_configs = true

[tool.isort]
profile = "black"

[tool.pylint.main]
py-version = "3.10"
fail-under = 10
jobs = 1
persistent = true
limit-inference-results = 100
suggestion-mode = true

ignore = []
ignore-patterns = []
recursive = true

[tool.pylint.basic]
# Lists for specific good and bad names
good-names = ["i", "j", "k", "ex", "Run", "_"]
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

# Naming styles
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "snake_case"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
inlinevar-naming-style = "snake_case"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

# Other configuration
docstring-min-length = -1
property-classes = ["abc.abstractproperty"]

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.exceptions]
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.pylint.format]
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

indent-after-paren = 4
indent-string = "    "
max-line-length = 88
max-module-lines = 1000

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead"]
enable = ["c-extension-no-member"]

[tool.pylint.method_args]
timeout-methods = ["requests.api.delete", "requests.api.get", "requests.api.head", "requests.api.options", "requests.api.patch", "requests.api.post", "requests.api.put", "requests.api.request"]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
ignore-imports = true
ignore-signatures = true
min-similarity-lines = 4

[tool.pylint.spelling]
max-spelling-suggestions = 4
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.string]
check-str-concat-over-line-jumps = true

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = ["no-member", "not-async-context-manager", "not-context-manager", "attribute-defined-outside-init"]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local", "argparse.Namespace"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = ["six.moves", "past.builtins", "future.builtins", "builtins", "io"]
